    1  LS
    2  source ~/Projects/config/env.sh
    3  source ~/PROJECTS/config/env.sh
    4  healthchecks-thunknalla
    5  ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
    6  subl
    7  git commit -m 'ft: Added test for bad kinds [#145028641]'
    8  git config global user.name "davidmukiibi"
    9  git push origin ft-testing-bad-kinds-#145028641
   10  cd healthchecks-thunknalla
   11  python manage.py -m pdb test hc.front.tests.test_add_channel
   12  python manage.py pdb test hc.front.tests.test_add_channel
   13  brew cask install .atom
   14  tom
   15  pip install atom
   16  brew cask install atom-beta
   17  brew install atom-beta
   18  brew install atom
   19  brew install atomicparsley
   20  which atom
   21  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null ; brew install caskroom/cask/brew-cask 2> /dev/null
   22  brew cask install atom
   23  brew install vlc
   24  sqlite3
   25  brew update sqlite3
   26  brew upgrade sqlite3
   27  brew cask install sqlitebrowser
   28  sqlite3.version
   29  cd Room_management_system-master
   30  /Users/davidmukiibi/PycharmProjects/check_point1 
   31  git remote add https://github.com/davidmukiibi/amity-room-allocation.git
   32  git remote add origin https://github.com/davidmukiibi/amity-room-allocation.git
   33  git push -u master
   34  git push -u develop
   35  git commit -m 'initial commit to add all local files to the remote repo'
   36  git push -u origin develop
   37  git checkout -b master
   38  git push git push --set-upstream origin master
   39  git merge
   40  git merge --strategy=ours master
   41  git merge better_branch
   42  git checkout better_branch
   43  git merge --strategy=ours --no-commit master
   44  atom db.txt
   45  which sqalchemy
   46  touch sqlite_ex.py
   47  atom sqlite_ex.py
   48  python sqlalchemy_declarative.py
   49  touch sqlalchemy_insert.py
   50  atom sqlalchemy_insert.py
   51  python sqlalchemy_insert.py
   52  from sqlalchemy_declarative import Person, Base, Address
   53  https://github.com/andela/bestpractices.wiki.git
   54  git clone https://github.com/andela/bestpractices.wiki.git
   55  which sqlalchemy
   56  touch alchemy_db_example
   57  atom alchemy_db_example
   58  touch alchemy_db_another_example
   59  atom alchemy_db_another_example
   60  pip install pylama
   61  pip install linter-pylama
   62  touch tabledef.py
   63  python tabledef.py
   64  touch dummy.py
   65  python dummy.py
   66  atom dummy.py
   67  atom tabledef.py
   68  whivh sqlite
   69  which sqlite
   70  which sqlite3
   71  cd /usr/bin/sqlite3
   72  cd /usr/bin/
   73  cd ./Desktop
   74  cd sqlite:///
   75  cd sqlite3:///
   76  pip install flask-alchemy
   77  brew install flask-alchemy
   78  sudo pip easy_install Flask-SQLAlchemy 
   79  sudo pip install Flask-SQLAlchemy 
   80  which flask-alchemy
   81  which flask-sqlalchemy
   82  python databse.py
   83  import sqlalchemy
   84  pip
   85  ;s
   86  atom database.py
   87  database.py
   88  sudo python ez_setup.py
   89  easy_install SQLAlchemy
   90  /usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python ; exit;
   91  python database.py
   92  pip install vscode
   93  brew install vscode
   94  pip install isort
   95  source ~/.zshrc
   96  git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
   97  $shell
   98  ./install.sh
   99  exec
  100  cd PycharmProjects
  101  cd check_point1
  102  /usr/local/opt/python/bin/python -m pip install pylint
  103  pip install sqalchemy
  104  pip install sqlalchemy
  105  cd fonts
  106  install.sh
  107  pip install.sh
  108  zsh install.sh
  109  cd bestpractices.wiki
  110  cd img
  111  hrhrhrhrh
  112  exec $SHELL
  113  pip install -U pytest
  114  pytest --version
  115  cd Room-Allocation
  116  pip install tree
  117  PYTHONPATH="/usr/local/bin/python3:$PYTHONPATH"
  118  export PYTHONPATH
  119  cd Room-allocation
  120  alias clear=c
  121  alias c=clear
  122  alias c="clear"
  123  alias clear="c"
  124  alias "clear"=c
  125  sudo pip install pylint
  126  git help
  127  git user.email
  128  git config user.email
  129  git config user.name
  130  touch  ~/.ssh/config
  131  cd  ~/.ssh/config
  132  ~/.ssh/config
  133  sudo  ~/.ssh/config
  134  atom ~/.ssh/config
  135  git@github.com:davidmukiibi/CP1-Room-Allocation-System.git
  136  git statud
  137  git add
  138  pip install pylint
  139  git commit -m "[#146198005] ch-create-person-class, this is the blueprint of the fellow and staff objects"
  140  git remote add CP1-Room-Allocation-System https://github.com/davidmukiibi/CP1-Room-Allocation-System
  141  git push CP1-Room-Allocation-System
  142  git push --set-upstream CP1-Room-Allocation-System master
  143  git pull CP1-Room-Allocation-System
  144  git pull CP1-Room-Allocation-System master
  145  git fetchall
  146  git --fetchall
  147  git merge 
  148  git merge hep
  149  git merge --hep
  150  git merge --commit
  151  git clone git@github.com:davidmukiibi/CP1-Room-Allocation-System.git
  152  git config --global user.name "davidmukiibi"
  153  git commit -m "[#146198005] ch-add-person-class which a blueprint of the staff and fellow objects."
  154  git commit -m "[#146198037] ch-add-room-class"
  155  git commit -m "[#146198101] ch-add-amity-class"
  156  git commit -m "#146198111] ft-add-create-room-thod, this ethod creates the rooms in amity."
  157  git commit -m "[#146198129] ft-add-person-to-room-in-amity, this method adds a person either staff or fellow to a room in amity, wither office, living space or both"
  158  git commit -m "[#146198355] ft-print-unallocated-people, this feature prints unallocated fellow and staff to the screen"
  159  git commit -m "[#146198395] ft-print-all-rooms-in-amity"
  160  git push 
  161  git commit -m "[#146198435] ft-print-all-the-people-in-offices"
  162  git commit -m "[#146198467] ft-print-all-people-in-livng-spaces-on-to-screen"
  163  git commit -m "[#146198495] ft-print-people-in-the-given-room"
  164  git commit -m "[#146198531] ft-reallocate-person"
  165  git commit -m "[#146198581] ft-load-people-from-text-file"
  166  git commit -m "[#146198679] ft-load-rooms-from-text-file"
  167  git commit -m "[#146198781] ft-remove-person-from-amity"
  168  git commit -m "[#146198815] ft-remove-room-from-amity."
  169  git commit -m "rooms and people sample input from text files"
  170  git commit -m "adding test files"
  171  git commit -m "fixinf indentation and moving sample input files to appropriate folders."
  172  git commit -m "incorporated quantified code feddback"
  173  git commit -m "added the tavis yml file"
  174  pip install travis
  175  pip install quantifed code
  176  pip install coveralls
  177  git commit -m "incorporating feedback from quantified code"
  178  git commit -m "adding quantified code badge"
  179  cd cp1-amity-allocation-develop
  180  pip install  clint
  181  cd Cp
  182  git commit -m "ft-database-integration 146227071 , adding the database that will be used to persist data from the application."
  183  git commit -m "editing the git ignore to include some files."
  184  git rm DS_Store
  185  git rm .DS_Store
  186  git rm .vscode/
  187  git rm -r .vscode/
  188  git commit -m "removing some files from my repo"
  189  git remote -help
  190  git checkout [#145028639]
  191  git checkout [347c5d2139944ea8f3ebe185235f50f6cc939cf8]
  192  git checkout [rollback] 347c5d2139944ea8f3ebe185235f50f6cc939cf8
  193  git checkout [347c5d2139944ea8f3ebe185235f50f6cc939cf8]git stash 
  194  git stash -help
  195  git diff __init__.py
  196  pip install django-sendsms
  197  python tests.py
  198  python tests.py verbose
  199  python tests.py pytest
  200  tests.py pytest
  201  pytest tests.py
  202  pytest -q test_amity.py
  203  atom test_amity.py
  204  pytest test_amity.py
  205  python unittests --with-coverage
  206  python tests unittests --with-coverage
  207  coverage html
  208  python tests/tes_amity.py
  209  python ..tests/tes_amity.py
  210  python ..tests/test_amity.py
  211  pip install django-twilio
  212  pip install TwilioRestClient
  213  pip -m install TwilioRestClient
  214  python -m pip install TwilioRestClient
  215  python manage,py sendalerts
  216  python .tests/test_amity.py
  217  python ./tests/test_amity.py
  218  python amity.py
  219  python ../tests/test_amity.py
  220  coverage run amity.py
  221  .coverage run amity.py
  222  python coverage run amity.py
  223  coverage python run amity.py
  224  python tests --with-coverage 
  225  python ../tests --with-coverage 
  226  coverage --version
  227  python tests/ --with-coverage 
  228  python /tests --with-coverage 
  229  coverage run -m
  230  coverage report --help
  231  coverage report -m tests/
  232  coverage report -m amity.py
  233  coverage --help
  234  coverage run classes/amity.py
  235  ./python COVERAGEDIR run --pylib tests/test_amity.py
  236  python COVERAGEDIR run --pylib tests/test_amity.py
  237  python coverage run tests/test_amity.py
  238  python with-coverage run tests/test_amity.py
  239  python --with-coverage run tests/test_amity.py
  240  python -m coverage
  241  python -m --with-coverage
  242  python -m amity.py coverage
  243  python -m coverage amity.py
  244  coverage run --help
  245  coverage run --branch
  246  coverage run --develop
  247  coverage run amity.py test &&\ncoverage report
  248  coverage run amity.py tests &&\ncoverage report
  249  \clear
  250  nose --with-coverage
  251  nose --with-coverage amity.py
  252  nosetests --with-coverage amity.py
  253  coverage run classes/ tests &&\ncoverage report
  254  coverage run classes/* tests &&\ncoverage report
  255  coverage run tests/test_amity.py tests &&\ncoverage report
  256  coverage run tests/test_amity.py &&\ncoverage report
  257  nosetests --with-coverage tests/test_amity.py
  258  nose tests --with-coverage
  259  python test_amity.py
  260  python /tests/test_amity.py
  261  twilio
  262  which twilio
  263  pip install twilio
  264  pip3 install twilio
  265  sudo pip3 install twilio
  266  clesr
  267  python hc/api/transports
  268  python hc/api/transports.py
  269  git pullgit stash ?
  270  git pullgit stash help
  271  git pullgit stash --help
  272  git checkout ft-send_alerts_via_sms-145028655
  273  git config user.name "davidmukiibi"
  274  git stats
  275  git rm tests/tests.py
  276  .coverage run classes/amity.py tests | coverage report
  277  cd CP1-Room-Allocation-System/
  278  coverage run classes/amity.py tests | coverage report
  279  nose --with-coverage | coverage report
  280  pip install coverage
  281  git commit -m "Add requiremnts.txt file"
  282  git add test/test_amity.py
  283  git commit -m "Incorporate Quantified code syntax feedback"
  284  git rm classes/.DS_Store
  285  pip install nosetests
  286  git push -m "Modify requirements.txt file"
  287  git user.name
  288  user.name
  289  git commit -m "Modify requirements.txt file"
  290  shofiles
  291  pip install docopt
  292  git commit -m "Add empty rooms method to show all empty rooms in amity"
  293  git commit -m "Add empty rooms method test"
  294  git add classes/sample_rooms_input.txt
  295  git commit -m "Add some rooms to the list"
  296  git rm requirements.txt
  297  git commit -m "resolving merge conflict"
  298  python version
  299  python -version
  300  python --version
  301  nosetests --with-coveragels
  302  git diff classes/amity.py
  303  git commit -m "fixing the travis file."
  304  git add andela.db
  305  git add estonia.db
  306  git add uganda.db
  307  git commit -m "Add databases that tests are dependant on for testing purposes."
  308  git commit -m "Add travis CI badge to repo read me"
  309  git@github.com:davidmukiibi/NewInventoryManagement.git
  310  git clone git@github.com:davidmukiibi/NewInventoryManagement.git
  311  mkvirtualenv test_ground
  312  pip install pyfiglet
  313  pip install colorama
  314  pip install tabulate
  315  pip install pathlib
  316  atom .coverage.rc
  317  atom .coveragerc
  318  python amityApp.py -h
  319  cd NewInventoryManagement
  320  python app.py -i
  321  python tests.test_amity.py
  322  emport TWILIO_ACCOUNT_SID=ACacce7eab5f5f5018d1c78ba0bfc36aa7
  323  export TWILIO_ACCOUNT_SID=ACacce7eab5f5f5018d1c78ba0bfc36aa7 | export TWILIO_AUTH_TOKEN=4b813e4109fe5f91e91568d202de0463
  324  xxx
  325  export TWILIO_AUTH_TOKEN=4b813e4109fe5f91e91568d202de0463
  326  os.environ['TWILIO_ACCOUNT_SID'
  327  os.environ['TWILIO_ACCOUNT_SID']
  328  os.environ
  329  TWILIO_ACCOUNT_SID
  330  os.environ[TWILIO_ACCOUNT_SID]
  331  cd hc-venv
  332  export token=4b813e4109fe5f91e91568d202de0463
  333  python manage.py amityApp.py
  334  create_room narnia o
  335  python manage.py createsuperuser
  336  git add kenya.db
  337  git add .gitignore 
  338  git coomit 
  339  git rm classes/new_amity.db
  340  export TWILIO_ACCOUNT_SID=ACacce7eab5f5f5018d1c78ba0bfc36aa7
  341  python manage.py
  342  python amityApp.py 
  343  add_person <first_name> <second_name> <person_type> <living_space_option>add_person <first_name> <second_name> <person_type> <living_space_option>add_person <first_name> <second_name> <person_type> <living_sp
  344  git commit -m "[Chore] Add readMe to repository.\n"
  345  git clone https://github.com/scott45/checkpoint-1A.git
  346  git commit -m "[Chore] Add README to my repo."
  347  python amity_app.py
  348  empty_rooms
  349  print_unallocated
  350  PATH="/Users/davidmukiibi/Desktop/CP1-Room-Allocation-System"
  351  AMITYPATH="/Users/davidmukiibi/Desktop/CP1-Room-Allocation-System"
  352  covwrage report
  353  python manage.py amity_app.py
  354  python manage.py classes/amityApp.py
  355  python classes/amityApp.py
  356  python classes/amityApp.py -i
  357  cd Healthchecks_ThunkNalla/
  358  python manage.py runserver 10000
  359  python manage.py runserver 30000
  360  python manage.py runserver 20000
  361  python manage.py runserver 1000
  362  create_room narnia l
  363  coverage 
  364  coverage help
  365  cd classes 
  366  export TWILIO_ACCOUNT_SID='ACacce7eab5f5f5018d1c78ba0bfc36aa7'
  367  export TWILIO_AUTH_TOKEN='4b813e4109fe5f91e91568d202de0463'
  368  python 
  369  python manage.py runserver 50000
  370  python manage.py runserver 60000
  371  cd .coveralls.yml
  372  git add .coveralls.yml
  373  git commit -m "Add coveralls yml file"
  374  git commit -m "change coveralls badge branch"
  375  python manage.py senalerts
  376  python manage.py sendalerts
  377  lear
  378  cd webapps
  379  cd Healthchecks_ThunkNalla
  380  workon hc-environment
  381  python manage.py runserver 9000
  382  create_room january o
  383  \tlkjhgfdsghjkl
  384  brew install ctags
  385  nosetests --with-coverage --cover-html
  386  [200~brew install asciinema
  387  coverage report 
  388  git add classes/database_tables.py
  389  git add tests/test_mity.py
  390  brew install asciinema
  391  git add tests/test_amity.py\n
  392  git commit -m "[Chore] Reformat file."
  393  python -m tests.test_amity.py
  394  python -m tests/test_amity.py
  395  python  -m
  396  python  -m CP1-Room-Allocation-System
  397  python  -m classes
  398  python  -m tests
  399  nosetets
  400  git commit -m "Refactor line 97 of this file"
  401  python classes/amity.py
  402  git add classes/person.py
  403  \coverage report
  404  coverage run classes/amity.py tests && coverage report
  405  noestests
  406  coverage
  407  coverage run
  408  nosetests --with-coverage | coverage report
  409  python amityApp.py
  410  git add classes/room.py
  411  mkvirtualenv checkpoint2
  412  pip install npm
  413  npm version
  414  npm install -g npm-check
  415  brew install npm
  416  which  npm
  417  npm --version
  418  npm-check
  419  \tcd angulajs
  420  git clone https://github.com/angular/quickstart.git
  421  cd DEMO
  422  cd quickstart
  423  npm install 
  424  cd CP1-Room-Allocation-System
  425  asciinema rec
  426  gitpush
  427  git add classes/sample_people_input.txt
  428  load_rooms_from sample_rooms_input
  429  git add amityApp.py
  430  python amityApp.py -i
  431  python tests/test_amity.py
  432  git add classes/amity.py 
  433  git add classes/amity.py
  434  tests/test_amity.py
  435  git add tests/test_amity.py
  436  git add .coverage.rc
  437  git clone git@github.com:davidmukiibi/CP2A-BucketList-Application-API.git
  438  git checkout -b develop
  439  workon
  440  pip install flask-restful
  441  pip install python3
  442  workon test_ground
  443  pip install --editable .
  444  cd flaskr
  445  export FLASK_APP=flaskr | export FLASK_DEBUG=true | flask run
  446  export FLASK_APP=flaskr
  447  export FLASK_DEBUG=true
  448  python api.py
  449  atom .profile
  450  . .profile
  451  pythom
  452  git clone https://github.com/davidmukiibi/Day3Repo.git
  453  python bucketlist_app.py
  454  pip install flask-wtf
  455  pip install flask-sqlalchemy
  456  pip install flask-script
  457  pip install flask-debugtoolbar
  458  git clone git@github.com:andela/wger_thunknalla-.git
  459  docker run -ti --name wger.apache --publish 8000:80 wger/apache
  460  atom setup.py
  461  atom tasks.py
  462  mkvirtualenv sims 2
  463  mkvirtualenv sims2
  464  pip install -r requirements.txt  # or requirements_devel.txt to develop
  465  invoke create_settings \\n         --settings-path /home/wger/wger/settings.py \\n         --database-path /home/wger/wger/database.sqlite
  466  invoke create_settings
  467  --settings-path /home/wger/wger/settings.py
  468  export create_settings --settings-path /home/wger/wger/settings.py
  469  invoke create_settings --settings-path /home/wger/wger/settings.py
  470  invoke create_settings --database-path /home/wger/wger/database.sqlite
  471  invoke bootstrap_wger --settings-path /home/wger/wger/settings.py
  472  pip install curl
  473  brew install curl
  474  python app.py http://localhost:6000/todo/api/v1.0/tasks
  475  http://localhost:6000/todo/api/v1.0/tasks python app.py
  476  python http://localhost:6000/todo/api/v1.0/tasks app.py
  477  curl -i http://localhost:6000/todo/api/v1.0/tasks
  478  curl -i http://localhost:8000/todo/api/v1.0/tasks
  479  cd new
  480  curl -i http://localhost:5000/todo/api/v1.0/tasks/0
  481  curl -i http://localhost:5000/todo/api/v1.0/tasks/2
  482  curl -i -H "Content-Type: application/json" -X POST -d '{"title":"Read a book"}' http://localhost:5000/todo/api/v1.0/tasks
  483  curl -i -H "Content-Type: application/json" -X POST -d '{"title":"Go to goa"}' http://localhost:5000/todo/api/v1.0/tasks
  484  curl -i -H "Content-Type: application/json" -X POST -d '{"description": "this is a great travel destination", "title":"Go to goa"}' http://localhost:5000/todo/api/v1.0/tasks
  485  curl -i http://localhost:5000/todo/api/v1.0/tasks
  486  curl -i http://localhost:5000/todo/api/v1.0/tasks/1
  487  curl -i http://localhost:5000/todo/api/v1.0/tasks/5
  488  curl -i http://localhost:5000/todo/api/v1.0/tasks/6
  489  pip install postgesql
  490  pip install postgesSql
  491  brew install postgesql
  492  pip install postgresql
  493  pip install flask-migrate
  494  workon psycopg2
  495  createdb test_db
  496  createdb bucketlist
  497  export FLASK_APP=python run.py
  498  cd CPA
  499  python CPA2/run.py
  500  python CP2A/run.py
  501  cd CP2A
  502  export FLASK_APP=run.py
  503  export SECRET="t-h-i-s-i-s-a-n-d-e-l-a""\n
  504  export SECRET="t-h-i-s-i-s-a-n-d-e-l-a"
  505  export APP_SETTINGS="development"
  506  export DATABASE_URL="postgresql://localhost/flask_api"
  507  export FLASK_APP="run.py"
  508  s
  509  createdb flask_api
  510  "/Applications/Postgres.app/Contents/Versions/9.6/bin/psql" -p5432 -d "flask_api"
  511  pip install -r requirements_devel.txt
  512  $ wger create_settings --settings-path /davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --database-path /davidmukiibi/PROJECTS/wger_thunknalla-/wger/database.sqlite
  513  wger create_settings --settings-path /davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --database-path /davidmukiibi/PROJECTS/wger_thunknalla-/wger/database.sqlite
  514  wger create_settings --settings-path /davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py
  515  wger create_settings --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --database-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/database.sqlite
  516  wger --database-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/database.sqlite
  517  wger create_settings --database-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/database.sqlite
  518  pip install bootstrap
  519  brew install bootstrap
  520  brew install jooby-bootstrap
  521  brew install amdatu-bootstrap
  522  invoke bootstrap_wger --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --no-start-server
  523  pip install docker
  524  docker run -ti --name wger.devel --publish 8000:8000 wger/devel
  525  sudo apt-get install python3-dev python-virtualenv nodejs nodejs-legacy npm libjpeg8-dev zlib1g-dev
  526  wger bootstrap --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py
  527  wger bootstrap_wger --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py
  528  invoke bootstrap_wger --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py
  529  git clone git@github.com:wger-project/wger.git
  530  invoke bootstrap_wger --settings-path /home/wger/wger/settings.py --no-start-server
  531  invoke bootstrap_wger --settings-path /home/wger/wger/settings.py --no-start-serverwger bootstrap --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py
  532  wger bootstrap --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --no-start-server
  533  invoke bootstrap --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --no-start-server
  534  wger bootstrap_wger --settings-path /Users/davidmukiibi/PROJECTS/wger_thunknalla-/wger/settings.py --no-start-server
  535  python setup.py develop
  536  pip install Flask-API
  537  curl http://127.0.0.1:5000/
  538  curl http://127.0.0.1:5000/bucketlists/
  539  4pwd
  540  cd CP2
  541  cd /Applications/Postgres.app/Contents/Versions/9.6/bin/psql
  542  cd /Applications/Postgres.app/Contents/Versions/9.6/bin/
  543  python manage.py create_db(newbucketlist)
  544  python manage.oy runserver
  545  python manage.py create_db bucketlist
  546  python manage.py create_db newbucketlist
  547  python manage.py create_db nextbucketlist
  548  python manage.py drop_db nextbucketlist
  549  python manage.py drop_db bucketlist
  550  python manage.py drop_db newbucketlist
  551  "/Applications/Postgres.app/Contents/Versions/9.6/bin/psql" -p5432 -d "bucketlist"
  552  python3 manage.py create_db andela
  553  python manage.py create_db andela
  554  python manage.py create_db andela1
  555  python manage.py create_db andela2
  556  "/Applications/Postgres.app/Contents/Versions/9.6/bin/psql" -p5432 -d "andela2"
  557  cd /Users/davidmukiibi/PROJECTS/CP2A-BucketList-Application-API
  558  python manage.py dropdb
  559  python manage.py createdb uganda
  560  python manage.py createdb
  561  owd
  562  which psql
  563  brew services list
  564  python manage.py andela2 init
  565  python manage.py flask_api  init
  566  python manage.py  init flask_api
  567  python manage.py create
  568  -
  569  export DATTABASE_URL="postgresql://localhost/flask_api"
  570  pip install psycopg2==2.6.1
  571  pip install Flask-Migrate
  572  python manage.py create_db 
  573  "/Applications/Postgres.app/Contents/Versions/9.6/bin/psql" -p5432 -d "andela"
  574  python run.py 6000
  575  pip install kasuwa
  576  cd /usr/local/bin/npm
  577  cd /Users/davidmukiibi/local/bin/npm
  578  cd /Users/davidmukiibi/.local/bin/npm
  579  cd BucketListApplicationAPI
  580  which virtualenvwrapper.sh
  581  .virtualenvs
  582  mkvirtualenv --python=/usr/local/bin/python3 checkpointII
  583  pip freeze > requirement.txt
  584  pip install -r requirement.txt
  585  pip install flask_api
  586  pip install flask_jwt_extended
  587  flask run
  588  pip install flask_testing
  589  psql 
  590  nosetests TestLoginAuthentication
  591  nosetests test_register
  592  nosetests tests/test_register
  593  nosetests tests/TestLoginAuthentication/test_register
  594  nosetests tests.TestLoginAuthentication.test_register
  595  nosetests buckeT.tests.TestLoginAuthentication.test_register
  596  nosetests buckeT/tests/TestLoginAuthentication/test_register
  597  nosetests buckeT/tests/test_bucketlist/TestLoginAuthentication
  598  nosetests buckeT/tests/test_bucketlist
  599  nosetests buckeT/tests/test_bucketlist.py
  600  nosetests buckeT/tests/test_bucketlist:TestLoginAuthentication.test_register
  601  nosetests test_bucketlist:TestLoginAuthentication.test_register
  602  nosetests tests/test_bucketlist:TestLoginAuthentication.test_register
  603  nosetests tests:TestLoginAuthentication.test_register
  604  nosetests /tests:TestLoginAuthentication.test_register
  605  nosetests tests/test_bucketlist.py:TestLoginAuthentication.test_register
  606  pip install nose2
  607  pip install cov-core
  608  createdb test_database
  609  psql test_database
  610  nosetests buckeT/tests/test_bucketlist.py:TestLoginAuthentication.test_register
  611  curl --insecure -c cookies.txt -X POST -d 'first_namee=admin&secon_name=admin2&email=admin.admin2@gmail.com&password=admin' http://127.0.0.1:5000/auth/register/
  612  curl --insecure -c cookies.txt -X POST -d 'first_name=admin&secon_name=admin2&email=admin.admin2@gmail.com&password=admin' http://127.0.0.1:5000/auth/register/
  613  python manage.py db revision
  614  psql davidmukiibi
  615  pip install flask_script
  616  pip install flask_migrate
  617  python manage.py db migrations
  618  sudo -u davidmukiibi createdb test_database
  619  python manage.py test_database init
  620  alembic
  621  alembic revision -m "baseline"  
  622  alembic init alembic
  623  alembic revision -m "baseline"
  624  pip install sqlalchemy.dialects
  625  pip install sqlalchemy.dialects:driver
  626  pip install sqlalchemy-redshift==0.4.0
  627  alembic upgrade head
  628  alembic upgrade --sql
  629  alembic upgrade --sql --tag b05531658df1
  630  alembic upgrade --sql --tag revision
  631  alembic upgrade --sql --tag revision=b05531658df1
  632  curl --insecure -c cookies.txt -X POST -d 'first_name=admin&second_name=admin2&email=admin.admin2@gmail.com&password=admin' http://127.0.0.1:5000/auth/register/
  633  pip install simplejson
  634  git clone https://github.com/asce1062/CP2A-BucketList-Application-API.git
  635  cd CP2A-BucketList-Application-API
  636  python unittest tests/
  637  python run tests/
  638  cd instance.config
  639  atom __init__.py
  640  python3
  641  pip3 install ipython
  642  sudo pip3 install ipython
  643  ipython
  644  ipython3
  645  nose2 -v --with-coverage
  646  nose2 -v /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_login_user.py
  647  nose2
  648  nose2 -v
  649  git checkout -b ft-social-login-integration-147322279
  650  git rm package.json
  651  cd bucket
  652  git push --set-upstream origin develop
  653  cd classes
  654  pip install requirements.txt
  655  pip install social-auth-app-django
  656  cd wger_
  657  git clone https://github.com/cnagadya/CP1_RoomAllocation.git
  658  cd CP1_RoomAllocation
  659  cd CP1_RoomAllocation-develop
  660  mkvirtualenv nagadya
  661  pyhton app.py
  662  python app.py
  663  pip install nose
  664  pip install python-social-auth
  665  ./manage.py syncdb
  666  python manage.py syncdb
  667  pip install jwkest
  668  brew install jwkest
  669  pip install pyjwkest
  670  cd P
  671  python manage.py runserver_plus
  672  pip install django-extensions
  673  cd /Users/davidmukiibi/PROJECTS/wger_thunknalla-
  674  git push --set-upstream origin ft-social-login-integration-147322279
  675  git config --global user.name davidmukiibi
  676  cd buckeT/
  677  git commit -m "[Feature #147136433] Add database models"
  678  git chekout -b ft-register-147133863
  679  git checkout -b ft-register-147133863
  680  git status`\n\n\n\n\q
  681  git status\n\n\n\n\q
  682  git checkout -b git checkout -b ft-login-148025891
  683  git checkout -b ft-login-148025891
  684  git push --set-upstream origin ft-login-148025891
  685  git rm buckeT/__init__.py
  686  git rm -f buckeT/__init__.py
  687  git checkout -b ft-configuration-148026953
  688  git log --diff-filter=D --summary
  689  git rm
  690  git restore
  691  git ls-files -d | xargs git checkout --
  692  git restore 'buckeT/__init__.py'
  693  git log 'buckeT/__init__.py'
  694  git checkout 'buckeT/__init__.py'
  695  git rev-list -n 1 HEAD -- buckeT/__init__.py
  696  git log buckeT/__init__.py
  697  git checkout $(git rev-list -n 1 HEAD -- "$buckeT/__init__.py")^ -- "$buckeT/__init__.py"
  698  git checkout buckeT/__init__.py
  699  pip install unpyclib
  700  CLEAR
  701  python -m unpyclib.application -Dq /Users/davidmukiibi/Desktop/__init__.pyc
  702  cd '/Users/davidmukiibi/Desktop/' && '/usr/local/bin/pythonw'  '/Users/davidmukiibi/Desktop/__init__.pyc'  && echo Exit status: $? && exit 1
  703  cd '/Users/davidmukiibi/Desktop/' && '/usr/local/bin/pythonw'  '/Users/davidmukiibi/Desktop/__init__.pyc'  && echo Exit status: $? && exit 1\n
  704  python manage.py run.py
  705  git brnch
  706  git diff buckeT/bucketlist.py
  707  git checkout ft-register-147133863
  708  git checkout ft-login-148025891
  709  git chekout develop
  710  git merge ft-login-148025891
  711  git merge ft-register-147133863
  712  git checkout ft-configuration-148026953
  713  git add buckeT/tests/__init__.py
  714  git add migrations/
  715  git push --set-upstream origin ft-configuration-148026953
  716  git merge ft-configuration-148026953
  717  atom .env
  718  atom  .gitignore
  719  python manage.py db makemigrations
  720  atom /Users/davidmukiibi/PROJECTS/checkPointII/migrations/alembic.ini
  721  python manage.py drop_db
  722  alembic stamp head
  723  pip install as_view
  724  git clone git@github.com:davidmukiibi/Day3Repo.git
  725  python manage.py shell
  726  python manage.py create_db
  727  cd core
  728  cd static
  729  cd images
  730  git add wger/core/templates/user/login.html
  731  git add wger/core/static/images/github.png
  732  git add wger/core/static/images/google.png
  733  wger/core/static/images/twitter.png
  734  git add wger/core/static/images/twitter.png
  735  git add wger/core/static/css/bootstrap-custom.css
  736  git clone https://github.com/orcasgit/python-fitbit.git
  737  cd python-fitbit
  738  sudo pip install -r requirements/base.txt
  739  pip install django-fitbit
  740  brew install django-fitbit
  741  /usr/bin/python -m pip install pylint
  742  /usr/bin/python -m pip install
  743  sudo /usr/bin/python -m pip install
  744  sudo /usr/bin/python -m pip install pylint
  745  PYTHON MANAGE.PY RUNSERVER
  746  cd -wger_blacklist-master
  747  pip install --upgrade autopep8
  748  autopep8 --in-place --aggressive --aggressive /Users/davidmukiibi/PROJECTS/checkPointII/bucketlist.py
  749  autopep8 --in-place --aggressive --aggressive /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/bucketlist.py
  750  pip install ipdb
  751  python tests /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_bucket_list.py
  752  python run  /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_bucket_list.py
  753  python run tests  /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_bucket_list.py
  754  python run buckeT/tests/test_bucket_list.py
  755  python run tests buckeT/tests/test_bucket_list.py
  756  python tests buckeT/tests/test_bucket_list.py
  757  python  buckeT/tests/test_bucket_list.py
  758  python /Users/davidmukiibi/PROJECTS/checkPointII/buc
  759  keT/tests/test_bucket_list.py
  760  python test_bucket.py
  761  pytests
  762  nosetests /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_bucket_list.py
  763  nosetestsbuckeT/tests/test_bucket_list.py
  764  python /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/tests/test_login_user.py
  765  python /Users/davidmukiibi/PROJECTS/checkPointII/buckeT/bucketlist.py
  766  git checkout -b ft-create_bucketlist-147134103
  767  git branch -D ft-create_bucketlist-147134103
  768  git branch -D ft-create_bucketlist-148056679
  769  git checkout -b ft-create_bucketlist-148056679
  770  git checkoout develop
  771  git merge ft-create_bucketlist-148056679
  772  git checkout -b ft-create-bucketlist-item-148535949
  773  git merge ft-create-bucketlist-item-148535949
  774  nosetests --with-coverage buckeT/tests
  775  git add .env
  776  workon everything
  777  pip install travis_wait
  778  histort
  779  rm swagger-ui
  780  nosetests test_bucketlist.py
  781  nosetests test_bucket_list.py
  782  nosetests buckeT/tests/test_login_user.py
  783  nosetests buckeT/tests/test_register__user.py
  784  nosetest
  785  git commit -m "minor modifications"
  786  atom wger/urls.py
  787  git checkout -b ft-integrate-fitbit-147322249
  788  manage.py help
  789  python migrate
  790  histroy
  791  nosetests buckeT/tests/test_bucket_list_item.py
  792  git sttus
  793  nosetests buckeT/tests/test_bucket_list.py
  794  nosetests tests/test_register_user.py
  795  gti status
  796  git add buckeT/tests/test_bucket_list.py
  797  git add postmanscreenshots/
  798  pip install validate_email
  799  pip install pyDNS
  800  git add bucketlist.py
  801  git clone https://github.com/swagger-api/swagger-ui.git
  802  cd swagger-ui
  803  Run npm i -g npm to update
  804  npm install gulp -g
  805  gulp
  806  touch gulpfile.js
  807  atom gulpfile.js
  808  npm install -g gulp
  809  gulp build
  810  atom apiary.apib
  811  brew install apiaryio
  812  brew gem install apiaryio
  813  brew gem install
  814  brew install gem
  815  gem install apiaryio
  816  sudo gem install apiaryio
  817  export APIARY_API_KEY="13fe0f565e9672e4fec2dacc4d75a49c"
  818  git add buckeT/tests/test_bucket_list_item.py
  819  git add index.html
  820  touch Procfile
  821  atom Procfile
  822  gunicorn
  823  git add Procfile
  824  brew cask install heroku
  825  brew install heroku
  826  heroku
  827  git remote add heroku git@heroku.com:
  828  git remote add heroku git@heroku.com:bucketlist-api-flask.git
  829  ssh-keygen -t rsa -C "david.mukiibiq@gmail.com"
  830  sudo git push heroku develop:master
  831  sudo git push heroku develop
  832  sudo git push heroku develop:master --app=bucketlist-api-flask
  833  sudo git push heroku develop:master app=bucketlist-api-flask
  834  ls -la
  835  more id_rsa.pub
  836  cd .ssh
  837  mkdir heroku
  838  ssh-keygen -t rsa -C "david.mukiibi@andela.com"
  839  cat id_rsa.pub | pbcopy
  840  git push origin her
  841  git remote remove heroku
  842  git remote add heroku https://git.heroku.com/bucketlist-api-flask.git
  843  git push heroku develop 
  844  heroku config:set DISABLE_COLLECTSTATIC=1
  845  pip freexe
  846  git push heroku develop:master 
  847  gunicorn run:app
  848  atom .sh
  849  cd ~/
  850  ssh-keygen -t rsa
  851  atom ~/.ssh/id_rsa.pub
  852  git rm -r .env
  853  nostests
  854  git checkout a4db3a8c91c69e3ada5ca4282520f71ddda3b6d0 buckeT/bucketlist.py
  855  pip install pydns==2.3.6
  856  pytest
  857  python test buckeT/tests/test_register_user.py
  858  python buckeT/tests/test_register_user.py
  859  nosetests 
  860  git add buckeT/tests/test_login_user.py
  861  nosetests buckeT/tests/test_register_user.py
  862  git add buckeT/database_models.py
  863  git add buckeT/tests/base_test_class.py
  864  git add buckeT/tests/test_register_user.py
  865  coverage report -m
  866  git rm  Procfile
  867  git rm --cached Procfile
  868  pip install fitbit
  869  pip install django.contrib.autrh.mixins
  870  export FITAPP_CONSUMER_KEY=228GGS
  871  export FITAPP_CONSUMER_SECRET=d651833d76998815030d86edd54c993e
  872  git add  .yml
  873  git rm .yml
  874  git add circle.yml
  875  git rm circle.yml
  876  git rm migrations/versions/3f00879bc667_.py
  877  git rm migrations/versions/ade5ee0327d6_.py
  878  git add wger/core/templates/user/fitbit.html
  879  git add wger/core/templates/navigation.html
  880  git add wger/core/urls.py
  881  git push --set-upstream origin ft-integrate-fitbit-147322249
  882  pip install gulp
  883  pip install pep8
  884  git add wger/settings_global.py
  885  git add wger/urls.py
  886  pip freeze
  887  git psh
  888  git checkout ft-social-login-integration-147322279
  889  git checkout ft-integrate-fitbit-147322249
  890  git addgit status
  891  gti commit
  892  gti push
  893  $ export DJANGO_SETTINGS_MODULE="wger.settings"
  894  export DJANGO_SETTINGS_MODULE="settings_global"
  895  cd wger
  896  python manage.py runserver 90000
  897  export DJANGO_SETTINGS_MODULE="wger.settings"
  898  python manage.py makemigrations
  899  python manage.py makemigrate
  900  python manage.py migrate
  901  export SECRET_KEY = 'r*fccv=-6n*a8vs3d#n-cwg6=9s)pbkly9um-=)nc*o3^+93e4'
  902  export SECRET_KEY = r*fccv=-6n*a8vs3d#n-cwg6=9s)pbkly9um-=)nc*o3^+93e4
  903  export SECRET_KEY=r*fccv=-6n*a8vs3d#n-cwg6=9s)pbkly9um-=)nc*o3^+93e4
  904  export SECRET_KEY="r*fccv=-6n*a8vs3d#n-cwg6=9s)pbkly9um-=)nc*o3^+93e4"
  905  coverage report
  906  cd tofaanga-master
  907  mkvirtualenv tumuhairwe
  908  mkvirtualenv wagaba
  909  cd bucketlist-master
  910  mkvirtualenv ashaba
  911  cd Bucketlist-develop
  912  cd Bucketlist-challenge
  913  cd Bucketlist-challenge-2.zip
  914  cd Bucketlist-challenge-2
  915  workon wagaba
  916  woro
  917  pip install gunicorn
  918  heroku logs -a bucketlistheroku
  919  Open app More 
  920  heroku logs -a bucketlistheroku 
  921  heroku login
  922  ga Procfile
  923  git push heroku develop
  924  ga instance/config.py
  925  gc -m "add comment"
  926  git dtatus
  927  git add buckeT/bucketlist.py
  928  heroku logs --app bucketlistheroku
  929  xgit add buckeT/__init__.py
  930  git add buckeT/templates/
  931  cd UGANDA\ COHORT2
  932  cd CodeClallange1-master
  933  mkvirtualenv joy
  934  atom requirements.txt
  935  cd App
  936  heroku pg:psql postgresql-solid-82145 --app bucketlistheroku
  937  heroku run bash
  938  nosetests
  939  ENV
  940  git add buckeT/__init__.py
  941  heroku run bash --app=bucketlistheroku
  942  apiary preview --output="index.html"
  943  git add apiary.apib
  944  git add buckeT/templates/index.html
  945  cd Projects
  946  heroku logs -t
  947  git rm index.html
  948  rmvirtualenv nagadya
  949  rmvirtualenv joy
  950  rmvirtualenv tumuhairwe
  951  rmvirtualenv wagaba
  952  rmvirtualenv ashaba
  953  rmvirtualenv test_ground
  954  rmvirtualenv checkpoint
  955  npm install -g typescript
  956  git clone https://github.com/stormpath/stormpath-ios-notes-example.git
  957  cd stormpath-ios-notes-example
  958  cd ~/Library/Developer/Xcode
  959  cd UserData
  960  cd FontAndColorThemes
  961  atom Bare.xccolortheme
  962  cd IOS-bucketlist
  963  rm IOS-bucketlist
  964  sudo gem install cocoapods
  965  pod init
  966  defaults write com.apple.dt.XCode IDEIndexDisable 0
  967  heroku logs
  968  heroku logs apps
  969  heroku apps
  970  heroku logs --app=bucketlistheroku
  971  env
  972  cd bucektlist
  973  git add bucektlist/CreateBucketlistViewController.swift
  974  git statusls
  975  atom Pod
  976  atom Podfile
  977  which swift
  978  swift
  979  swift4
  980  swift3
  981  xcrun swift -version
  982  workon sims2
  983  cd wger_thunknalla-
  984  python runserver
  985  git history
  986  git logs
  987  git checkout f6395d1be509994770c6cfbb482fc4d6115528cf
  988  git psuh
  989  git add git status
  990  git add wger/core/views/user.py
  991  workon checkpoint
  992  clear
  993  git
  994  git branch ft-149345439-app-ui
  995  git statuss
  996  git stash --help
  997  git add --help
  998  git reset --help
  999  git stash pop
 1000  git add ucketlists.xcodeproj/project.pbxproj
 1001  git checkout ft-149345439-app-ui 
 1002  git add Bucketlists/Base.lproj/Main.storyboard
 1003  git rm Bucketlists/ViewController.swift
 1004  git checkout -b ft-149345675-register-user
 1005  git checkout -b ft-149345695-login-user
 1006  git checkout -b ft-149345709-create-bucketlist
 1007  git add Bucketlists/Assets.xcassets/
 1008  git push Bucketlists
 1009  git add *
 1010  git push --set-upstream Bucketlists ft-149345709-create-bucketlist
 1011  git remote add origin https://github.com/davidmukiibi/Bucketlists
 1012  git branch --set-upstream-to=origin/master master
 1013  git push origin master
 1014  git remote add origin git@github.com:davidmukiibi/Bucketlists.git
 1015  git pull Bucketlists
 1016  git pull git@github.com:davidmukiibi/Bucketlists.git
 1017  git push --help
 1018  git pull -u git@github.com:davidmukiibi/Bucketlists.git
 1019  git pull master
 1020  git pull origin/master
 1021  git pull --help
 1022  git pull --rebase
 1023  git checkout -b ft-149345675-register-new-user
 1024  git rm t-149345675-register-new-user
 1025  git rm Bucketlists/RegisterViewController.swift
 1026  git checkout ft-149345675-register-user 
 1027  git rm ft-149345675-register-new-user
 1028  git checkout ft-149345675-register-new-user
 1029  git staus
 1030  git add Bucketlists/RegisterViewController.swift
 1031  git push --set-upstream origin ft-149345675-register-new-user
 1032  git checkout ft-149345695-login-user
 1033  git checkout -b ft-149345695-loggin-in
 1034  git statsu
 1035  git add Bucketlists/LoginViewController.swift
 1036  git push --set-upstream origin ft-149345695-loggin-in
 1037  git checkout -b  ft-149345709-creating-bucketlist
 1038  Bucketlists/CreateBucketlistViewController.swift
 1039  git add Bucketlists/CreateBucketlistViewController.swift
 1040  git checkout master
 1041  git add Bucketlists.xcodeproj/project.pbxproj
 1042  git checkoout ft-149345439-app-ui
 1043  git checkout ft-149345439-app-ui
 1044  git push --set-upstream origin ft-149345439-app-ui
 1045  node --version
 1046  sudo npm install -g @angular/cli
 1047  ng --version
 1048  ng new hello world
 1049  ng new hello-world
 1050  /usr/local/bin
 1051  ng new helloworld
 1052  rm wger
 1053  cd helloword
 1054  ks
 1055  cd Black\ Sails
 1056  cd SN\ 4
 1057  ng serve
 1058  sudo npm install -g typescript
 1059  mkdir ts-hello
 1060  code main.ts
 1061  tsc main.ts
 1062  code main.js
 1063  cd helloworld
 1064  cd ts-hello
 1065  node main.js
 1066  @test "create a directory named 'testing'" {\n  run_command "mkdir testing"\n\n  [ "$status" -eq 0 ]\n  [ -d "${tmp_dir}/testing" ]\n}
 1067  pushd Music
 1068  oldpwd
 1069  opwd
 1070  olpwd
 1071  ;mkdir -p /tmp/{foo,bar,baz}
 1072  mkdir -p /tmp/{foo,bar,baz}
 1073  mkdir tmp
 1074  mkdir foo
 1075  mkdir bar
 1076  cd bar 
 1077  mkdir baz
 1078  cd tmp
 1079  pushd /tmp/foo
 1080  popd
 1081  dirs
 1082  mkdir vagrant
 1083  touch Vagrantfile
 1084  vagrant init
 1085  vagrant init ubuntu/trusty64
 1086  git clone https://github.com/andela/learningmap.git
 1087  cd 01\ -\ Linux-Unix\ Basics
 1088  sudo mount -t vboxsf /Users/davidmukiibi/Desktop/learningmap/D1/D1 DevOps Engineer/Assessment/01 - Linux-Unix Basics/tests
 1089  sudo mount -t /Users/davidmukiibi/Desktop/learningmap/D1/D1 DevOps Engineer/Assessment/01 - Linux-Unix Basics/tests
 1090  atom Vagrantfile
 1091  vigrant up
 1092  git clone https://github.com/sstephenson/bats.git
 1093  code assessment.bats
 1094  mkdir c/d/s
 1095  mkdir "c/d/s"
 1096  mkdir foo foo/bar foo/bar/baz
 1097  touch hullo.txt yes.txt just.txt
 1098  mkdir here | touch hullo.txt yes.txt just.txt
 1099  cd here
 1100  mkdir now | mkdir there
 1101  cd now
 1102  mkdir now | touch now/hullo.txt now/yes.txt/ now/just.txt
 1103  find
 1104  find --help
 1105  find help
 1106  help
 1107  help find
 1108  help grep
 1109  grep .js
 1110  find . -iname cp2
 1111  find /Users/davidmukiibi -iname cp2
 1112  find /Users/davidmukiibi -iname *cp*
 1113  find . -iname *cp*
 1114  find  -iname *cp*
 1115  mkdir file-1.txt
 1116  mkdir file-2.txt/
 1117  cd file-2.txt
 1118  find . -iname *file-1*
 1119  find . -iname *.txt*
 1120  find . -iname *file-
 1121  find / -name *file-
 1122  find . -iname "file-"
 1123  find . -name "file-"
 1124  find / -name "file-"
 1125  find / -iname "file-"
 1126  find / -iname "file-1.txt"
 1127  find . -iname *file-*
 1128  find . -type f -iname *file-*
 1129  find . -type f -iname "*file-*"
 1130  find / -iname "*file-*"
 1131  find / -name "*file-*"
 1132  /
 1133  cd /Users/davidmukiibi
 1134  find  -name "*file-*"
 1135  find . -name "*file-*"
 1136  find . -name *file-*
 1137  find / -name *file-*
 1138  find / -iname *file-*
 1139  find / -type f -iname *file-*
 1140  find / -type f -iname "*file-*"
 1141  find / -type f -wholename "*file-*"
 1142  find / -type d -iname *file-*
 1143  find / -type d -iname "*file-*"
 1144  cd foo
 1145  mkdir haha | touch haha/this.txt | echo "this is it" > this.txt
 1146  cd haha
 1147  cat this.txt
 1148  mkdir haha | touch haha/this.txt | echo "this is it" > haha/this.txt
 1149  mkdir hah | touch hah/this.txt | echo "this is it" > hah/this.txt
 1150  mkdir ha | touch ha/this.txt | echo "this is it" > ha/this.txt
 1151  mkdir h | touch h/this.txt | echo "this is it" > this.txt
 1152  mkdir hehe | touch hehe/this.txt echo "this is it" > this.txt
 1153  echo "this is it" > hehe/this.txt
 1154  echo "this is it" > haha/this.txt
 1155  code this.txt
 1156  grep "pattern" -R /
 1157  grep "pattern" -R .
 1158  grep "*pattern*" -R .
 1159  grep "*pattern" -R .
 1160  grep "pattern*" -R .
 1161  grep "pattern" -w .
 1162  grep -w "pattern" .
 1163  grep -e "pattern*" -R .
 1164  grep -x "pattern*" -R .
 1165  echo "HI" 
 1166  watch -n 2 echo "HI"
 1167  top help
 1168  top --help
 1169  top -stats pid,command,cpu,th,pstate,time
 1170  help top
 1171  mkdir bar bar/bus bar/car
 1172  cd bar
 1173  htop -u davidmukiibi
 1174  top -u davidmukiibi
 1175  top -U davidmukiibi
 1176  code Vagrantfile
 1177  brew install screenhero
 1178  /lib
 1179  cd /
 1180  cd usr
 1181  cd /lib
 1182  which gcc
 1183  use netstat -an
 1184  netstat -an
 1185  netstat -an |find /i "established"
 1186  netstat -an |find i "established"
 1187  netstat -an | find "established"
 1188  netstat -an | "established"
 1189  netstat -an | find /i "established"
 1190  netstat  -at
 1191  netstat  -au
 1192  netstat  -aut
 1193  netstat  -atu
 1194  netstat  -lu
 1195  netstat  -lt
 1196  netstat  -lx
 1197  netstat -rn
 1198  route -s
 1199  route
 1200  route -d
 1201  netstat -anp
 1202  netstat -tulp
 1203  cd `\nq\nquit
 1204  cd ~\nq\nquit
 1205  cd etc/csf
 1206  cd bats
 1207  date
 1208  date +%s
 1209  date > file.txt
 1210  date >> file.txt
 1211  date 
 1212  date -g
 1213  date -e
 1214  man date
 1215  date -u
 1216  date -u >> file.txt
 1217  cat file.txt
 1218  TZ=Africa/Kampala date
 1219  TZ=America/Toronto date
 1220  TZ=America/Brazil date
 1221  TZ=Africa/Lagos date
 1222  TZ=Africa/lagos date
 1223  TZ=africa/lagos date
 1224  tz=africa/lagos date
 1225  TZ=KE date
 1226  TZ=Africa/KE date
 1227  TZ=Africa/nairobi date
 1228  cd /tests
 1229  cd tests
 1230  which mkdir
 1231  alias mkdir
 1232  which nocorrect
 1233  ls /bin/mkdir mkdir
 1234  mkdir
 1235  alias
 1236  gb
 1237  g
 1238  gst
 1239  brew install tmate
 1240  tmux ssh
 1241  tmux .ssh yreYwAl2niHy6qAkBVlKUqTnP@ln2.tmate.io
 1242  tmux ssh yreYwAl2niHy6qAkBVlKUqTnP@ln2.tmate.io
 1243  yreYwAl2niHy6qAkBVlKUqTnP@ln2.tmate.io
 1244  which ls
 1245  traceroute slack.com
 1246  ipconfig
 1247  ip -V
 1248  ifconfig -a | grep eth
 1249  ifconfig | grep eth
 1250  sudo lshw -class network
 1251  lshw -class network
 1252  ping 41.209.15.146
 1253  nslookup google.com
 1254  sudo ufw status
 1255  ufw status
 1256  cd learningmap
 1257  cd D1
 1258  cd D1\ DevOps\ Engineer
 1259  cd Assessment
 1260  cd 02\ -\ Networking
 1261  code README.md
 1262  ping 10.0.2.15
 1263  netstat -a
 1264  netstat -lntu
 1265  netstat -n
 1266  netstat -nl
 1267  netstat 
 1268  iptables --help
 1269  iptables -help
 1270  route -n
 1271  man scp
 1272  tmate 
 1273  ls -al ~/.ssh
 1274  ssh ko6Kruzt4URa5VS53OA58ES1P@fk2.tmate.io
 1275  ssh yreYwAl2niHy6qAkBVlKUqTnP@ln2.tmate.io
 1276  man iptables
 1277  ssh eUYUhP71fcKc6BYZYLbNnM34n@fk2.tmate.io
 1278  brew install terraform ansible
 1279  ansible --version
 1280  brew install ansible
 1281  ping google
 1282  brew install terraform
 1283  which terraform
 1284  ssh kN7ys7y7ZG8ik39GJjqJ3Qsmy@fk2.tmate.io
 1285  shiwfiles
 1286  /Users/davidmukiibi/Downloads/packer ; exit;
 1287  man parker
 1288  parker --help
 1289  parker -v
 1290  /Users/davidmukiibi/Downloads/packer; exit;
 1291  which parker
 1292  /Users/davidmukiibi/Downloads/packer-2; exit;
 1293  cd ./.virtualenvs/checkpointII/lib/python3.6/site-packages
 1294  COPY ./.virtualenvs/checkpointII/lib/python3.6/site-packages /usr/bin/python
 1295  cp ./.virtualenvs/checkpointII/lib/python3.6/site-packages /usr/bin/python
 1296  cp ./.virtualenvs/checkpointII/lib/python3.6/site-packages/virtualenvwrapper /usr/bin/python
 1297  cp ./.virtualenvs/checkpointII/lib/python3.6/site-packages/virtualenvwrapper-4.7.2-py2.7-nspkg.pth /usr/bin/python
 1298  brew install virtualenvwrapper
 1299  sudo easy_install pip
 1300  sudo pip install --upgrade virtualenvwrapper
 1301  sudo find / -name virtualenvwrapper.sh
 1302  showfiles
 1303  cp /usr/local/bin/virtualenvwrapper.sh /usr/bin/python
 1304  cp /usr/local/bin/virtualenvwrapper.sh /usr/bin/python/
 1305  cd /usr/bin/python
 1306  cp /usr/local/bin/virtualenvwrapper.sh /usr/bin/
 1307  hidefiles
 1308  pip3 install -U pip
 1309  pip3 install -U virtualenvwrapper
 1310  echo $VIRTUAL_ENV
 1311  export WORKON_HOME=~/Envs
 1312  mkdir -p $WORKON_HOME
 1313  which virtualenvwrapper
 1314  brew uninstall virtualenvwrapper
 1315  source /usr/local/bin/virtualenvwrapper.sh
 1316  mkvirtualenv env1
 1317  pip3 install virtualenvwrapper
 1318  sudo pip3 install virtualenvwrapper
 1319  which python3
 1320  code .bashrc
 1321  sudo pip3 install virtualenvwrapper --ignore-installed six
 1322  workon checkpointII
 1323  export config_name=development
 1324  cd /Users/davidmukiibi/PROJECTS/checkPointII\n OSX  davidmukiibi@davids-MacBook-Pro  …
 1325  brew install parker
 1326  pip install parker
 1327  sudo pip install parker
 1328  cd /Users/davidmukiibi/PROJECTS/checkPointII
 1329  brew install jq
 1330  ssh lb28blFXlfRMLAHFLmG5JrMkw@ln2.tmate.io
 1331  man terraform
 1332  terraform apply -lock=false
 1333  man alias
 1334  alias -help
 1335  alias --help
 1336  cd /Users/davidmukiibi/Desktop/terraform
 1337  tfs
 1338  tfp
 1339  tfa
 1340  terraform plan -destroy
 1341  code .zshrc
 1342  tpd
 1343  td
 1344  ssh BesQTgvgXGcs6YxZzrLwCGJru@sg2.tmate.io
 1345  brew install gcloud
 1346  ssh session: ssh 0ziYlWTTxCQsIN0sm94Wokcbh@sg2.tmate.io
 1347  ssh 0ziYlWTTxCQsIN0sm94Wokcbh@sg2.tmate.io
 1348  touch database.tf
 1349  vim variables.tfvars
 1350  tp
 1351  code variables.tfvars
 1352  code variables.tf
 1353  postgresql
 1354  which postgresql
 1355  pip install postgres
 1356  sudo pip install postgres
 1357  ssh Cd2zZuaLoFSDevKBO2VqJGT7c@sg2.tmate.io
 1358  brew install certbot
 1359  pip install behave
 1360  sudo pip install behave
 1361  touch example.feature
 1362  code example.feature
 1363  touch example_steps.py
 1364  job
 1365  fg 1
 1366  fg #1
 1367  code features
 1368  behave /Users/davidmukiibi/features
 1369  behave /Users/davidmukiibi/Desktop/features
 1370  behave /Users/davidmukiibi/Desktop/bestpractices.wiki
 1371  behave /Users/davidmukiibi/Desktop/bestpractices.wiki/features
 1372  behave /Users/davidmukiibi/Desktop/bestpractices.wiki/features -v
 1373  behave --lang-list
 1374  behave --lang-help fr
 1375  ssh IV9MEvR7xZLjYg5AXbfrfKPuz@sg2.tmate.io
 1376  ssh 961mj9UH73NS1kYhisLwmvixf@fk2.tmate.io
 1377  cd V
 1378  docker ubuntu run
 1379  behave -v
 1380  docker run -i -d ubuntu
 1381  sudo apt-get install mysql
 1382  docker ubuntu
 1383  docker -it  ubuntu
 1384  docker pull ubuntu-xenial
 1385  docker pull ubuntu:16.04
 1386  docker run ubuntu:16.04
 1387  docker run -it ubuntu:16.04
 1388  docker ps a
 1389  docker kill dbc48a3d151b
 1390  docker kill f3922390ca48
 1391  docker kill 13662e60c3b0
 1392  docker kill a29dea6cfccd
 1393  docker kill 68b513dd9496
 1394  docker kill c716609a0bbe
 1395  docker kill
 1396  docker kill f79d9d44fd8e
 1397  docker kill dc309e7d6a66
 1398  docker kill 989612021d2f
 1399  docker kill b9e487f16e69
 1400  docker kill 63e94b78867f
 1401  docker kill a3460a1140c2
 1402  docker kill 0949abdd36ff
 1403  docker kill ad2f5149f1b5
 1404  docker kill 6ba137cf7557
 1405  docker kill 2c5b2f7af84f
 1406  la
 1407  parker
 1408  cd packer-image
 1409  packer 
 1410  brew install packer
 1411  docker attach /Users/davidmukiibi/Desktop/setup-mysql
 1412  docker run -it ubuntu && docker attach /Users/davidmukiibi/Desktop/setup-mysql
 1413  docker exec ubuntu if exec 7<>/dev/tcp/127.0.0.1/3306; then echo 0
 1414  docker exec ubuntu if exec 7<>/dev/tcp/127.0.0.1/3306; then echo 0;
 1415  docker exec ubuntu if exec 7<>/dev/tcp/127.0.0.1/3306
 1416  docker exec ubuntu
 1417  docker exec ubuntu mysql
 1418  docker exec ubuntu mysql-server
 1419  docker exec -i ubuntu 
 1420  docker exec -i ubuntu mysql-server
 1421  docker exec ubuntu && sudo apt-get install mysql-server
 1422  docker run ps
 1423  docker kill 469ce3ac7475
 1424  docker kill cf6cf31c3834
 1425  docker kill c76555203d08
 1426  docker image
 1427  docker exec ubuntu sudo apt-get install mysql-server
 1428  docker exec 9f8cc63e813f sudo apt-get install mysql-server
 1429  docker run --name ubuntu_cnt -id ubuntu
 1430  docker ps | grep ubuntu
 1431  docker exec ubuntu_cnt sudo apt-get install mysql-server
 1432  docker exec ubuntu_cnt pt-get install mysql-server
 1433  docker exec ubuntu_cnt apt-get install mysql
 1434  docker ps | grep ubuntu_cnt
 1435  docker exec ubuntu_cnt apt-get install mysql-server
 1436  docker run -it ubuntu_cnt bash
 1437  docker run -it ubuntu bash
 1438  docker kill f113d87e02d9
 1439  docker kill e20059810903
 1440  docker kill 348e927bb71d
 1441  docker kill 91c868caff6e
 1442  docker kill e59c29c26986
 1443  docker kill a4cb3930ca65
 1444  docker kill 44f66b0d21cb
 1445  docker kill 91d5e12f0572
 1446  docker kill 091fad8afa13
 1447  docker kill 34c656a27629
 1448  docker kill d57848e8c78b
 1449  docker kill 9f38f1936261
 1450  docker kill 27234bf7ca32
 1451  docker kill 1ad05d1cdcae
 1452  docker kill 53e55a0e6a55
 1453  docker kill 9f8cc63e813f
 1454  docker kill 5ae4f73bc5e2
 1455  docker kill 79b01e8c5aae
 1456  ssh mcmKGaL6oa2OMCGTVYpjeFpmG@sg2.tmate.io
 1457  cd setup-mysql
 1458  touch environment.py
 1459  vim environment.py
 1460  docker kill f6557c05dd14
 1461  mkdir ansible_playbook
 1462  touch ansible.cfg
 1463  vim ansible.cfg
 1464  touch hosts
 1465  vim hosts
 1466  touch digitalocean.yml
 1467  vim digitalocean.yml
 1468  cd ~/.ssh/id_rsa
 1469  cd ~/.ssh/
 1470  cd .ssh/
 1471  cd ansible_playbook
 1472  ansible-playbook digitalocean.yml
 1473  sudo vim etc/ansible/hosts
 1474  sudo mkdir /etc/ansible/group_vars
 1475  mkdir -p /etc/ansible/group_vars
 1476  sudo mkdir -p /etc/ansible/group_vars
 1477  cd /etc/ansible/group_vars
 1478  touch servers
 1479  sudo touch servers
 1480  vim servers
 1481  ssh pOZa6iOD9oXvjhlqCfRwBn76j@sg2.tmate.io
 1482  which $PATH
 1483  which python
 1484  mkdir roles
 1485  cd postgres/
 1486  cd rol
 1487  cd roles
 1488  ansible-galaxy init postgres
 1489  rm postgres
 1490  rm postgres -f
 1491  ansible -m setup --connection=local localhost
 1492  docker -a
 1493  docker BUILD --HELP
 1494  cd docker\ test
 1495  docker build -t testingApp
 1496  docker build -t testingApp .
 1497  docker build -t testingapp .
 1498  docker run -p 4000:80 testingapp
 1499  docker run -p 4000:80 9854c5499f3e
 1500  curl http://localhost:4000
 1501  docker run testingapp
 1502  docker run 4ab2bfd47013
 1503  docker container ls
 1504  touch postgres.feature
 1505  steps
 1506  postgres.py
 1507  touch postgres.py
 1508  docker run -it 8268b6473b55
 1509  docker run -it scotty-mysql-devops-image
 1510  docker kill scotty-mysql-devops-image
 1511  docker run -i -d davids-image setup-mysql
 1512  docker run -i -d --name davids-image setup-mysql
 1513  bash
 1514  docker run -it davids-image
 1515  docker run -it setup-mysql
 1516  cd postgres
 1517  docker build -t postgresinstall .
 1518  docker kill d45e112a6869
 1519  docker kill eeb1c4d9c184
 1520  docker kill 3bd03762599a
 1521  docker kill 9992ebff2957
 1522  docker rm --help
 1523  docker rm hello-world
 1524  docker rm postgresinstall
 1525  docker rm 1a3570a0375b
 1526  docker kill c6e0d741f7f7
 1527  docker kill 94f70ad7cde5
 1528  docker ps - a
 1529  docker kill 98ca413e6a89
 1530  docker kill 93b1eeee3a76
 1531  docker kill 42c428e00d5d
 1532  docker kill a20ef769fc2f
 1533  docker kill 643a9f93e64b
 1534  docker kill fa860c5824ef
 1535  docker kill 1b4522a7f7a6
 1536  docker kill e4e63f255e40
 1537  docker kill 31f97871cecf
 1538  docker kill 498ad2770163 
 1539  docker run -it latest-postgressssdsda
 1540  docker run -it 498ad2770163
 1541  docker build -t jacuzzi .
 1542  docker build -t postgres .
 1543  docker kill dd7e3cf66b41
 1544  docker kill ee1c2d0c8cf8
 1545  docker kill ee1c2d0c8cf8a6f14c3e8367 d714f312fcc4
 1546  docker kill 51d761605442 d7e3c60efd54
 1547  docker kill a35d6fc8655c
 1548  docker kill ad7023401345
 1549  docker kill 2dcb85a51453 80f244760f0e 81ef80cac459
 1550  docker kill c9248c2f8855 b8b86074136b a6f14c3e8367
 1551  docker kill 664c36589d45
 1552  git add postgres.feature
 1553  git add steps/
 1554  git commmit
 1555  git add ansible/
 1556  git add 
 1557  git add Dockerfile
 1558  git remote add origin git@github.com:davidmukiibi/postgres.git
 1559  mkdir ansible
 1560  touch bucketlist-playbook.yml
 1561  touch inventory.ini
 1562  mkdir features
 1563  cd features
 1564  touch database.feature
 1565  touch databaseserver.feature
 1566  touch bucketlist.feature
 1567  mkdir steps
 1568  docker rm 664c36589d45
 1569  docker rm d714f312fcc4 c9248c2f8855 a35d6fc8655c  498ad2770163
 1570  docker system prune
 1571  docker rm python
 1572  docker rmi python
 1573  docker rmi 451c85955bc2
 1574  docker rmi 1815c82652c0
 1575  docker rmi 14eb969e9376
 1576  behave
 1577  cd setup-mysql1
 1578  cwd
 1579  ssh cdBdjkJcdnzuLpB9yZfGhz5zh@sg2.tmate.io
 1580  brew install tripwire
 1581  pip install tripwire
 1582  ssh JjvOYYsCvd3pDoRf5VKQHIrWb@sg2.tmate.io
 1583  ssh h8phHJOSNHp3rNCYEtJY7lAln@sg2.tmate.io
 1584  ssh yJwIGUFmEzwBFGnCBb7tE8ahh@sg2.tmate.io
 1585  Vagrant
 1586  quit
 1587  quit()
 1588  ssh V1t4GaT6YBKdZ8SpRtr9A1W3z@sg2.tmate.io
 1589  ssh CNYJbr3C3xYrPmbGHysW8NDaR@fk2.tmate.io
 1590  git clone https://github.com/SProjects/bucketlist_ansible.git
 1591  ansible
 1592  vagrant build
 1593  sudo vagrant up
 1594  ping goole.com
 1595  --limit @/Users/davidmukiibi/PROJECTS/bucketlist_ansible/ansible/bucketlist.retry
 1596  vagrant reload
 1597  bucketlist_ansible
 1598  d PROJECTS
 1599  ping 192.168.33.20
 1600  vim Vagrantfile
 1601  cd bucketlist.yml
 1602  vim bucketlist.yml
 1603  vim bucketlist.conf
 1604  vim pg_hba.conf
 1605  vagrant ip
 1606  cd bucketlist_ansible
 1607  cd ansible
 1608  ssh k4csAeLrBpSb7g1tHopr7VDqy@fk2.tmate.io
 1609  ssh RTrM4BknCNwHJtDILMUXsTJUo@sg2.tmate.io
 1610  vagrant provision
 1611  vagrant destroy bucketlist
 1612  ssh upgMJgeaQqcexNKA47KwOlfKI@sg2.tmate.io
 1613  cd kili
 1614  cf api https://api.eu-gb.bluemix.net
 1615  git clone https://git.ng.bluemix.net/laoqui/nodechat.git
 1616  cd nodechat
 1617  vim nodechat.json
 1618  code nodechat.json
 1619  ssh jjn5AmB8u1Rlt1WyjOZQ9Sz6o@fk2.tmate.io
 1620  cf login -u david.mukiibiq@gmail.com
 1621  cf target -o TBE -s dev
 1622  cf push kili
 1623  ssh DgihDEwNyCRhQZXFHvNBMvVWh@to2.tmate.io
 1624  gs
 1625  curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci && chmod +x /usr/local/bin/circleci
 1626  brew install docker
 1627  docker run
 1628  git clone https://github.com/scott45/kanban-bcxv.git
 1629  code kanban-bcxv
 1630  pip install flask-restplus
 1631  sudo pip install flask-restplus
 1632  cd PR`
 1633  git clone https://github.com/SProjects/ops-todo.git
 1634  cd ops-todo
 1635  git tag 
 1636  git tag --help
 1637  git commit\\n
 1638  circleci config validate -c .circleci/config.ym
 1639  cd .circleci/config.yml
 1640  circleci update
 1641  ssh 6oupQdniWgVpZ9OZ35wr3kAMn@ln2.tmate.io
 1642  git add instance/config.py
 1643  ssh zOtDMU6vKO4BPB8yRUX3u6oyt@ln2.tmate.io
 1644  parker --version
 1645  packer --version
 1646  which packer
 1647  cd /usr/local/bin/packer
 1648  ls 
 1649  circleci config validate -c .circleci/config.yml
 1650  circleci build -c .circleci/config.yml
 1651  docker kill circleci/picard
 1652  docker kill beca9fcb4ea6 e61b0dd2c2d4 47ded396d783
 1653  docker rmi beca9fcb4ea6 e61b0dd2c2d4 47ded396d783
 1654  git add -p  .circleci/config.yml
 1655  validate example.json
 1656  packer validate example.json
 1657  ssh xuaP0NuENWxJ5PA2KzgHCk7De@ln2.tmate.io
 1658  cd practice
 1659  touch account file
 1660  rm account
 1661  rm file
 1662  touch account.json
 1663  packer build
 1664  packer build example.json
 1665  docker build
 1666  docker build --rm trial
 1667  docker build trial
 1668  docker build trial2.dockerfile
 1669  ssh dQV1lNjTa9HV3chybz09fBvWI@to2.tmate.io
 1670  cd Vagrant
 1671  vagrant ssh
 1672  ssh vlxAn9B6J6QdVmWUT7Y1BfowM@ln2.tmate.io
 1673  vim vagrant-image-file.json
 1674  mkdir vof-scripts
 1675  touch setup.sh
 1676  foo() { echo "Script: $0, Arg1: $1, Arg2: $2"; }
 1677  foo who
 1678  foo who are
 1679  str="2.4.1"
 1680  echo "${str#*.}"
 1681  echo "${str*.}"
 1682  echo "${str###*.}"
 1683  echo "${str##*.}"
 1684  echo "${str: 3}"
 1685  echo "${str: +3}"
 1686  echo "${str: -3}"
 1687  echo "${str:0:3}"
 1688  echo "${str%.*}"
 1689  echo "${str%\.*}"
 1690  fg
 1691  chmod +x setup.sh
 1692  docker pull ubuntu:17.04
 1693  git clone git@github.com:andela/vof-tracker
 1694  docker run --rm -it -v `pwd`/vof-tracker:/tmp/vof -v /Users/davidmukiibi/PROJECTS/vof-scripts:/tmp/script ubuntu:17.04 bash
 1695  cat Procfile
 1696  git git remote add origin git@github.com:davidmukiibi/vof-app-scripts
 1697  git remote add origin git@github.com:davidmukiibi/vof-app-scripts
 1698  git remote add origin git@github.com:davidmukiibi/vof-app-scripts.git
 1699  git remote add remote https://github.com/davidmukiibi/vof-scripts.git
 1700  git remote add origin https://github.com/davidmukiibi/vof-scripts.git
 1701  git push origin master https://github.com/davidmukiibi/DevOps-VOF
 1702  cd DevOps-VOF
 1703  git push origin master git@github.com:davidmukiibi/DevOps-VOF.git
 1704  git --global user.email "david.mukiibiq@gmail.com"
 1705  git user.email "david.mukiibiq@gmail.com"
 1706  git config  user.email "david.mukiibiq@gmail.com"
 1707  git config davidmukiibi
 1708  git git status
 1709  git add ls
 1710  git packer.json
 1711  git git remote add origin git@github.com:davidmukiibi/vof-scripts.git
 1712  git remote add origin git@github.com:davidmukiibi/vof-scripts.git
 1713  git push -u origin master\n
 1714  python -V
 1715  sh install.sh
 1716  vim ./google-cloud-sdk/install.sh
 1717  gcloud info
 1718  gcloud compute images list
 1719  touch startup.py
 1720  vim startup.py
 1721  docker run 6ca5545cc1ef
 1722  pd
 1723  ./vof-scripts/setup.sh
 1724  docker-compose -v
 1725  docker build -t=testingvof .
 1726  gcloud --quiet debug targets list
 1727  gcloud
 1728  which gcloud
 1729  sh ./google-cloud-sdk/install.sh
 1730  gcloud components install app-engine-python
 1731  gcloud auth list
 1732  ./google-cloud-sdk/install.sh
 1733  lsof -n -iTCP:3000 | grep LISTEN
 1734  lsof -n -iTCP:$3000 | grep LISTEN
 1735  ps aux | grep tcp
 1736  ping http://localhost:3000
 1737  ping 127.0.0.1:3000
 1738  ld
 1739  cp --help
 1740  cd ./vof-scripts
 1741  cd ../vof-tracker
 1742  cd ../vof-tracker/
 1743  cd ../vof-scripts
 1744  ~/.ssh/id_rsa
 1745  vim ~/.ssh/id_rsa
 1746  ~/.ssh/
 1747  docker ps -s
 1748  /root
 1749  cd /root
 1750  ~
 1751  cd VOF
 1752  ls -a
 1753  $(pwd)/../vof-tracker
 1754  $(pwd)/../vof-scripts
 1755  rm --help
 1756  man rm
 1757  man rm -rf
 1758  ln --help
 1759  man ln
 1760  ssh EbKYKzsdcnfQMHTZUclClHtLe@to2.tmate.io
 1761  who am i
 1762  cp ~/.ssh/ ~/.ssh/known_hosts
 1763  cp ~/.ssh ~/.ssh/known_hosts
 1764  cp ~/.ssh/id_rsa.pub ~/.ssh/known_hosts
 1765  echo ~/.ssh/id_rsa.pub
 1766  vim ~/.ssh/known_hosts
 1767  docker ---help
 1768  docker rm ac8b8ae211e9
 1769  docker rmi 39fa358d99c0
 1770  docker rm 39fa358d99c0
 1771  docker rmi 2d696327ab2e
 1772  packer
 1773  packer validate -syntax-only packer.json
 1774  git add packer.json
 1775  git add setup.sh
 1776  terraform plan -var-file=terraform.tfvars
 1777  terraform init -var-file=terraform.tfvars
 1778  terraform init -var-file="terraform.tfvars"
 1779  terraform plan -var-file="terraform.tfvars"
 1780  terraform apply -var-file="terraform.tfvars"
 1781  vim account.json
 1782  tmate
 1783  cd heroku
 1784  vim known_hosts
 1785  PRO
 1786  terraform init -var="environment_name=staging\n
 1787  terraform init -var="environment_name=staging"\n
 1788  cd google-cloud-sdk
 1789  gcloud auth application-default login
 1790  terraform plan -backend-config="path=$TF_VAR_stage_path" -var="environment_name=staging"
 1791  terraform apply -backend-config="path=$TF_VAR_stage_path" -var="environment_name=staging"
 1792  packer build .
 1793  cd ~/.ssh
 1794  ==> googlecompute: Deleting instance...
 1795  export username="davidmukiibi"
 1796  echo username
 1797  export username=davidmukiibi
 1798  echo ${username}
 1799  export password=Qwertykeyb0@rd
 1800  echo ${password}
 1801  terraform destroy -force
 1802  echo ${stage_path}
 1803  export environment_name=staging
 1804  export stage_path=
 1805  export stage_path=/
 1806  lls
 1807  brew update terraform
 1808  brew 
 1809  brew  -help
 1810  brew upgrade terraform
 1811  export PATH=$PATH:/Users/davidmukiibi/terraform
 1812  terraform version
 1813  terraform validate]
 1814  vim crash.log
 1815  terraform help destroy
 1816  vof-terraform
 1817  terraform apply -var="environment_name=staging"
 1818  vim Procfile
 1819  ping 35.195.167.196
 1820  traceroute 35.195.167.196
 1821  terraform init -backend-config="path=$STF_VAR_stage_path" -var="env_name=development"
 1822  terraform get
 1823  vim terraform
 1824  sh terraform
 1825  pip install terraform
 1826  terraform destroy --force
 1827  ssh tD16ovIGOrzV4Ae1cZWPwcTd9@ln2.tmate.io
 1828  ssh BhhXP4BnktHf7HsXTh8QOQrXD@ln2.tmate.io
 1829  curl 35.195.244.10:8080
 1830  curl -IL 35.195.244.10:8080
 1831  pi-ng 35.195.244.10:8080
 1832  ping 35.195.244.10:8080
 1833  ping 35.195.244.10
 1834  say "hullo"
 1835  say "ass hole"
 1836  say "asshole"
 1837  say "mbwa gwe"
 1838  say "mbwa gwe tumbaavu"
 1839  ssh EPnYEXERqcPLQlbhE5meMXkAA@ln2.tmate.io
 1840  vim .
 1841  ping 35.201.65.89
 1842  traceroute 35.201.65.89
 1843  ping www.youtube.com
 1844  mkvirtualenv vof
 1845  pip install ruby
 1846  brew install ruby
 1847  brew upgrade ruby
 1848  rbenv rehash
 1849  rails -v
 1850  cd rubygems-2.6.14
 1851  brew install postgres
 1852  ruby setup.rb
 1853  gem install bundler
 1854  sudo gem install bundler
 1855  brew install ruby-2.4.1
 1856  brew install ruby -v=2.4.1
 1857  brew install ruby -v 2.4.1
 1858  bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java
 1859  postgres
 1860  gem install rails
 1861  sudo gem install rails
 1862  bundle install
 1863  export POSTGRES_PASSWORD=
 1864  CD /Users/davidmukiibi/PROJECTS/vof-tracker/tmp/pids/server.pid
 1865  vim /Users/davidmukiibi/PROJECTS/vof-tracker/tmp/pids/server.pid
 1866  rails server -h
 1867  export POSTGRES_USER=postgres
 1868  export POSTGRES_DB=davidvof
 1869  sudo rails server
 1870  vim config/database.yml
 1871  POSTGRES_DB=davidmukiibi
 1872  bin/rails db:environment:set RAILS_ENV=development
 1873  export POSTGRES_DB=davidmukiibi
 1874  export POSTGRES_USER=vof_tracker
 1875  rails db:migrate
 1876  rails server
 1877  sudo rails db:migrate
 1878  sudo rake db:setup
 1879  rake db:setup
 1880  bundle exec rails db:create
 1881  bundle exec rails db:migrate
 1882  cd /var/log
 1883  cd powermanagement
 1884  vim 2017.10.16.asl
 1885  vim system.log
 1886  cd /etc
 1887  cd /usr/sbin/
 1888  traceroute
 1889  tracert google.com
 1890  traceroute http://35.186.202.40
 1891  traceroute 35.186.202.40
 1892  top -bn1 | grep load | awk '{printf "%.2f%%\t\t\n", $(NF-2)}'
 1893  top -n1 | grep load | awk '{printf "%.2f%%\t\t\n", $(NF-2)}'
 1894  \n1\n2\nfree
 1895  free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }'
 1896  free -m
 1897  sudo free -m
 1898  df -h | awk '$NF=="/"{printf "%s\t\t", $5}'
 1899  df -h
 1900  df man
 1901  man df
 1902  man top
 1903  top -n1 | grep load
 1904  top | grep load
 1905  mtr google.com
 1906  brew install mtr
 1907  terraform apply
 1908  terraform validate
 1909  terraform init -backend-config="path=$TF_VAR_stage_path" -var="env_name=staging"
 1910  terraform apply -var="env_name=staging" -var="stage_path=$TF_VAR_stage_path"
 1911  terraform init -backend-config="path=$TF_VAR_stage_path" -var="env_name=testing"
 1912  terraform destroy -var="env_name=testing" -var="stage_path=$TF_VAR_stage_path"
 1913  terraform 
 1914  terraform --force destroy -var="env_name=testing" -var="stage_path=$TF_VAR_stage_path"
 1915  terraform -force destroy -var="env_name=testing" -var="stage_path=$TF_VAR_stage_path"
 1916  brew install nmap
 1917  nmap -sP 192.168.8.36
 1918  nmap -sP 192.168.1.*
 1919  nmap -sP 192.168.1
 1920  nmap -sP 192.168.8.
 1921  nmap -sP 192.168.8.*
 1922  terraform  destroy -force -var="env_name=testing" -var="stage_path=$TF_VAR_stage_path"
 1923  terraform apply -var="env_name=testing" -var="stage_path=$TF_VAR_stage_path"
 1924  terraform destroy -force  -var="env_name=david" -var="stage_path=$TF_VAR_stage_path"
 1925  terraform apply -var="env_name=david" -var="stage_path=$TF_VAR_stage_path"
 1926  export env_name=dawei
 1927  ping github.com
 1928  terraform apply -var="env_name=dawei" -var="stage_path=$TF_VAR_stage_path"
 1929  terraform destroy -force  -var="env_name=dawei" -var="stage_path=$TF_VAR_stage_path"
 1930  terraform destroy -force  -var="env_name=natalie" -var="stage_path=$TF_VAR_stage_path"
 1931  terraform apply -var="env_name=natalie" -var="stage_path=$TF_VAR_stage_path"
 1932  terraform apply -var="env_name=natalieN" -var="stage_path=$TF_VAR_stage_path"
 1933  terraform apply -var="env_name=natali" -var="stage_path=$TF_VAR_stage_path"
 1934  terraform apply -var="env_name=eliza" -var="stage_path=$TF_VAR_stage_path"
 1935  touch service-account.json
 1936  code service-account.json
 1937  cd De
 1938  CD Desktop
 1939  atom .
 1940  sublime .
 1941  terraform init -backend-config="path=$TF_VAR_stage_path" -var="env_name=dawei"
 1942  terraform init -backend-config="path=$TF_VAR_stage_path" -var="env_name=dawe"
 1943  export TF_VAR_stage_path="/staging-state/terraform.tfstate"
 1944  terraform init -backend-config="path=$TF_VAR_stage_path" -var="environment_name=staging"
 1945  terraform apply -var="environment_name=staging" -var="state_path=$TF_VAR_stage_path"
 1946  terraform apply -var="environment_name=staging" -var="stage_path=$TF_VAR_stage_path"
 1947  terraform destroy -var="environment_name=staging" -var="state_path=$TF_VAR_state_path"
 1948  docker
 1949  docker run -it 747cb2d60bbe
 1950  docker run debian-9
 1951  docker pull debian-9
 1952  docker pull debian
 1953  docker run debian
 1954  docker run -it debian
 1955  terraform destroy -force -var="environment_name=staging" -var="state_path=$TF_VAR_state_path"
 1956  cd terraform
 1957  ruby -v
 1958  haha=2
 1959  cd /Users/davidmukiibi/Desktop/vof-terraform-ft-daniel-attempt/packer/templates/service-account.json
 1960  vim /Users/davidmukiibi/Desktop/vof-terraform-ft-daniel-attempt/packer/templates/service-account.json
 1961  `pwd`/templates/service-account.json
 1962  vim `pwd`/templates/service-account.json
 1963  vim `pwd`/service-account.json
 1964  export creds_path=/Users/davidmukiibi/Desktop/vof-terraform-ft-daniel-attempt/packer/templates/service-account.json
 1965  terraform apply -var="environment_name=staging" -var="state_path=$TF_VAR_state_path"
 1966  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=staging"
 1967  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=nataliedavid"
 1968  terraform apply -var="environment_name=nataliedavid" -var="state_path=$TF_VAR_state_path"
 1969  stdout >>file.txt 2>&1
 1970  vim file.txt
 1971  ping http://35.190.71.174/login\n: 1508830009:0;ping http://35.190.71.174/login
 1972  ping http://35.190.71.174
 1973  ping http://35.190.71.174/login
 1974  traceroute http://35.190.71.174
 1975  traceroute 35.190.71.174
 1976  ping 35.190.71.174
 1977  curl 35.190.71.174
 1978  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=the-best-env"
 1979  ping 35.195.118.132
 1980  terraform apply -var="environment_name=the-best-ever" -var="state_path=$TF_VAR_state_path"
 1981  terraform destroy -force -var="environment_name=the-best-ever" -var="state_path=$TF_VAR_state_path"
 1982  terraform destroy -force -var="environment_name=nairobi" -var="state_path=$TF_VAR_state_path"
 1983  terraform apply -var="environment_name=nairobi" -var="state_path=$TF_VAR_state_path"
 1984  export TF_VAR_state_path="/staging-state/terraform.tfstate"
 1985  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=kampala"
 1986  terraform apply -var="environment_name=kampala" -var="state_path=$TF_VAR_state_path"
 1987  terraform apply -var="environment_name=lagos" -var="state_path=$TF_VAR_state_path"
 1988  terraform destroy --force -var="environment_name=kampala" -var="state_path=$TF_VAR_state_path"
 1989  terraform apply --force -var="env_name=kampala" -var="state_path=$TF_VAR_state_path"
 1990  terraform destroy --force -var="environment_name=lagos" -var="state_path=$TF_VAR_state_path"
 1991  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=nairobi"
 1992  terraform destroy --force -var="environment_name=nairobi" -var="state_path=$TF_VAR_state_path"
 1993  terraform apply -var="env_name=nairobi" -var="state_path=$TF_VAR_state_path"
 1994  docker ps aux
 1995  docker rmi d84aec910264 bef13a6746d9
 1996  docker rm d84aec910264 bef13a6746d9
 1997  docker rm ca031d4d2c50
 1998  terraform destroy --force -var="env_name=nairobi" -var="state_path=$TF_VAR_state_path"
 1999  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=kampala"
 2000  terraform apply -var="env_name=kampala" -var="state_path=$TF_VAR_state_path"
 2001  terraform destroy --force -var="env_name=kampala" -var="state_path=$TF_VAR_state_path"
 2002  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=uganda"
 2003  terraform apply -var="env_name=uganda" -var="state_path=$TF_VAR_state_path"
 2004  git ststau
 2005  cat setup.sh
 2006  git add compute.tf
 2007  git add variables.tf
 2008  git push --set-upstream origin ft-daniel-attempt
 2009  git add compute.tf database.tf main.tf network.tf routing.tf variables.tf
 2010  git rm packer.json
 2011  git rm  setup.sh
 2012  git add packer/packer.json
 2013  git add packer/setup.sh
 2014  git add packer/start_vof.sh
 2015  git push --force --set-upstream origin master
 2016  SHOWFILES
 2017  PWD
 2018  rm .git
 2019  rm -rf .git
 2020  git add compute.tf database.tf  main.tf network.tf routing.tf variables.tf 
 2021  git iinit
 2022  git add compute.tf database.tf main.tf network.tf routing.tf variables.tf packer/setup.sh packer//start_vof.sh packer/packer.json
 2023  git remote add origin git@github.com:davidmukiibi/vof.git
 2024  git config user.name davidmukiibi
 2025  git config user.email david.mukiibiq@gmail.com
 2026  git commit --amend --reset-author
 2027  terraform destroy --force -var="env_name=uganda" -var="state_path=$TF_VAR_state_path"
 2028  terraform state push errored.tfstate
 2029  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=kenya"
 2030  terraform apply -var="env_name=kenya" -var="state_path=$TF_VAR_state_path"
 2031  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=nigeria"
 2032  terraform apply -var="env_name=nigeria" -var="state_path=$TF_VAR_state_path"
 2033  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=mombasa"
 2034  terraform destroy --force -var="env_name=nigeria" -var="state_path=$TF_VAR_state_path"
 2035  terraform apply -var="env_name=mombasa" -var="state_path=$TF_VAR_state_path"
 2036  terraform apply -var="env_name=jamaica" -var="state_path=$TF_VAR_state_path"
 2037  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=jamaica"
 2038  terraform plan
 2039  terraform apply -var="env_name=jamaica" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2040  terraform destroy --force -var="env_name=jamaica" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2041  terraform plan -var="env_name=jamaica" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2042  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=spain"
 2043  docker run 52bbe943f9ea
 2044  cd.
 2045  terraform plan -var="env_name=spain" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2046  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=new-env-with-ruby-stackdriver-logging-gem"
 2047  terraform plan -var="env_name=new-env-with-ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2048  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=env-with-ruby-stackdriver-logging-gem"
 2049  terraform plan -var="env_name=env-with-ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2050  terraform apply -var="env_name=env-with-ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2051  terraform destroy --force -var="env_name=env-with-ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2052  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=ruby-stackdriver-logging-gem"
 2053  terraform apply -var="env_name=ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2054  curl  https://discovery.etcd.io/new\?size\=3
 2055  curl -s https://discovery.etcd.io/new\?size\=3
 2056  OA
 2057  traceroute google.com
 2058  mkvirtualenv react-testbed
 2059  yarn init
 2060  brew upgrade node
 2061  npm init
 2062  npm i -g npm
 2063  npm install --save react react-dom
 2064  npm install --save-dev babel-cli
 2065  cat package.json
 2066  ./node_modules/.bin/babel src -d lib
 2067  touch .babelrc
 2068  npm install --save-dev babel-cli babel-preset-react
 2069  echo '{ "presets": ["react"] }' >> .babelrc
 2070  vim .babelrc
 2071  echo '<h1>Hello, world!</h1>' > index.js
 2072  ./node_modules/.bin/babel index.js
 2073  reactProject
 2074  mkdir reactProject
 2075  mv index.js PROJECTS/reactProject
 2076  mv package-lock.json PROJECTS/reactProject
 2077  mv package.json PROJECTS/reactProject
 2078  mv node_modules PROJECTS/reactProject
 2079  cd PROJECTS/reactProject
 2080  npm install -g create-react-app
 2081  create-react-app my-app
 2082  cd my-app
 2083  rm -f src/*
 2084  touch index.css
 2085  vim index.css
 2086  touch index.js
 2087  mv index.js src/
 2088  mv index.css src/
 2089  curl https://sdk.cloud.google.com | bash
 2090  exec -l $SHELL
 2091  gcloud compute --project "vof-testbed-2" ssh --zone "europe-west1-b" "spain-vof-app-instance-944c"
 2092  terraform destroy --force -var="env_name=ruby-stackdriver-logging-gem" -var="vof_disk_image=daudi-vof-image-ruby-1509098254" -var="state_path=$TF_VAR_state_path"
 2093  terraform apply -var="env_name=spain" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2094  terraform destroy --force -var="env_name=spain" -var="vof_disk_image=daudi-vof-image-ruby-1508843459" -var="state_path=$TF_VAR_state_path"
 2095  vim msin
 2096  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=america"
 2097  terraform apply -var="env_name=america" -var="vof_disk_image=daudi-vof-image-ruby-1509433211" -var="state_path=$TF_VAR_state_path"
 2098  vim index.js
 2099  vim index.html
 2100  arp
 2101  arp eth0
 2102  arp andela.com
 2103  which echo
 2104  which tar
 2105  cd New\ Folder\ With\ Items
 2106  CD
 2107  cd PROJECTS/
 2108  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=brazil"
 2109  terraform destroy --force  -var="env_name=brazil" -var="vof_disk_image=daudi-vof-image-ruby-1509542005" -var="state_path=$TF_VAR_state_path"
 2110  terraform apply  -var="env_name=brazil" -var="vof_disk_image=daudi-vof-image-ruby-1509542005" -var="state_path=$TF_VAR_state_path"
 2111  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=colombia"
 2112  terraform apply  -var="env_name=colombia" -var="vof_disk_image=daudi-vof-image-ruby-1509549375" -var="state_path=$TF_VAR_state_path"
 2113  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=chile"
 2114  terraform apply  -var="env_name=chile" -var="vof_disk_image=daudi-vof-image-ruby-1509551491" -var="state_path=$TF_VAR_state_path"
 2115  gcloud compute --project "vof-testbed-2" ssh --zone "europe-west1-b" "5385147336501978543"
 2116  terraform init -backend-config="path=$TF_VAR_state_path" -var="env_name=final-trial"
 2117  terraform apply -var="env_name=final-trial" -var="vof_disk_image=daudi-vof-image-ruby-1509612339" -var="state_path=$TF_VAR_state_path"
 2118  gcloud compute --project "vof-testbed-2" ssh --zone "europe-west1-b" "final-trial-vof-app-instance-5k5s"
 2119  ping console.cloud.google.com
 2120  gcloud compute --project "vof-testbed-2" ssh --zone "europe-west1-b" "final-trial-vof-app-instance-5k5s"\n
 2121  mkvirtualenv
 2122  mkvirtualenv tensorflow_plaground
 2123  pip install tensorflow
 2124  crontab -e
 2125  historying google.com
 2126  history 
 2127  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-bcsz"\n
 2128  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-8r4j"\n
 2129  cd pipeline
 2130  git remote add origin git@github.com:davidmukiibi/pipeline.git
 2131  mv circle.yml .circleci
 2132  git commit -m "another one"
 2133  mkdir testing
 2134  cd testing
 2135  ping google.com >> testing.txt
 2136  ping google.com && >> testing.txt
 2137  ping google.com && > testing.txt
 2138  ping google.com && ping google.com > testing.txt
 2139  ping google.com | > testing.txt
 2140  ping google.com && tee testing.txt
 2141  ping google.com | tee testing.txt
 2142  cat testing.txt
 2143  rm -f testing
 2144  rm -rf testing
 2145  man tee
 2146  mkdir trial
 2147  grep "8.404" hullo.txt
 2148  cat just.txt & count 
 2149  cat just.txt & count just.txt
 2150  grep -l "8.*" hullo.txt > just.txt
 2151  grep -l "8.404" hullo.txt > just.txt
 2152  cat just.txt
 2153  grep -l "8.404" hullo.txt
 2154  grep "8.404" hullo.txt > just.txt
 2155  grep -l "8.404" just.txt
 2156  grep "8.404" just.txt
 2157  grep "8.*" just.txt
 2158  grep "23*" just.txt
 2159  grep "8.846*" just.txt
 2160  grep "8.846" just.txt
 2161  grep "8.846*" hullo.txt
 2162  grep -8.846 hullo.txt
 2163  grep -8.846 *hullo.txt
 2164  grep -8.846 *.txt
 2165  grep -e 8.846 hullo.txt
 2166  grep -x 8.846 hullo.txt
 2167  grep -x 8.846 just.txt
 2168  grep -x "8.846" hullo.txt
 2169  grep -B "8.8" hullo.txt
 2170  grep -B 8.8 hullo.txt
 2171  grep -B 8.8* hullo.txt
 2172  grep -B 8.846 hullo.txt
 2173  grep -B 8.846* hullo.txt
 2174  grep -B "8.846*" hullo.txt
 2175  man grep
 2176  grep -A "8.846*" hullo.txt
 2177  grep -e -A "8.846*" hullo.txt
 2178  grep -c "8.846*" hullo.txt
 2179  grep -c "8.846" hullo.txt
 2180  grep -c 8.846 hullo.txt
 2181  grep -A 8.846 hullo.txt
 2182  grep -A 8.846 -hullo.txt
 2183  grep -e 8.846 -A hullo.txt
 2184  grep -o 8.846 hullo.txt
 2185  grep --after-context=2 8.846 hullo.txt
 2186  grep --after-context=2 "8.84*" hullo.txt
 2187  grep --after-context=9 "8.84*" hullo.txt
 2188  grep --after-context=4 "8.84*" hullo.txt
 2189  grep --after-context=5 "8.40*" hullo.txt
 2190  grep -A=5 "8.40*" hullo.txt
 2191  grep -A 5 "8.40*" hullo.txt
 2192  grep -e "8.40*" hullo.txt
 2193  chmod +x this.sh
 2194  ./this.sh
 2195  ping google.com | tee hullo.txt
 2196  echo "this is just me: haha" | cut -d ':' -f2
 2197  grep -e "8.404" hullo.txt | cut -d -f2
 2198  grep -e "8.404" hullo.txt | cut -d ' ' -f2
 2199  grep -e "8.404" hullo.txt | cut -d ' ' -f1
 2200  echo hullo.txt | cut -d ':' -f2
 2201  grep -e "8.404"
 2202  grep -e "8.404" hullo.txt
 2203  grep -e "14.244" hullo.txt
 2204  grep -e "14.244" hullo.txt | cut -d ' ' -f2
 2205  grep -e "14.244" hullo.txt | cut -d ' ' -f1
 2206  grep -e "1059" hullo.txt | cut -d ' ' -f1
 2207  grep -e "1059" hullo.txt | cut -d ' ' -f10
 2208  grep -e "1059" hullo.txt | cut -d ' ' -f11
 2209  grep -e "1059" hullo.txt | cut -d ' ' -f13
 2210  grep -e "1059" hullo.txt | cut -d ' ' -f5
 2211  grep -e "1059" hullo.txt | cut -d ' ' -f6
 2212  grep -e "1059" hullo.txt | cut -d ' ' -f7
 2213  grep -e "1059" hullo.txt | cut -d ' ' -f3
 2214  vof-scripts
 2215  cat packer.json
 2216  export VOF_pat
 2217  packer build packer.json | tee packer.txt
 2218  cd trialOne
 2219  grep -e "A disk image was created" packer.txt | cut -d ':' -f8
 2220  grep -e "A disk image was created" packer.txt | cut -d ':' -f9
 2221  grep -e "A disk image was created" packer.txt | cut -d ':' -f10
 2222  grep -e "A disk image was created" packer.txt | cut -d ':' -f7
 2223  grep -e "A disk image was created:" packer.txt | cut -d ':' -f8
 2224  echo $1
 2225  echo $0
 2226  echo $2
 2227  now=$(date)
 2228  echo now
 2229  now=`date`
 2230  echo $now
 2231  echo image_name
 2232  vim application_default_credentials.json
 2233  vim service-account.json
 2234  vim compute
 2235  terraform init
 2236  terraform init -backend-config="path=$TF_VAR_state_path"
 2237  image_name=$(grep -e "A disk image was created:" packer.txt | cut -d ' ' -f8)
 2238  echo $image_name
 2239  RAILS_ENV=production rails s
 2240  gsutil defacl set public-read gs://daudi
 2241  c
 2242  vim database.yml
 2243  terraform destroy -var="vof_disk_image=daudi-vof-image-ruby-1510595224" -var="state_path=$TF_VAR_state_path"
 2244  /Users/davidmukiibi/Downloads/terraform ; exit;
 2245  terraform --version --help
 2246  terraform --v0.10.1 --help
 2247  terraform show
 2248  cd Do
 2249  cd Downloads
 2250  chmod +x terraform
 2251  terraform
 2252  ./terraform
 2253  /Users/davidmukiibi/Downloads/terraform; exit
 2254  cd /Users/davidmukiibi/bin
 2255  cd /Users/davidmukiibi/
 2256  vim bin
 2257  curl https://releases.hashicorp.com/terraform/0.10.8/terraform_0.10.8_darwin_amd64.zip
 2258  pip install wget
 2259  sudo pip install wget
 2260  which wget
 2261  which wget-3.2
 2262  sudo pip install -H wget
 2263  brew install wget
 2264  unzip terraform_0.10.8_darwin_amd64.zip -d /Users/davidmukiibi/PROJECTS
 2265  $PATH
 2266  wget https://releases.hashicorp.com/terraform/0.10.8/terraform_0.10.8_darwin_amd64.zip
 2267  unzip terraform_0.10.8_darwin_amd64.zip -d /Users/davidmukiibi/bin
 2268  rm -rf terraform_0.10.8_darwin_amd64.zip
 2269  rm -rf terraform_0.10.8_darwin_amd64.zip.1
 2270  rm -rf terraform
 2271  terraform -v
 2272  terraform destroy -f -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path"
 2273  rm -rf terraform.tfstate.backup
 2274  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=mukiibi"
 2275  terraform plan -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path"
 2276  terraform plan -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path" -out
 2277  terraform plan -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path" -out=`pwd`
 2278  touch terraform_plan.json
 2279  terraform plan -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path" -out=/Users/davidmukiibi/PROJECTS/vof/vof-terraform-ft-daniel-attempt/terraform_plan.json
 2280  terraform apply "/Users/davidmukiibi/PROJECTS/vof/vof-terraform-ft-daniel-attempt/terraform_plan.json" -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path"
 2281  terraform apply -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path" "/Users/davidmukiibi/PROJECTS/vof/vof-terraform-ft-daniel-attempt/terraform_plan.json"
 2282  terraform destroy -force -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path"
 2283  code
 2284  terraform apply -var="vof_disk_image=daudi-vof-image-ruby-1510582823" -var="state_path=$TF_VAR_state_path"
 2285  terraform apply -var="vof_disk_image=daudi-vof-image-ruby-1510595224" -var="state_path=$TF_VAR_state_path"
 2286  terraform plan -var="vof_disk_image=daudi-vof-image-ruby-1510595224" -var="state_path=$TF_VAR_state_path"
 2287  terraform destroy -force -var="vof_disk_image=daudi-vof-image-ruby-1510595224" -var="state_path=$TF_VAR_state_path"
 2288  cd /Users/davidmukiibi/PROJECTS/vof/vof-terraform-ft-daniel-attempt
 2289  pwf
 2290  cd vof-terraform-ft-daniel-attempt
 2291  terraform init -var="vof_disk_image=daudi-vof-image-ruby-1510649282" -var="state_path=$TF_VAR_state_path"
 2292  terraform init -backend-config="path=$TF_VAR_state_path" -var="environment_name=andela"
 2293  gcloud compute ssh davidmukiibi@production-vof-app-instance-v3s5 --zone "europe-west1-b"
 2294  gcloud compute ssh davidmukiibi@production-vof-app-instance-v3s5 --zone "europe-west1-b" --project "vof-migration-test"
 2295  gcloud init
 2296  gcloud compute ssh david_mukiibi@production-vof-app-instance-v3s5 --zone "europe-west1-b"
 2297  touch this.txt
 2298  ping google.com >> this.txt
 2299  ping google.com | tee this.txt
 2300  grep -e "A disk image was created:" packer.txt.txt | cut -d ' ' -f8
 2301  grep -e "A disk image was created:" packer.txt | cut -d ' ' -f8
 2302  vim packer.txt
 2303  nana=$(grep -e "A disk image was created:" packer.txt | cut -d ' ' -f8)
 2304  echo `nana`
 2305  echo $(nana)
 2306  echo nana
 2307  echo $nana
 2308  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-v3s5"
 2309  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "andela-vof-app-instance-jwqv"
 2310  rm setup.sh
 2311  cd vof_ci_image
 2312  vim staging.rb
 2313  vim database.tf
 2314  vim network.tf
 2315  vim routing.tf
 2316  vim variables.tf
 2317  export credential_file=Users/davidmukiibi/PROJECTS/vof-terraform/vof/service-account.json
 2318  export TF_VAR_credential_file="Users/davidmukiibi/PROJECTS/vof-terraform/vof/service-account.json"
 2319  export TF_VAR_credential_file="/Users/davidmukiibi/PROJECTS/vof-terraform/vof/service-account.json"
 2320  terraform init -var="vof_disk_image=dawei-vof-image-ruby-1510684778" -var="state_path=$TF_VAR_state_path"
 2321  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510684778" -var="state_path=$TF_VAR_state_path"
 2322  terraform apply -var="vof_disk_image=daudi-vof-image-ruby-1510649282" -var="state_path=$TF_VAR_state_path"
 2323  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "russia-vof-app-instance-t40h"
 2324  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510684778" -var="state_path=$TF_VAR_state_path"
 2325  terraform destroy --force -var="vof_disk_image=daudi-vof-image-ruby-1510649282" -var="state_path=$TF_VAR_state_path"
 2326  gcloud compute --project "vof-migration-test" .ssh --zone "europe-west1-b" "production-vof-app-instance-3brx"
 2327  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "dawei-vof-app-instance-m1gv"
 2328  packer build packer.json | tee new_image_1.txt
 2329  packer build packer.json | tee new_image_2.txt
 2330  packer build packer.json | tee new_image_3.txt
 2331  vim new_image_3.txt
 2332  export VOF_PATH=/Users/davidmukiibi/vof-tracker
 2333  packer build packer.json | tee new_image_4.txt
 2334  packer build packer.json | tee new_image_5.txt
 2335  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-3brx"
 2336  packer build packer.json | tee new_image_6.txt
 2337  export TF_VAR_state_path="staging-state/terraform.tfstate"
 2338  vim main.tf
 2339  terraform init -var="vof_disk_image=dawei-vof-image-ruby-1510746225" -var="state_path=$TF_VAR_state_path"
 2340  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510746225" -var="state_path=$TF_VAR_state_path"
 2341  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "barcalona-vof-app-instance-151r"
 2342  packer build packer.json | tee new_image_7.txt
 2343  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510748402" -var="state_path=$TF_VAR_state_path"
 2344  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "uganja-vof-app-instance-34xw"
 2345  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510748402" -var="state_path=$TF_VAR_state_path"
 2346  packer build packer.json | tee new_image_8.txt
 2347  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510771233" -var="state_path=$TF_VAR_state_path"
 2348  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "ganja-vof-app-instance-z3l5"
 2349  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510771233" -var="state_path=$TF_VAR_state_path"
 2350  packer build packer.json | tee new_image_9.txt
 2351  cd ...
 2352  cd vof-
 2353  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510775520" -var="state_path=$TF_VAR_state_path"
 2354  cd environments
 2355  packer build packer.json | tee new_image_10.txt
 2356  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "cameroon-vof-app-instance-fmm8"
 2357  terraform ddestroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510775520" -var="state_path=$TF_VAR_state_path"
 2358  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510775520" -var="state_path=$TF_VAR_state_path"
 2359  terraform -var="vof_disk_image=dawei-vof-image-ruby-1510780005" -var="state_path=$TF_VAR_state_path"
 2360  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510780005" -var="state_path=$TF_VAR_state_path"
 2361  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "ghana-vof-app-instance-4gq8"
 2362  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "ghana-vof-app-instance-3q34"
 2363  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-mdf4"
 2364  vim production.rb
 2365  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510780005" -var="state_path=$TF_VAR_state_path"
 2366  packer build packer.json| tee new_image_12.txt
 2367  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510818585" -var="state_path=$TF_VAR_state_path"
 2368  gcloud iam service-accounts get-iam-policy \n: 1510819797:0;gcloud iam service-accounts get-iam-policy 1052082072014-compute@developer.gserviceaccount.com
 2369  gcloud iam service-accounts get-iam-policy wednesday-logging-keys@vof-migration-test.iam.gserviceaccount.com
 2370  gcloud iam service-accounts get-iam-policy 1052082072014-compute@developer.gserviceaccount.com
 2371  gcloud compute instances create china --service-account 1052082072014-compute@developer.gserviceaccount.com --scopes https://www.googleapis.com/auth/cloud-platform
 2372  gcloud logging logs list
 2373  gcloud compute instances create usa --service-account 1052082072014-compute@developer.gserviceaccount.com --scopes [https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/logging.write, https://www.googleapis.com/auth/logging.read\]
 2374  gcloud compute instances create usa --service-account 1052082072014-compute@developer.gserviceaccount.com --scopes [https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/logging.write, https://www.googleapis.com/auth/logging.read]
 2375  gcloud compute instances create usa --service-account 1052082072014-compute@developer.gserviceaccount.com --scopes https://www.googleapis.com/auth/logging.write
 2376  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "canada-vof-app-instance-qltl"
 2377  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510818585" -var="state_path=$TF_VAR_state_path"
 2378  packer build packer.json| tee new_image_13.txt
 2379  packer build packer.json | tee new_image_13.txt
 2380  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "australia-vof-app-instance-sp6m"
 2381  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b"
 2382  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "australia-vof-app-instance-ht33"
 2383  export GOOGLE_APPLICATION_CREDENTIALS=
 2384  $GOOGLE_APPLICATION_CREDENTIALS
 2385  vim $GOOGLE_APPLICATION_CREDENTIALS
 2386  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "zimbabwe-vof-app-instance-hbb8"
 2387  touch vof.conf
 2388  touch vof.pos
 2389  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510821740" -var="state_path=$TF_VAR_state_path"
 2390  vim vof.pos
 2391  vim vof.conf
 2392  ping 35.205.195.107
 2393  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "zambia-vof-app-instance-jxtk"
 2394  cd vault
 2395  vim tf
 2396  cd tf
 2397  vim cluster.tf
 2398  grep -e "A disk image was created:" new_image_13.txt | cut -d ' ' -f8
 2399  cat new_image_9
 2400  cat new_image_10.txt
 2401  grep -e "A disk image was created" new_image_13.txt | cut -d ':' -f8
 2402  grep -e "A disk image was created" new_image_13.txt | cut -d ':' -f7
 2403  `pwd`
 2404  echo `pwd`
 2405  grep -e "A disk image was created" new_image_13.txt | cut -d ':' -f3
 2406  grep -e "A disk image was created" new_image_13.txt | cut -d ' ' -f8
 2407  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-797k"
 2408  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510821740" -var="state_path=$TF_VAR_state_path"
 2409  vim service-key.json
 2410  sudo rm -rf new_image_14.txt
 2411  vim setup.sh
 2412  packer build packer.json | tee new_image_14.txt
 2413  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "japan-vof-app-instance-wznk"
 2414  terraform destroy
 2415  terraform destroy --help
 2416  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510903250" -var="state_path=$TF_VAR_state_path"
 2417  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1510903250" -var="state_path=$TF_VAR_state_path"
 2418  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-526n"
 2419  packer build packer.json | tee new_image_15.txt
 2420  terraform apply -var="vof_disk_image=sjsjsjsjs" -var="state_path=$TF_VAR_state_path"
 2421  vim new_image_15.txt
 2422  cat  new_image_15.txt
 2423  cat packer/packer.json
 2424  cat packer/new_image_15.txt
 2425  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510920095" -var="state_path=$TF_VAR_state_path"
 2426  packer build packer.json| tee new_image_16.txt
 2427  ll 
 2428  terraform apply  -var="vof_disk_image=dawei-vof-image-ruby-1510922462" -var="state_path=$TF_VAR_state_path"
 2429  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "korea-vof-app-instance-2cjd"
 2430  terraform destroy --force  -var="vof_disk_image=dawei-vof-image-ruby-1510920095" -var="state_path=$TF_VAR_state_path"
 2431  packer build packer.json | tee new_image_17.txt
 2432  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1510927601" -var="state_path=$TF_VAR_state_path"
 2433  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "swaziland-vof-app-instance-wszl"
 2434  git brunch
 2435  vim cd ..
 2436  jobs
 2437  code compute.tf
 2438  sigkill --help
 2439  man sigkill
 2440  echo google -n
 2441  echo "google" -n
 2442  echo -n "google"
 2443  lo
 2444  netstat --listen
 2445  netstat -l
 2446  lsof -l
 2447  lsof -i
 2448  netstat -i
 2449  man lsof 
 2450  man netstat
 2451  git comit
 2452  code monitoring_logging.md
 2453  man echo
 2454  git cimmit
 2455  code monitoring.md
 2456  mkdir screenshots
 2457  git add logging.md
 2458  git commit -m "edit loggng"
 2459  git commit -m "add screenshots folder"
 2460  git add monitoring.md
 2461  git add screenshots
 2462  git commit -m "edit monitoring.md to add screenshots"
 2463  git commit -m "Edit ReadMe to update links to documentation."
 2464  packer build packer.json | tee new_image_18.txt
 2465  export GOOGLE_APPLICATION_CREDENTIALS=/Users/davidmukiibi/PROJECTS/vof-terraform/packer/service-key.json
 2466  packer build packer.json | tee new_image_19.txt
 2467  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1511272002"
 2468  terraform init -var="vof_disk_image=dawei-vof-image-ruby-1511272002" -var="state_path=$TF_VAR_state_path"
 2469  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1511272002" -var="state_path=$TF_VAR_state_path"
 2470  packer build packer.json | tee new_image_20.txt
 2471  terraform destroy --force -var="vof_disk_image=dawei-vof-image-ruby-1511272002" -var="state_path=$TF_VAR_state_path"
 2472  terraform apply -var="vof_disk_image= dawei-vof-image-ruby-1511276393" -var="state_path=$TF_VAR_state_path"
 2473  terraform apply -var="vof_disk_image=dawei-vof-image-ruby-1511276393" -var="state_path=$TF_VAR_state_path"
 2474  terraform destroy --force  -var="vof_disk_image=dawei-vof-image-ruby-1511276393" -var="state_path=$TF_VAR_state_path"
 2475  cd spec
 2476  cd /usr/bin
 2477  cd /usr/bin/ | grep bash
 2478  cd /bin
 2479  ping google.como
 2480  git clone git@github.com:FlevianK/vof-terraform.git
 2481  vim monitoring.md
 2482  vim vof/jumpbox.tf
 2483  vim vof_base_image/packer.json
 2484  vim vof_base_image/setup.sh
 2485  vim  vof/network.tf
 2486  vim  packer/setup.sh
 2487  vim  packer/packer.json
 2488  vim  vof/main.tf
 2489  cd vof-terraform
 2490  code setup.sh
 2491  code logging.md
 2492  git add docs/logging.md
 2493  git add docs/screenshots
 2494  git clone git@github.com:andela/vof-deployment-scripts.git
 2495  vim logging.md
 2496  cd screenshots
 2497  vim this.
 2498  vim just.txt
 2499  vim this.txt
 2500  mv this.txt test.sh
 2501  chmod +x test.sh
 2502  stat -c %A test.sh | sed 's/...\(.\).\+/\1/'
 2503  stat -F %A test.sh | sed 's/...\(.\).\+/\1/'
 2504  stat %A test.sh | sed 's/...\(.\).\+/\1/'
 2505  stat -c %a test.sh
 2506  stat %a test.sh
 2507  stat test.sh
 2508  cd trial
 2509  cat hullo.txt
 2510  man cut
 2511  sudo ./test.sh
 2512  vim hullo.txt
 2513  export haha=this
 2514  echo $haha
 2515  andela=$haha
 2516  echo $andela
 2517  export PROD_ENV=daniel=sebuuma,david=mukiibi
 2518  echo $PROD_ENV
 2519  echo $Andela
 2520  ./test.sh
 2521  vim halamadrid.txt
 2522  vim test.sh
 2523  git stash
 2524  git add .circleci/deploy.sh
 2525  git st
 2526  git remote -v
 2527  git reset --hard b6d3b56
 2528  git log --oneline
 2529  git push origin develop
 2530  git push origin develop --force
 2531  ls -al
 2532  mkdir new_VOF
 2533  cd new_VOF
 2534  git clone git@github.com:SProjects/vof-tracker.git
 2535  git add .circleci
 2536  vim start_vof.sh
 2537  code start_vof.sh
 2538  cd vof
 2539  vim compute.tf
 2540  gcloud beta compute instance-groups managed list-instances production-vof-app-server-group-manager --zone europe-west1-b
 2541  gcloud beta compute instance-groups managed list-instances staging-vof-app-server-group-manager --zone europe-west1-b
 2542  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "staging-vof-app-instance-k8wr"
 2543  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "staging-vof-app-instance-753r"
 2544  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "production-vof-app-instance-ck4q"
 2545  cd vof-deployment-scripts
 2546  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "staging-vof-app-instance-g70v"
 2547  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "staging-vof-app-instance-k4gk"
 2548  gcloud compute --project "vof-migration-test" ssh --zone "europe-west1-b" "staging-jumpbox"
 2549  curl http://www.whatismyproxy.com
 2550  ping 35.205.254.162
 2551  vof-tracker
 2552  environments
 2553  vim development.rb
 2554  vim test.rb
 2555  cd initializers
 2556  :q
 2557  vim application.
 2558  vim Gemfile
 2559  vim application.rb
 2560  nmap -sn 192.168.1.0/24 | grep "scan report for" | awk '{print $5}'  
 2561  nmap -sn 192.168.0.0/24 | grep "scan report for" | awk '{print $5}'  
 2562  arp -a | grep "(192.168.10.177)" | awk '{print $4}' 
 2563  arp -a | grep "(192.168.11.92)" | awk '{print $4}' 
 2564  arp -a
 2565  arp -a | grep "(192.168.10.121)" | awk '{print $4}' 
 2566  arp -a | grep "(192.168.11.92)" | awk '{print $4}'
 2567  arp -a | grep "(192.168.11.92)"
 2568  nmap -sn 192.168.0.0/24
 2569  app_config=development
 2570  "/Applications/Postgres.app/Contents/Versions/9.6/bin/psql" -p5432 -d "jamaica"
 2571  DEV_SECRET_KEY=ios
 2572  source .env
 2573  APP_SETTING=development
 2574  $ENV
 2575  psql postgres
 2576  export JWT_SECRET_KEY=thisisthekey
 2577  git remote add origin git@github.com:davidmukiibi/bucketlist-ios-.git
 2578  git add runtime.txt
 2579  git add run.py
 2580  git add requirements.txt
 2581  git add manage.py
 2582  git add instance/
 2583  git add buckeT/
 2584  git add .travis.yml
 2585  git add .coveragerc
 2586  git add .bucketlistrc
 2587  cd iPhoneBucketlist/
 2588  git remote add origin git@github.com:davidmukiibi/iPhoneBucketlist.git
 2589  git add iPhoneBucketlist/
 2590  git add  iPhoneBucketlist.xcodeproj/project.pbxproj
 2591  git  add iPhoneBucketlist.xcodeproj/xcuserdata/davidmukiibi.xcuserdatad/xcschemes/iPhoneBucketlist.xcscheme
 2592  git oush
 2593  git push --set-upstream origin master
 2594  touch config.yml
 2595  vim config.yml
 2596  git add ../iPhoneBucketlist/ViewBucketlistsViewController.swift
 2597  git add ../iPhoneBucketlist.xcodeproj/xcuserdata/davidmukiibi.xcuserdatad/xcdebugger/
 2598  git add .circleci/
 2599  touch suggested_config_yml_circleci_file.txt
 2600  vim suggested_config_yml_circleci_file.txt
 2601  cd buckeT/tests
 2602  vim test_login_user.py
 2603  nosetests --with-coverage
 2604  git add README.md buckeT/bucketlist.py buckeT/tests/test_login_user.py
 2605  git add buckeT/tests/base_test_class.py buckeT/tests/test_bucket_list.py  buckeT/tests/test_bucket_list_item.py buckeT/tests/test_login_user.py buckeT/tests/test_register_user.py
 2606  ping youtube.com
 2607  ping photos.google.com
 2608  docker pull ubuntu
 2609  docker run -i ubuntu
 2610  docker run -t ubuntu
 2611  docker kill 78a4c89b0279
 2612  docker kill 693e8e7a3d44
 2613  docker start -ati 35fa2e9ba34b
 2614  docker start -ti 35fa2e9ba34b
 2615  docker rm 693e8e7a3d44 78a4c89b0279 206e7671a0e9 35fa2e9ba34b 437353a9b015
 2616  docker rm 4e5f8bba2f9d 1f271cb5cd84 52bbe943f9ea 8c4107601139 ffde52a77b3e a6cd00621050 e6e3fa9e42a0
 2617  docker rm debian
 2618  docker rmi debian ubuntu ubuntu 
 2619  docker rmi ubuntu:<none>
 2620  docker rmi ubuntu
 2621  docker rmi 'ubuntu
 2622  docker rmi ubuntu:17.04
 2623  docker rmi ubuntu:none
 2624  docker rmi .
 2625  docker rmi -q
 2626  docker rmi q
 2627  docker help
 2628  docker rmi --force
 2629  docker rmi --force ubuntu
 2630  docker rmi --no-prune ubuntu
 2631  docker run ubuntu --name=mukiibi
 2632  docker run ubuntu --name mukiibi
 2633  docker rm d84368eeba2f e740d25af626
 2634  docker kill ubuntu:latest
 2635  docker rmi ubuntu:latest
 2636  docker run --name mukiibi -d ubuntu
 2637  docker rm mukiibi
 2638  docker run --name mukiibi -d ubuntu --hostname uganda
 2639  docker run --name mukiibi -d ubuntu -h uganda
 2640  docker run --name david -d ubuntu -h uganda
 2641  docker run --name carson -d ubuntu --hostname=uganda
 2642  docker run -d ubuntu --hostname=uganda
 2643  docker run -h uganda -d ubuntu
 2644  docker run -ai 7e537cebf333
 2645  docker start 7e537cebf333
 2646  docker start -it 7e537cebf333
 2647  docker start -ia 7e537cebf333
 2648  docker start -ai 35fa2e9ba34b
 2649  docker start -ai 7e537cebf333
 2650  docker start -ai d5b2d46a45b1
 2651  docker start -ai 372be342359d
 2652  docker run -ti ubuntu
 2653  docker start 5feec67eba9d
 2654  docker start -ai 5feec67eba9d
 2655  docker run -h kenya -d ubuntu --rm --name uganja
 2656  ping googlr.com
 2657  docker rm d5b2d46a45b1
 2658  docker rm 5280ccb7349b d65dba0d60ff 7e537cebf333 372be342359d
 2659  docker rm 04df8b70030d 5feec67eba9d e597e63448dc
 2660  VBoxManage list ostypes
 2661  code packer.json
 2662  export vof_path=/Users/davidmukiibi/PROJECTS/vof-tracker
 2663  packer validate
 2664  vagrant --help
 2665  vagrant -v
 2666  vagrant list-commands
 2667  packer validate packer
 2668  cd PR
 2669  cd vof-tracker
 2670  export VOF_PATH=/Users/davidmukiibi/PROJECTS/vof-tracker
 2671  packer validate packer.json
 2672  packer build packer.json
 2673  packer build -debug packer.json
 2674  packer build -debug new_packer.json
 2675  packer build new_packer.json
 2676  cd vagrant
 2677  cd output-virtualbox-iso
 2678  vagrant up
 2679  mkdir docker_trial
 2680  cd docker_trial
 2681  touch .dockerignore
 2682  ping google.coom
 2683  docker inspecct
 2684  docker inspect
 2685  docker build -t my_mongodb .
 2686  cd vof-scripts
 2687  cd packer
 2688  vim packer.
 2689  vim packer.json
 2690  docker run -name my_first_mdb_instance -i  8aec8352ef63
 2691  docker run --name my_first_mdb_instance -i  8aec8352ef63
 2692  docker run -name my_first_mdb_instance -i -t my_mongodb
 2693  docker run --name my_first_mdb_instance -i -t my_mongodb
 2694  docker run --name my_first_mdb_instane -i -t my_mongodb
 2695  ping 127.0.0.1:28017
 2696  packer validate packerNdocker.json
 2697  packer build packerNdocker.json
 2698  docker rmi30ff28cece15 8aec8352ef63
 2699  docker rmi 30ff28cece15 8aec8352ef63
 2700  docker run my_mongodb
 2701  docker run -it my_mongodb
 2702  docker exit 0ee045f751a0
 2703  docker kill 0ee045f751a0
 2704  docker attach nonenetcontainer
 2705  docker run e01373a2dd2c
 2706  docker run -it e01373a2dd2c
 2707  docker run -it -d ubuntu 
 2708  docker attach 145e5531c33c63aaa502e9cbead98ed889c555ab871bd977940a35da71a7b308
 2709  ip addr show
 2710  docker network inspect 
 2711  docker network inspect host
 2712  docker run -itd --name=container1 busybox
 2713  docker run -itd --name=container2 busybox
 2714  docker network inspect bridge
 2715  ping 172.17.0.4/16
 2716  ping 172.17.0.4
 2717  docker start container1
 2718  docker start -it container1
 2719  docker -a container1
 2720  docker -ai container1
 2721  docker -i container1
 2722  docker start -ai container1
 2723  docker -v
 2724  docker network create --driver bridge isolated_nw
 2725  docker run --network=isolated_nw -itd --name=container3 busybox\n
 2726  docker network inspect isolated_nw
 2727  mkdir dockerPractice
 2728  docker build -t postgresql_container .
 2729  docker run -P --name pg_test eg_postgresql
 2730  docker run -P --name postgres_test_container postgresql_container
 2731  psql -h localhost -p 32768 -d docker -U docker --password
 2732  vim database_models.py
 2733  cd templates
 2734  cat run.py
 2735  cat config.py
 2736  cat manage.py
 2737  cd buckeT
 2738  docker build -t postgresql_container1 .
 2739  docker run -P --name postgres_test_container1 postgresql_container1
 2740  psql -h localhost -p 32769 -d docker -U docker --password
 2741  docker start -ait 1cd23e4037ce
 2742  docker start -ai 1cd23e4037ce
 2743  touch start.sh
 2744  docker build -t postgresql_container2 .
 2745  docker run -rm -P --name postgres_test_container2 postgresql_container2
 2746  docker run --rm -P --name postgres_test_container2 postgresql_container2
 2747  vim start.sh
 2748  docker build -t postgresql_container3 .
 2749  docker run --rm -P --name postgres_test_container3 postgresql_container3
 2750  ./start.sh
 2751  sudo ./start.sh
 2752  docker run --rm -P --name postgres_test_container4 postgresql_container4
 2753  docker run --rm -P --name postgres_test_container5 postgresql_container
 2754  docker run --rm -P --name postgres_test_container5 postgresql_container5
 2755  sudo sh ./start.sh
 2756  sh ./start.sh
 2757  docker run --rm -P --name postgres_test_container6 postgresql_container6
 2758  docker run --rm -P --name postgres_test_container7 postgresql_container7
 2759  docker run --rm -P --name postgres_test_container8 postgresql_container8
 2760  docker run -P --name postgres_test_container8 postgresql_container8
 2761  docker run -it -P --name postgres_test_container8 postgresql_container8
 2762  docker -a 7d656d99ae0c
 2763  docker -ai 7d656d99ae0c
 2764  docker -ait 7d656d99ae0c
 2765  docker start -ait 7d656d99ae0c
 2766  docker start -ai 7d656d99ae0c
 2767  docker run -Pit --name postgres_test_container8 postgresql_container9
 2768  cd /var/lib/docker/tmp/docker-builder833953162/
 2769  docker run -Pit --name postgres_test_container11 postgresql_container10
 2770  docker kill f411fa0c69ba 82726f02398d 0618149d364c
 2771  docker rmi f02da203ce72 7be3a155502b 295725064d4f 1cd23e4037ce
 2772  docker rmi 14264dea0675 719eede3eae9 1bc8cea442e7 c2e7600af374
 2773  docker rm f02da203ce72 f20e200ce452 7d656d99ae0c 
 2774  docker rm 7be3a155502b 295725064d4f 1cd23e4037ce
 2775  docker rm f411fa0c69ba 82726f02398d 0618149d364c
 2776  docker rm 14264dea0675 719eede3eae9 1bc8cea442e7
 2777  docker rmi 14264dea0675 719eede3eae9 1bc8cea442e7
 2778  docker rmi 2b57c0034ca8 4804d5578a15 1a5b0608d096 066014ec1583 
 2779  docker rmi 46b6d4a02cd9 7dd2a8f4574a 4301a9353d7f 9c2af7d30e8f
 2780  docker rmi 8aec8352ef63
 2781  code start.sh
 2782  echo `home`
 2783  echo `HOME`
 2784  docker build -t -v ~/Desktop/dockerPractice:/work postgresql_container11 .
 2785  docker build -tv ~/Desktop/dockerPractice:/work postgresql_container11 .
 2786  docker build -v ~/Desktop/dockerPractice:/work -t postgresql_container11 .
 2787  docker build -t postgresql_container13 .
 2788  docker run -Pit --name postgres_test_container13 postgresql_container13
 2789  docker build -t postgresql_container4 .
 2790  docker run -Pit --name postgres_test_container4 postgresql_container4
 2791  docker build -t postgresql_container5 .
 2792  docker run -Pit --name postgres_test_container5 postgresql_container5
 2793  docker build -t postgresql_container6 .
 2794  docker start -ai postgres_test_container5
 2795  docker build -t postgresql_container7 .
 2796  docker build -t postgresql_container8 .
 2797  docker run -Pit --name postgres_test_container8 postgresql_container8
 2798  docker build -t postgresql_container9 .
 2799  docker run -Pit --name postgres_test_container9 postgresql_container9
 2800  cp /Users/davidmukiibi/PROJECTS/checkPointII ~/Desktop/dockerPractice
 2801  docker build -t postgresql_container10 .
 2802  docker run -Pit --name postgres_test_container10 postgresql_container10
 2803  docker build -t postgresql_container11 .
 2804  docker run -Pit --name postgres_test_container11 postgresql_container11
 2805  docker build -t postgresql_container12 .
 2806  docker run -Pit --name postgres_test_container12 postgresql_container12
 2807  docker run -Pit --name postgres_test_container15 postgresql_container12
 2808  docker build -t postgresql_container20 .
 2809  docker build -t postgresql_container21 .
 2810  docker build -t postgresql_container22 .
 2811  docker run -Pit --name postgres_test_container22 postgresql_container22
 2812  docker build -t postgresql_container23 .
 2813  docker run -Pit --name postgres_test_container23 postgresql_container23
 2814  docker build -t postgresql_container24 .
 2815  docker build -t postgresql_container25 .
 2816  docker run -Pit --name postgres_test_container25 postgresql_container25
 2817  docker run -Pit --name postgres_test_container25.1 postgresql_container25
 2818  docker build -t postgresql_container26 .
 2819  docker run -Pit --name postgres_test_container26 postgresql_container26
 2820  docker build -t postgresql_container27 .
 2821  docker run -Pit --name postgres_test_container27 postgresql_container27
 2822  docker build -t postgresql_container28 .
 2823  docker run -Pit --name postgres_test_container28 postgresql_container28
 2824  docker build -t postgresql_container29 .
 2825  docker run -Pit --name postgres_test_container29 postgresql_container29
 2826  psql -h localhost -p 32803 -d docker -U docker --password
 2827  docker run -Pit --name postgres_test_container31 postgresql_container31
 2828  docker run -Pit --name postgres_test_container32 postgresql_container32
 2829  docker containers
 2830  docker rmi  897460dada3e  bbdb71f72e0e 892f103a5a7d a776ab8cf120 5983ef30f8af
 2831  docker rmi -f 897460dada3e  bbdb71f72e0e 892f103a5a7d a776ab8cf120 5983ef30f8af
 2832  docker rmi -f 9f2b14ba8d0e  4057f5b7d2ba 6450169b2219 00ab957d0888
 2833  docker rmi -f 87fe4158b78e 34dd73b501c1  507d55f6b668
 2834  docker rmi -f  8678609d8924 78120f1d52eb aaf7a04ac74d  dcce8a8c97e8 ded09c574ad7    0f1e88e0b5bf 
 2835  docker rmi -f 16b206b84394 aa9f777a6bdd fa0ce133c3c0   1d9289a67cf4 
 2836  docker rmi -f e92227627293 892f103a5a7d 897460dada3e
 2837  docker rmi -f 892f103a5a7d
 2838  docker build -t postgresql_container30 .
 2839  docker run -Pit --name postgres_test_container30 postgresql_container30
 2840  docker run -Pit --name postgres_test_container40 postgresql_container30
 2841  docker build -t postgresql_container31 .
 2842  docker run -Pit --name postgres_test_container41 postgresql_container31
 2843  docker build -t postgresql_container32 .
 2844  docker run --rm -Pit --name postgres_test_container42 postgresql_container32
 2845  docker build -t postgresql_container33 .
 2846  docker run --rm -Pit --name postgres_test_container43 postgresql_container33
 2847  docker build -t postgresql_container34 .
 2848  docker run --rm -Pit --name postgres_test_container44 postgresql_container34
 2849  docker build -t postgresql_container35 .
 2850  docker run --rm -Pit --name postgres_test_container45 postgresql_container35
 2851  docker build -t postgresql_container36 .
 2852  docker run --rm -Pit --name postgres_test_container46 postgresql_container36
 2853  docker build -t postgresql_container37 .
 2854  docker run --rm -Pit --name postgres_test_container47 postgresql_container37
 2855  docker build -t postgresql_container38 .
 2856  docker run --rm -Pit --name postgres_test_container48 postgresql_container38
 2857  docker build -t postgresql_container39 .
 2858  docker run --rm -Pit --name postgres_test_container49 postgresql_container39
 2859  psql -h localhost -p 32815 -d docker -U docker --password
 2860  docker run hello-world
 2861  docker pull alpine
 2862  docker rmi -f postgresql_container39 
 2863  docker rmi postgresql_container38 postgresql_container37 postgresql_container36 postgresql_container35 postgresql_container34 postgresql_container33
 2864  docker rmi -f 1461ae94d265 14f11ef4ae52
 2865  docker rmi -f postgresql_container32 postgresql_container31 postgresql_container30
 2866  docker rmi -f postgresql_container6
 2867  docker rmi -f postgresql_container5
 2868  docker rmi -f 1461ae94d265         4b3e3716d8b6   8aec8352ef63
 2869  docker run alpine ping google.com
 2870  docker run alpine echo "hullo"
 2871  docker run alpine
 2872  docker run -it alpine echo "hullo"
 2873  docker run -it alpine
 2874  docker rm 386deeb603d0  df88f9ea4c51 2353df2ff4f6 6098fe2c22ed adac288547bd 45b94199c517 
 2875  docker rm d3be83cf2130 537f44a3e36a e30f94f5db6a 0fe03f58c1fa 1ad8f672700e 03d117e692f1 645bad329a6b bdcd3f5ea2a0 
 2876  docker kill adac288547bd
 2877  docker run -d dockersamples/static-site
 2878  docker stop b7280f68bc90a41aacc2cc41ee3a9124e296ab081e21872d3d45316ac3139a2b
 2879  docker rm b7280f68bc90a41aacc2cc41ee3a9124e296ab081e21872d3d45316ac3139a2b
 2880  docker run --name static-site -e AUTHOR="Your Name" -d -P dockersamples/static-site
 2881  docker port static-site
 2882  http://localhost:32817
 2883  curl http://localhost:32817
 2884  cd flask_app
 2885  touch templates/index.html
 2886  docker build -t mukiibi/myfirstapp .
 2887  docker run -p 8888:5000 --name myfirstapp_container mukiibi/myfirstapp
 2888  docker push mukiibi/myfirstapp
 2889  docker stop myfirstapp
 2890  docker stop myfirstapp_container
 2891  docker rm myfirstapp_container
 2892  docker rmi mukiibi/myfirstapp
 2893  docker swarm --force leave
 2894  docker swarm leave -f
 2895  cat docker-stack.yml
 2896  cat docker-compose.yml
 2897  mkdir swam
 2898  cd swam
 2899  git clone https://github.com/docker/example-voting-app.git
 2900  cd example-voting-app
 2901  docker stack services vote
 2902  docker stack deploy --compose-file docker-stack.yml vote
 2903  docker stack rm vote
 2904  code Dockerfile
 2905  cd /var/lib
 2906  docker build -t mukiibi/checkpoint .
 2907  docker build -t mukiibi/checkpoint2 .
 2908  docker build -t mukiibi/checkpoint3 .
 2909  cd /Users/davidmukiibi/Desktop/checkPointII
 2910  docker rm -f 8fba7d161e36
 2911  docker rm -f 4c44df960ff9 0ee045f751a0 f5b3bdff14fb
 2912  docker rm -f 753548f33669 3c7ba29c3212 f5b3bdff14fb 4c44df960ff9
 2913  docker rm -f 99e4dd09eabd  a1cd905bc9d1 8b51302c30c3
 2914  docker rm -f 861af4e463ab 2d8df67985dd b14f0e6a4f4b 
 2915  docker rm -f a92575fac1b4 145e5531c33c dd16851280badd16851280ba
 2916  docker rm -f 76626b1c032a 227a9d6fd785 f71d76fbd565 e5f0a093d78e
 2917  docker rm -f e01373a2dd2c  dd16851280ba bd67d1b17a76 ef68e3d5e54c
 2918  docker rm -f 07a769602df5  fe472dd865b8  f5d4bf0f3efa 15b97b6c4e27 4b5e101be62b 
 2919  docker ps -a 105d59df3360 105d59df3360  82c40ea51bce e876a543b2c4 c61780e39801
 2920  docker rm -f  105d59df3360 105d59df3360  82c40ea51bce e876a543b2c4 c61780e39801
 2921  docker ps -a ad5642c44ab8 4ef9cd8d2675 71b0895a1bdd b3aa1f7d7701
 2922  docker rm -f  ad5642c44ab8 4ef9cd8d2675 71b0895a1bdd b3aa1f7d7701
 2923  docker rm -f 7e441b845200 816a038e67cd afd25f56f2dc 6db6b8fb35d5 12067ef07835
 2924  docker rm -f 49b92e9c161b 1e5d1d0c254c 365f29db9315 a17e32ee03d1 28f6c5e93012 42e8d426a51a
 2926  docker rm -f 527e5cae0ac2  4926a4774d7f 3225c9da8238 2edd40f485b4  5504c9c75178 0732b8379649
 2928  docker rm -f eace4c18f8cb f234c037b17b 244a5f59ad55 0b5fe802ee7d
 2930  docker rm -f b2b17c7ab457
 2934  docker rmi -f f2a91732366c
 2935  docker rmi -f f589ccde7957 df04c6be7820  5f5a0e41c525 f6e8af4562c1
 2937  docker rmi -f e10df791f13c  2b1e6048c539 8dbf7c60cf88  747cb2d60bbe 00fd29ccc6f1 
 2939  docker rmi -f 2b7548040fa2
 2940  docker rmi -f 6d9b55aafd9f  f9b6f7f7b9d3 4a21fc5ad31c
 2942  docker rmi -f 3fd9065eaf02 2a4cca5ac898  892f103a5a7d 1461ae94d265
 2944  docker rmi -f 74229a2a0a93 3d4a60b2955b 2a4cca5ac898 3a997d84eb7e 6c6084ed97e5
 2946  docker rmi -f 00fd29ccc6f1 92cb571ca65a   c479bcd4db0a
 2956  docker build -t mukiibi/checkpoint4 .
 2960  docker rmi 4fe153627511
 2963  docker build -t mukiibi/checkpoint5 .wd
 2965  docker build -t mukiibi/checkpoint5 .
 2966  docker run -it test_container mukiibi/checkpoint5
 2967  docker run -it --name test_container mukiibi/checkpoint5
 2970  docker rm 1435e1242717 a34df81b82a1 bdec0d5e54d4
 2973  docker rmi d49e5337730d  9ba9cd7b2b7c 4fe153627511 2a4cca5ac898
 2979  mkdir docker-playground
 2980  cd docker-playground
 2985  mkdir templates
 2986  touch templates/todo.html
 2994  cd dockerPractice
 3005  mkdir another
 3006  cd another
 3010  docker compose run
 3011  docker-compose run
 3013  touch requirements.txt
 3019  pwd
 3020  ll
 3021  touch docker-compose.yml
 3022  vim docker-compose.yml
 3023  docker-compose up
 3024  docker images
 3025  cd Desktop
 3026  ll
 3027  mkdir postgres_image
 3028  cd postgres_image
 3029  touch Dockerfile
 3030  vim Dockerfile
 3031  pwd
 3032  vim Dockerfile
 3033  code .
 3034  docker build .
 3035  ll
 3036  cd checkpointII
 3037  ll
 3038  cat requirements.txt
 3039  docker build .
 3040  cd ..
 3041  pwd
 3042  ll
 3043  docker build .
 3044  vim /todo/checkpointII/manage.py
 3045  ll
 3046  checkpointII/manage.py
 3047  vim checkpointII/manage.py
 3048  ll
 3049  cd checkpointII
 3050  ll
 3051  vim requirements.txt
 3052  cd ..
 3053  vim Dockerfile
 3054  pwd
 3055  docker images
 3056  docker ps 
 3057  docker ps -a
 3058  docker kill fa9d876f51d9
 3059  docker rm fa9d876f51d9 4c233a258a3f 2f42caf095fe 6a636ac4ccfe 4d92d80a64b3e3023be74e90 663ff4988f00
 3060  docker ps -a
 3061  docker rm 4d92d80a64b3
 3062  docker ps -a
 3063  docker rm e3023be74e90
 3064  docker ps -a
 3065  docker images
 3066  docker rmi  da0b4c955a47  bf9b83105783
 3067  docker images
 3068  docker rmi 9a328dc9a2b6 209bce9aa8e2
 3069  docker images
 3070  docker rmi 906a635963e4  98f50b8fe753 00ff013b0e80
 3071  docker images
 3072  docker rmi 2a4cca5ac898 9e92c8430ba0
 3073  docker images
 3074  docker rmi ec61d13c8566 b0ae06e5ac08
 3075  docker images
 3076  docker build .
 3077  docker images
 3078  docker rmi fcd6c66c32bb  2a4cca5ac898
 3079  docker ps -a
 3080  docker rm c3f985409a2b
 3081  docker rmi fcd6c66c32bb  2a4cca5ac898
 3082  docker build .
 3083  docker images
 3084  docker rmi 2b97da1e3906 1fb40f1310fe 1cd7864a7d1e 2a4cca5ac898
 3085  docker ps -a
 3086  docker rm c070e90cca53 da84022b1eb1 430db2bf66f7
 3087  docker rmi 2b97da1e3906 1fb40f1310fe 1cd7864a7d1e 2a4cca5ac898
 3088  docker build .
 3089  docker ps -a
 3090  docker rm 9051fae3a749 0e72201037fb e7af9b97844a
 3091  docker images
 3092  docker rmi ea1574937f84 bf6df9b92fe1   eb1a831cb0dd
 3093  docker rmi  2a4cca5ac898
 3094  docker build .
 3095  docker images
 3096  docker build .
 3097  docker images
 3098  docker ps -a
 3099  docker rm 6094f160259d aa6753f8d0e5 7798d21e37c5
 3100  docker images
 3101  docker rmi  b97a8e7f3355 9a6001ba4ff0  05d9c59a4e34   2a4cca5ac898
 3102  docker build .
 3103  docker images
 3104  docker ps -a
 3105  docker mri c374314fc4a6
 3106  docker rmi c374314fc4a6
 3107  docker rm c374314fc4a6
 3108  docker rmi  ba9d96aa7108
 3109  docker build -t mukiibi/my_postgres_test_db .
 3110  docker images
 3111  docker ps -a
 3112  docker rm 7c21a54b7608
 3113  docker rmi  f55ee5dbf18d
 3114  docker build -t mukiibi/my_postgres_test_db .
 3115  docker images
 3116  ll
 3117  touch docker-compose.yml
 3118  docker images --no-trunc
 3119  docker-compose build
 3120  docker images
 3121  docker rm a216c98a5cf6 5583f1580035v dcfec134aeb4
 3122  docker ps -a
 3123  docker rm 71e54f745509
 3124  docker rm 78adf5e91b96
 3125  docker rmi a216c98a5cf6  5583f1580035
 3126  docker images
 3127  docker-compose build
 3128  docker-compose up
 3129  docker ps -a
 3130  docker rm e4c199632cc2
 3131  docker rm ff792c2c053c
 3132  docker rmi 4a52fd282452 
 3133  docker images
 3134  docker rmi 374f205eef03   dcfec134aeb4  2a4cca5ac898
 3135  docker images
 3136  docker --help
 3137  docker build --help
 3138  docker build --tag mukiibi:my_postgres_test_db .
 3139  docker ps -a
 3140  docker rm 52f1847dc608
 3141  docker rmi b2823d0d5aab
 3142  docker build --tag mukiibi:my_postgres_test_db .
 3143  pwd
 3144  ll
 3145  docker build --tag mukiibi:my_postgres_test_db .
 3146  docker ps -a
 3147  docker rm d2f76a189b5c 86344957fb70
 3148  docker rmi  081754a3cadd  c0b39527ba34
 3149  docker build --tag mukiibi:my_postgres_test_db .
 3150  docker images
 3151  docker-compose build
 3152  docker-compose up
 3153  docker images
 3154  docker ps -a
 3155  history
 3156  docker images --no-trunc
 3157  docker-compose up
 3158  psql
 3159  pwd
 3160  cd /Users/davidmukiibi/Desktop/postgres_image
 3161  docker build -t mukiibiPostgresImage .
 3162  docker build -t mukiibi_ostgres_image .
 3163  docker-compose up
 3164  docker-compose build
 3165  docker-compose up
 3166  docker images
 3167  docker images --no-trunc
 3168  docker-compose up
 3169  docker stack deploy
 3170  docker build .
 3171  docker images
 3172  docker build .
 3173  docker images
 3174  docker ps -a
 3175  pwd
 3176  docker build .
 3177  pwd
 3178  docker-compose build
 3179  docker-compose up
 3180  docker-compose up --user davidmukiibi
 3181  docker-compose up --user davidmukiibi --force-recreate
 3182  docker-compose up --force-recreate
 3183  docker-compose up --user davidmukiibi
 3184  docker IMAGES
 3185  docker images
 3186  docker images --no-trunc
 3187  docker-compose up --user davidmukiibi
 3188  docker-compose build --user davidmukiibi
 3189  docker-compose build
 3190  docker-compose up
 3191  docker-compose build
 3192  docker ps -a
 3193  docker kill $(docker ps -a)
 3194  docker kill $(docker ps -q)
 3195  docker rm $(docker ps -a)
 3196  docker rm ${docker ps -a}
 3197  docker rm ${docker ps -q}
 3198  docker stop $(docker ps -a -q)
 3199  docker rm $(docker ps -a -q)
 3200  docker rmi -f $(docker images -q)
 3201  docker images
 3202  exit
 3203  ping google.com
 3204  docker --version
 3205  docker version
 3206  docker info
 3207  docker mode ls
 3208  docker node ls
 3209  docker service .docker network ls
 3210  docker network ls
 3211  pwd
 3212  cd Desktop
 3213  ll
 3214  mkdir another_trial
 3215  cd another_trial
 3216  ll
 3217  touch docker-compose.yml
 3218  vim docker-compose.yml
 3219  code docker-compose.yml
 3220  touch database.py
 3221  pwd
 3222  docker-compose up -d db
 3223  git clone git@github.com:juggernaut/nginx-flask-postgres-docker-compose-example.git
 3224  ll
 3225  cd nginx-flask-postgres-docker-compose-example
 3226  ll
 3227  vim env_file
 3228  docker-compose up -d db
 3229  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import database; database.init_db()'"
 3230  docker-compose up -d
 3231  docker images
 3232  docker ps -a
 3233  docker rm -f ${docker ps -a -q}
 3234  docker rm -f $(docker ps -a -q)
 3235  docker rmi -f $(docker images -q)
 3236  pwd
 3237  ll
 3238  cat env_file
 3239  exit
 3240  shasum /Users/davidmukiibi/Downloads/kubernetes.tar 
 3241  curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl
 3242  sudo mv ./kubectl /usr/local/bin/kubectl
 3243  gcloud components install kubectl
 3244  kubectl cluster-info
 3245  brew install kubectl
 3246  ping google.com
 3247  kubectl --version client
 3248  kubectl version --client
 3249  brew cask install minikube
 3250  brew install docker-machine-driver-xhyve
 3251  sudo chown root:wheel /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
 3252  sudo chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
 3253  minikube start --vm-driver=xhyve
 3254  minikube start --vm-driver=hyperkit
 3255  minikube start --vm-driver=xhyve
 3256  history
 3257  brew install kubectl
 3258  brew link kubernetes-cli
 3259  brew cask install minikube
 3260  brew cask reinstall minikube
 3261  brew install docker-machine-driver-hyperkit
 3262  brew install docker-machine-driver-xhyve
 3263  sudo chown root:wheel /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
 3264  sudo chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
 3265  minikube start --vm-driver=xhyve
 3266  kubectl config current-context
 3267  kubectl get nodes
 3268  minikube start
 3269  brew install docker-machine-driver-xhyve
 3270  minikube delete
 3271  minikube retry
 3272  minikube start --vm-driver=xhyve
 3273  sudo chmod u+s /usr/local/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve
 3274  minikube start --vm-driver=xhyve
 3275  minikube delete
 3276  minikube start --vm-driver=xhyve --v=10 --alsologtostderr
 3277  minikube start --vm-driver=xhyve --show-libmachine-logs --v=10 --alsologtostderr
 3278  cd /Users/davidmukiibi/.minikube/cache/localkube/
 3279  ll
 3280  brew cask uninstall minikube
 3281  kubectl cluster-info
 3282  kubectl cluster-info dump
 3283  ## If running Bash 3.2 included with macOS\nbrew install bash-completion
 3284  brew UNinstall kubectl
 3285  brew uninstall kubectl
 3286  ## If running Bash 3.2 included with macOS\nbrew uninstall bash-completion
 3287  brew install kubectl
 3288  kubectl cluster-info
 3289  kubectl cluster-info dump
 3290  brew install bash-completion@2
 3291  kubectl completion bash > $(brew --prefix)/etc/bash_completion.d/kubectl
 3292  vim ~/.zshrc 
 3293  curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
 3294  sudo mv minikube /usr/local/bin
 3295  curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.25.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
 3296  minikube start
 3297  vim /Users/davidmukiibi/.minikube/cache/localkube/localkube-v0.25.0
 3298  --kubernetes-version
 3299  kubectl --kubernetes-version
 3300  kubectl version
 3301  kubectl cluster-info dump
 3302  minikube delete
 3303  brew link --overwrite  docker-machine
 3304  brew unlink docker-machine-driver-xhyve
 3305  brew install docker-machine-driver-xhyve
 3306  brew link docker-machine-driver-xhyve
 3307  minikube start
 3308  curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit \\n&& chmod +x docker-machine-driver-hyperkit \\n&& sudo mv docker-machine-driver-hyperkit /usr/local/bin/ \\n&& sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit \\n&& sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
 3309  minikube ip.
 3310  minikube ip
 3311  minikube start
 3312  kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
 3313  minikube start
 3314  kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
 3315  ping google.com
 3316  minikube ip
 3317  minikube start
 3318  sudo minikube start
 3319  sudo minikube delete
 3320  sudo minikube start
 3321  brew uninstall kubernetes
 3322  brew uninstall kubectl
 3323  curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.6.1/bin/darwin/amd64/kubectl
 3324  kubectl version --client
 3325  chmod +x ./kubectl
 3326  sudo mv ./kubectl /usr/local/bin/kubectl
 3327  kubectl cluster-info
 3328  kubectl cluster-info dump
 3329  curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.17.1/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
 3330  sudo minikube start
 3331  brew uninstall kubectl
 3332  brew install kubectl
 3333  brew unistall minikube
 3334  brew uninstall minikube
 3335  brew install minikube
 3336  brew cask install minikube
 3337  sudo rm rf /usr/local/bin/minikube
 3338  sudo rm /usr/local/bin/minikube
 3339  brew cask install minikube
 3340  sudo minikube start
 3341  sudo minikube delete
 3342  history
 3343  minikube start --vm-driver=hyperkit
 3344  docker images
 3345  minikube --help
 3346  minikube delete --help
 3347  minikube delete
 3348  minikube delete   --alsologtostderr
 3349  docker-machine ls
 3350  minikube start --vm-driver=hyperkit
 3351  cd /Users/davidmukiibi/.minikube/machines/minikube/minikube.rawdisk
 3352  vim /Users/davidmukiibi/.minikube/machines/minikube/minikube.rawdisk
 3353  vim /Users/davidmukiibi/.minikube/machines/minikube
 3354  cd /Users/davidmukiibi/.minikube/machines/minikube
 3355  ll
 3356  rm minikube.rawdisk
 3357  ll
 3358  vim config.json
 3359  minikube start --vm-driver=hyperkit
 3360  ll
 3361  cd ..
 3362  ll
 3363  cd ..
 3364  ll
 3365  pwd
 3366  cd ..
 3367  pwd
 3368  rm .minikube
 3369  minikube start
 3370  cd /Users/davidmukiibi/.minikube/machines/minikube
 3371  cd /Users/davidmukiibi/.minikube
 3372  ll
 3373  cd machines
 3374  ll
 3375  cd ..
 3376  ll
 3377  cd config
 3378  ll
 3379  rm config.json
 3380  ll
 3381  minikube start
 3382  ll
 3383  minikube start --vm-driver=hyperkit
 3384  minikube delete --vm-driver=hyperkit
 3385  minikube delete 
 3386  cd /usr/local/bin/VBoxManage
 3387  cd /usr/local/bin/
 3388  ll
 3389  cd /Users/davidmukiibi/.minikube/machines/minikube/minikube
 3390  cd /Users/davidmukiibi/.minikube/machines/minikube/
 3391  minikube delete
 3392  docker-machine ls
 3393  docker-machine create
 3394  minikube start
 3395  minikube ssh
 3396  minikube start --vm-driver=hyperkit
 3397  minikube start
 3398  kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
 3399  mkvirtualenv kubernetes
 3400  brew install kubectl
 3401  brew link kubernetes-cli
 3402  brew cask install minikube
 3403  sudo apt install libvirt-bin qemu-kvm
 3404  minikube start --vm-driver=vmwarefusion
 3405  minikube start
 3406  minikube start \\n    --network-plugin=cni \\n    --container-runtime=rkt
 3407  kubectl -n kube-system get po'
 3408  kubectl -n kube-system get po
 3409  cat ~/.minikube/machines/minikube/config.json | grep DriverName
 3410  vim ~/.minikube/machines/minikube/config.json
 3411  minikube start
 3412  /Users/davidmukiibi/.minikube/machines/minikube
 3413  cd /Users/davidmukiibi/.minikube/machines/minikube
 3414  ll
 3415  cd minikube
 3416  ll
 3417  cd ..
 3418  ll
 3419  vim config.json
 3420  minikube start
 3421  ll
 3422  pwd
 3423  cd minikube
 3424  ll
 3425  cd ..
 3426  vim config.json
 3427  minikube start
 3428  cd /Users/davidmukiibi/.minikube/cache/localkube/
 3429  ll
 3430  pwd
 3431  cd Desktop
 3432  git clone git@github.com:kubernetes/minikube.git
 3433  ll
 3434  pwd
 3435  minikube start
 3436  minikube delete
 3437  minikube start
 3438  sudo scp -t /usr/local/bin outpu
 3439  sudo scp -t /usr/local/bin output
 3440  minikube start
 3441  brew uninstall minikube
 3442  cd /usr/local/bin
 3443  ll
 3444  rm /usr/local/Caskroom/minikube/0.25.0/minikube-darwin-amd64
 3445  ll
 3446  rm -rf /usr/local/Caskroom/minikube/0.25.0/minikube-darwin-amd64
 3447  ll
 3448  rm /usr/local/Caskroom/minikube/0.25.0/minikube-darwin-amd64
 3449  pwd
 3450  cd ..
 3451  ll
 3452  cd bin
 3453  ll
 3454  rm -rf /usr/local/Caskroom/minikube/0.25.0/
 3455  ll
 3456  llwd
 3457  pwd
 3458  cd /usr/local/bin
 3459  ll
 3460  sudo rm -rf /usr/local/Caskroom/minikube/0.25.0/
 3461  cd /usr/local/binll
 3462  ll
 3463  pwd
 3464  cd /usr/local/bin
 3465  ll
 3466  minikube version
 3467  minikube --version
 3468  nexit
 3469  exit
 3470  minikube --version
 3471  kubectl --version
 3472  kubectl version
 3473  minikube ip
 3474  brew cask install minikube
 3475  brew cask reinstall minikube
 3476  minikube ip
 3477  minikube start
 3478  d
 3479  pwd
 3480  minikube start
 3481  kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
 3482  kubectl expose deployment hello-minikube --type=NodePort
 3483  kubectl get pod
 3484  curl $(minikube service hello-minikube --url)
 3485  kubectl delete deployment hello-minikube
 3486  minikube stop
 3487  kubectl config current-context
 3488  kubectl get nodes
 3489  minikube start
 3490  ifconfig
 3491  ping google.com
 3492  pwd
 3493  cd Desktop
 3494  ll
 3495  mkdir final_trial
 3496  cd final_trial
 3497  ll
 3498  touch Dockerfile
 3499  code .
 3500  touch docker-compose.yml
 3501  cd Desktop
 3502  ll
 3503  git clone git@github.com:juggernaut/nginx-flask-postgres-docker-compose-example.git
 3504  pwd
 3505  $ docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import checkpointII/manage.py; manage.createdb()'"
 3506  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import checkpointII/manage.py; manage.createdb()'"
 3507  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'from checkpointII; import manage.py; manage.createdb()'"
 3508  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'from checkpointII import manage.py; manage.createdb()'"
 3509  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage.py; manage.createdb()'"
 3510  docker-compose up -d db
 3511  cd ..
 3512  ll
 3513  cd final_trial
 3514  cd checkpointII
 3515  docker-compose up -d db
 3516  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage.py; manage.createdb()'"
 3517  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.createdb()'"
 3518  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.create_db()'"
 3519  pwd
 3520  mkdir one_container
 3521  cd one_container
 3522  ll
 3523  touch Dockerfile
 3524  code .
 3525  docker build .
 3526  docker run 
 3527  docker run ubuntu
 3528  docker ps -a
 3529  docker start ubuntu
 3530  docker --help
 3531  docker run --help
 3532  docker ps -a
 3533  docker start -ai d9537e595c55
 3534  docker start -ait d9537e595c55
 3535  docker start -it d9537e595c55
 3536  docker start --help
 3537  docker start -ai --help
 3538  docker start -ai d9537e595c55
 3539  docker ps -a
 3540  docker run -it ubuntu
 3541  docker build .
 3542  docker images
 3543  docker stop $(docker ps -q)
 3544  docker images
 3545  docker ps -a
 3546  docker build .
 3547  docker images
 3548  docker ps -a
 3549  docker build .
 3550  docker ps -a
 3551  docker stop $(docker ps -q)
 3552  docker rm -f $(docker ps -a -q)
 3553  docker rmi -f $(docker images -q)
 3554  docker-compose up -d db
 3555  ll
 3556  pwd
 3557  code .
 3558  ll
 3559  cd checkpointII
 3560  ll
 3561  pwd
 3562  docker-compose up -d db
 3563  $ docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.create_db()'"\n
 3564  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.create_db()'"\n
 3565  cd Desktop
 3566  ll
 3567  cd final_trial
 3568  code .
 3569  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.create_db()'"\n
 3570  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'sudo -u postgres psql postgres' && 'import manage; manage.create_db()'"\n
 3571  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && /bin/bash -c 'sudo -u postgres psql postgres' && python -c 'import manage; manage.create_db()'"\n
 3572  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && /bin/bash -c '-u postgres psql postgres' && python -c 'import manage; manage.create_db()'"\n
 3573  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && /bin/bash -c 'psql' && python -c 'import manage; manage.create_db()'"\n
 3574  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && 'postgres -D /usr/local/pgsql/data >logfile 2>&1 &' && python -c 'import manage; manage.create_db()'"\n
 3575  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && 'postgres -D /usr/local/pgsql/data >logfile 2>&1' && python -c 'import manage; manage.create_db()'"\n
 3576  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && 'postgres -D /usr/local/pgsql/data >logfile 2>&1 &' && python -c 'import manage; manage.create_db()'"\n
 3577  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && 'postgres -D /usr/local/pgsql/data' && python -c 'import manage; manage.create_db()'"\n
 3578  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c 'import manage; manage.create_db()'"\n
 3579  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src  && /etc/init.d/postgresql start  && python -c 'import manage; manage.create_db()'"\n
 3580  ll
 3581  docker build --rm=true -t andreagrandi/postgresql:9.3 .
 3582  docker-compose up -d db
 3583  fig up
 3584  brew install fig
 3585  fig up
 3586  docker-compose up -d db
 3587  docker-compose up -d dbdata
 3588  docker-compose up -d db
 3589  docker-compose up
 3590  ping http://0.0.0.0:5000
 3591  ping http://0.0.0.0
 3592  pwd
 3593  cd Desktop
 3594  git clone git@github.com:juggernaut/nginx-flask-postgres-docker-compose-example.git
 3595  cd nginx-flask-postgres-docker-compose-example
 3596  docker-compose up -d db
 3597  docker-compose run --rm flaskapp /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import database; database.init_db()'"
 3598  docker-compose up -d
 3599  docker compose dashboard
 3600  docker-compose dashboard
 3601  docker dashboard
 3602  docker --help
 3603  history
 3604  docker dashboard
 3605  docker-compose dashboard
 3606  docker ps -a
 3607  docker-compose up -d --scale flaskapp=5
 3608  docker ps -a
 3609  curl -s -o /dev/null localhost:8080
 3610  docker-compose logs -f flaskapp
 3611  docker ps -a
 3612  docker stop $(docker ps -q)
 3613  docker rm -f $(docker ps -a -q)
 3614  docker rmi -f $(docker images -q)
 3615  cd ..
 3616  cd theamityapp
 3617  ll
 3618  cd amityapp
 3619  touch Dockerfile
 3620  cd ..
 3621  cd database
 3622  ll
 3623  pwd
 3624  touch Dockerfile
 3625  cd ..
 3626  pwd
 3627  code .
 3628  cd ..
 3629  ll
 3630  cd theamityapp
 3631  ll
 3632  touch docker-compose.yml
 3633  pwd
 3634  ll
 3635  cd amityapp
 3636  git clone git@github.com:davidmukiibi/bucketlist-ios-.git
 3637  cd ..
 3638  ll
 3639  cd database
 3640  git clone git@github.com:davidmukiibi/bucketlist-ios-.git
 3641  pwd
 3642  cd ..
 3643  ll
 3644  docker-compose build -d
 3645  docker-compose build
 3646  docker-compose build .
 3647  pwd
 3648  touch env_file
 3649  docker-compose build .
 3650  $HOME
 3651  echo $HOME
 3652  cd Desktop
 3653  cd theamityapp
 3654  docker-compose build .
 3655  docker-compose build
 3656  ll
 3657  docker-compose build
 3658  docker stop $(docker ps -q)
 3659  docker rm -f $(docker ps -a -q)
 3660  docker rmi -f $(docker images -q)
 3661  docker-compose build
 3662  docker run -it ubuntu
 3663  pwd
 3664  docker-compose build
 3665  docker images
 3666  docker-compose build
 3667  docker ps -a
 3668  docker start -ai f722541e03b4
 3669  cd Desktop
 3670  ll
 3671  cd theamityapp
 3672  ll
 3673  docker-compose build
 3674  cd Desktop
 3675  ll
 3676  git clone git@github.com:SProjects/bucketlist_andela.git
 3677  docker-compose build
 3678  docker-compose build -d amityapp
 3679  docker-compose build
 3680  docker ps -a
 3681  docker rm 3ca421bfa3e7 0befcdadd350 8ce17bf52202 0c715e6d6900 bb1b74346251 0584a8edc0eb 87f4ff9e993d e182ee4691eb
 3682  docker images
 3683  docker rmi -f  f1dfd415e4b0  abe671587492 5784ef4e004c 305bcac839f7 d9c9688c77ff  fc407c0cdfbe b9226167d4e1 79f95412c320
 3684  docker images
 3685  docker rmi -f a7839571b9a0 a3f082267908 ada8d9ba0b10 dd41adf4f220
 3686  docker images
 3687  docker rmi -f  c4c4b039b363   12d107d1fff2 7dc0f2040bf9
 3688  docker images
 3689  docker images
 3690  docker rmi -f 31a044594863
 3691  docker images
 3692  docker rmi -f 30a59773dc5c
 3693  docker images
 3694  docker ps -a
 3695  docker rm -f 71359f88e6be
 3696  docker rm -f d89a28283d32
 3697  docker ps -a
 3698  docker rm -f 572ec15a69de beaf7823bc48 db017ea078a3
 3699  docker ps -a
 3700  docker-compose up
 3701  docker-compose up --build
 3702  docker-compose up --help
 3703  docker-compose up -d --build
 3704  curl -O https://github-production-release-asset-2e65be.s3.amazonaws.com/3946572/f7da5f58-c544-11e7-83bf-12951236673a\?X-Amz-Algorithm\=AWS4-HMAC-SHA256\&X-Amz-Credential\=AKIAIWNJYAX4CSVEH53A%2F20180130%2Fus-east-1%2Fs3%2Faws4_request\&X-Amz-Date\=20180130T100544Z\&X-Amz-Expires\=300\&X-Amz-Signature\=cf97d48c82c259f7bff7c7d9750ce262c0be8937629c00042e79037d74f08a17\&X-Amz-SignedHeaders\=host\&actor_id\=14627533\&response-content-disposition\=attachment%3B%20filename%3DPostgres-2.1.1.dmg\&response-content-type\=application%2Foctet-stream
 3705  curl https://github-production-release-asset-2e65be.s3.amazonaws.com/3946572/f7da5f58-c544-11e7-83bf-12951236673a\?X-Amz-Algorithm\=AWS4-HMAC-SHA256\&X-Amz-Credential\=AKIAIWNJYAX4CSVEH53A%2F20180130%2Fus-east-1%2Fs3%2Faws4_request\&X-Amz-Date\=20180130T100544Z\&X-Amz-Expires\=300\&X-Amz-Signature\=cf97d48c82c259f7bff7c7d9750ce262c0be8937629c00042e79037d74f08a17\&X-Amz-SignedHeaders\=host\&actor_id\=14627533\&response-content-disposition\=attachment%3B%20filename%3DPostgres-2.1.1.dmg\&response-content-type\=application%2Foctet-stream
 3706  curl -O https://github-production-release-asset-2e65be.s3.amazonaws.com/3946572/f7da5f58-c544-11e7-83bf-12951236673a\?X-Amz-Algorithm\=AWS4-HMAC-SHA256\&X-Amz-Credential\=AKIAIWNJYAX4CSVEH53A%2F20180130%2Fus-east-1%2Fs3%2Faws4_request\&X-Amz-Date\=20180130T100544Z\&X-Amz-Expires\=300\&X-Amz-Signature\=cf97d48c82c259f7bff7c7d9750ce262c0be8937629c00042e79037d74f08a17\&X-Amz-SignedHeaders\=host\&actor_id\=14627533\&response-content-disposition\=attachment%3B%20filename%3DPostgres-2.1.1.dmg\&response-content-type\=application%2Foctet-stream
 3707  docker-compose up -d --build
 3708  postgres version
 3709  postgres --version
 3710  docker-compose up -d --build
 3711  echo postgres --version | cut -d ' ' -f 3
 3712  echo postgres --version | cut -d ' ' -f 2
 3713  echo ${postgres --version} | cut -d ' ' -f 2
 3714  echo $(postgres --version) | cut -d ' ' -f 2
 3715  echo $(postgres --version) | cut -d ' ' -f 3
 3716  hullo=echo $(postgres --version) | cut -d ' ' -f 3
 3717  hullo==echo $(postgres --version) | cut -d ' ' -f 3
 3718  hullo==echo $(postgres --version) | cut -d ' ' -f 2
 3719  docker-compose up -d --build
 3720  foo=( $(SayStuff) ) \n 
 3721  foo=( $(postgres --version) ) \n 
 3722  echo ${foo[2]}
 3723  echo ${foo[3]}
 3724  docker-compose up -d --build
 3725  version=( $(postgres --version) )
 3726  echo $version
 3727  version=$(postgres --version)
 3728  echo $version
 3729  docker-compose up -d --build
 3730  docker images
 3731  docker ps -a
 3732  pwd
 3733  docker-compose up -d --build
 3734  docker images
 3735  ps 
 3736  SIGKILL 29334
 3737  kill 29334
 3738  ps 
 3739  ps -a
 3740  ps 
 3741  top
 3742  top | grep "docker"
 3743  ps
 3744  pstree
 3745  ps aux | less
 3746  ps aux | grep "docker"
 3747  ps
 3748  top | grep "docker"
 3749  docker images
 3750  pwd
 3751  ll
 3752  docker-compose up -d --build
 3753  docker images
 3754  docker ps -a
 3755  docker stop $(docker ps -q)
 3756  docker rm -f $(docker ps -a -q)
 3757  docker rmi -f $(docker images -q)
 3758  docker-compose up -d --build
 3759  postgres psql
 3760  psql
 3761  docker-compose up -d --build
 3762  history
 3763  docker stop $(docker ps -q)
 3764  docker rm -f $(docker ps -a -q)
 3765  docker rmi -f $(docker images -q)
 3766  docker-compose up -d --build
 3767  docker stop $(docker ps -q)
 3768  docker rmi -f $(docker images -q)
 3769  brew install kubectl
 3770  docker-compose up -d --build
 3771  docker ps -a
 3772  docker images
 3773  docker stop $(docker ps -q)
 3774  docker rm -f $(docker ps -a -q)
 3775  docker rmi -f $(docker images -q)
 3776  docker-compose up -d --build
 3777  kubectl info
 3778  kubectl --help
 3779  $SHELL
 3780  echo $SHELL
 3781  docker-compose up -d --build
 3782  ping google.com
 3783  docker-compose up -d --build
 3784  docker images
 3785  docker-compose up -d --build
 3786  ping google.com
 3787  docker ps -a
 3788  docker rm -f $(docker ps -a -q)
 3789  docker images
 3790  docker rmi -f 6ba8d52bfcf9 82790f535788  a0c3091a771e 439086b73194  a25ba382d51b b188642f6709   5561e8dbe7a8 77097955ebdf  426869cfda80  70f71f441140  f9656e3609e8  4ee05013e82b  a5b548b886ce   25a779378926  47d3aebabcdb   c6d20619f720
 3791  docker images
 3792  docker-compose up -d --build
 3793  ping google.com
 3794  docker images
 3795  docker-compose up -d --build
 3796  pwd
 3797  cd database\ image
 3798  ll
 3799  code .
 3800  pwd
 3801  cd /Users/davidmukiibi/Desktop/database image
 3802  cd /Users/davidmukiibi/Desktop/database\ image
 3803  pwd
 3804  ll
 3805  cd database
 3806  ll
 3807  docker build .
 3808  ping google.com
 3809  docker build .
 3810  docker images
 3811  ping google.com
 3812  echo $DATA_DIRECTORY
 3813  psql
 3814  docker build .
 3815  ping google.com
 3816  cd Desktop
 3817  ll
 3818  cd database\ image
 3819  ll
 3820  cd default\ postgres\ image
 3821  ll
 3822  docker build .
 3823  echo /media/$USER
 3824  docker build .
 3825  docker images
 3826  docker build --help
 3827  docker build -t mukiibi:mypostgresbaseimage .
 3828  docker images
 3829  docker rmi -f e90179d83b55  c1a56f9c0898  203b66fb78c0  3eb8527ebcd4   f343b9cf51f6    0b1d08a71fe6    3645188f4720
 3830  docker stop 5bd67ca36830
 3831  docker rm 5bd67ca36830
 3832  docker images
 3833  docker build .
 3834  chown --help
 3835  docker build .
 3836  pwd
 3837  docker build .
 3838  docker build -t mukiibi:mypostgresbaseimage .
 3839  docker images
 3840  docker build .
 3841  pwd
 3842  docker build .
 3843  pwd
 3844  docker build .
 3845  pg_ctl -D DATA_DIRECTORY -l logfile start --help
 3846  pg_ctl --help
 3847  docker build .
 3848  docker build -t mukiibi:mypostgresbaseimage .
 3849  docker build .
 3850  ping google.com
 3851  exit
 3852  docker build -t mukiibi:finalpostgresimage .
 3853  docker build -t mukiibi:mypostgresbaseimage .
 3854  pwd
 3855  cd Desktop
 3856  ll
 3857  cd api\ image
 3858  ll
 3859  code .
 3860  docker build -t mukiibi:finalpostgresimage .
 3861  code .
 3862  docker build -t mukiibi:finalpostgresimage .
 3863  pwd
 3864  ll
 3865  cd buc
 3866  cd bucketlist
 3867  ll
 3868  pwd
 3869  /Users/davidmukiibi/Desktop/api image/bucketlist
 3870  cd /Users/davidmukiibi/Desktop/api image/bucketlist
 3871  cd /Users/davidmukiibi/Desktop/api\ image/bucketlist
 3872  cd ..
 3873  pwd
 3874  ll
 3875  cd bucketlist
 3876  cd ..
 3877  pwd
 3878  ll
 3879  pwd
 3880  ll
 3881  docker build -t mukiibi:api_base_image
 3882  docker build -t mukiibi:api_base_image .
 3883  docker build -t mukiibi:api_image .
 3884  cd Desktop
 3885  ll
 3886  cd bucketlist_api
 3887  ll
 3888  touch docker-compose.yml
 3889  code .
 3890  docker images
 3891  docker rmi  13fbf5e1787c 96542a4868ff  c3545f3636f4 ec2a180a0ccb  346cefbf8414   e656ac8aaed0  d0cc7ad3c207  1e02acc19df1 d3b0f30325a0 3f25baebbe8f  3f284ef50544    4770b0ac4a54  931d79d03a63  e637fd9879c2 417d7b9795b2  dfd38b3d4430  c81a7e58bf24  7962f1476638   5ce0c60308b2    1286403614e7   06a3f06c353f  0566f0a18929 addca1a37982    e76c91948605  084280dca3cb 263d142c7678   ce9d8eb4285b     39df14b42328  e594450baf24 c56f4a1c3d5e a212bdc0ad7e eec651dbc9a8 b1151862245c   e90179d83b55  a3eac3f97b39
 3892  docker stop e79df4a7e7dd  3df38e6decff 64c3e591faaf14e3b7567603 ae8cc09e6759f31cf170307b 5cfdb2d8c4a2 94a487e82a69 6deccd3c11d0 3d6b0cd6f4ae 0025e2c013ea 736b15a62ed0fb2e7e1ffca1a470f2178890 c8a1b6e66c53 bc51277fb369 d3e78bfb246c 3bd155cbad9e e9bf7a4cafbf fb53ff0717d6 75fcd77b2bff 41dbc2ffa58f 7205da97772d 140a6fff60d8  6b21ce89f8be da64c61ee250  530207f56ac55cb8f55bb0dd 392285ea8b1f  617a0854b98e 56cb2f1a7756
 3893  docker stop e79df4a7e7dd  3df38e6decff 64c3e591faaf 14e3b7567603 ae8cc09e6759 f31cf170307b 5cfdb2d8c4a2 94a487e82a69 6deccd3c11d0 3d6b0cd6f4ae 0025e2c013ea 736b15a62ed0 fb2e7e1ffca1a470f2178890 c8a1b6e66c53 bc51277fb369 d3e78bfb246c 3bd155cbad9e e9bf7a4cafbf fb53ff0717d6 75fcd77b2bff 41dbc2ffa58f 7205da97772d 140a6fff60d8  6b21ce89f8be da64c61ee250  530207f56ac5 5cb8f55bb0dd 392285ea8b1f  617a0854b98e 56cb2f1a7756
 3894  docker stop fb2e7e1ffca1 a470f2178890
 3895  docker srm fb2e7e1ffca1 a470f2178890
 3896  docker rm fb2e7e1ffca1 a470f2178890
 3897  docker rm e79df4a7e7dd  3df38e6decff 64c3e591faaf 14e3b7567603 ae8cc09e6759 f31cf170307b 5cfdb2d8c4a2 94a487e82a69 6deccd3c11d0 3d6b0cd6f4ae 0025e2c013ea 736b15a62ed0 fb2e7e1ffca1a470f2178890 c8a1b6e66c53 bc51277fb369 d3e78bfb246c 3bd155cbad9e e9bf7a4cafbf fb53ff0717d6 75fcd77b2bff 41dbc2ffa58f 7205da97772d 140a6fff60d8  6b21ce89f8be da64c61ee250  530207f56ac5 5cb8f55bb0dd 392285ea8b1f  617a0854b98e 56cb2f1a7756
 3898  docker rmi  13fbf5e1787c 96542a4868ff  c3545f3636f4 ec2a180a0ccb  346cefbf8414   e656ac8aaed0  d0cc7ad3c207  1e02acc19df1 d3b0f30325a0 3f25baebbe8f  3f284ef50544    4770b0ac4a54  931d79d03a63  e637fd9879c2 417d7b9795b2  dfd38b3d4430  c81a7e58bf24  7962f1476638   5ce0c60308b2    1286403614e7   06a3f06c353f  0566f0a18929 addca1a37982    e76c91948605  084280dca3cb 263d142c7678   ce9d8eb4285b     39df14b42328  e594450baf24 c56f4a1c3d5e a212bdc0ad7e eec651dbc9a8 b1151862245c   e90179d83b55  a3eac3f97b39
 3899  docker images
 3900  pwd
 3901  ll
 3902  code .
 3903  pwd
 3904  ll
 3905  docker compose build
 3906  docker-compose build
 3907  docker ps -a
 3908  docker-compose up
 3909  docker ps -a
 3910  docker-compose info
 3911  docker ps -a
 3912  docker build -t mukiibi:api_image .
 3913  docker build -t mukiibi:api_base_image .
 3914  docker build -t mukiibi:api_image .
 3915  docker ps -a
 3916  docker stop 3017532609d2 3017532609d2
 3917  docker ps -a
 3918  docker rm cfa1a768ce94 3017532609d2 1be5ef3ba7ae e2125e358b22 6ea3865c3e30
 3919  docker rm -f cfa1a768ce94 3017532609d2 1be5ef3ba7ae e2125e358b22 6ea3865c3e30
 3920  docker ps -a
 3921  docker rm -f ab8b64b3abb4 d6755bb14142 eae7798971b7 06fef06d0569 ee7384ed4954 34aa5659cf2c cc6c35a7bff3
 3922  docker ps -a
 3923  docker rm -f dff9ba8e0a3a df33c95de323
 3924  docker ps -a
 3925  docker rm 53efa554f849
 3926  docker ps -a
 3927  docker-compose up
 3928  docker-compose build
 3929  docker-compose up
 3930  docker images
 3931  docker rmi 7406d6cd7514
 3932  docker images
 3933  docker rmi 8e20efa28cbf
 3934  docker images
 3935  docker build -t mukiibi:api_image .
 3936  docker images
 3937  docker rmi  bd0b364b9740
 3938  docker ps -a
 3939  docker rm -f c72276205020 1af66e66ff82
 3940  docker rmi  bd0b364b9740
 3941  docker images
 3942  docker rmi 0d4ab8052ade
 3943  docker images
 3944  docker-compose build
 3945  docker-compose up
 3946  docker ps -a 
 3947  docker rm -f 09c60df32225 e6d06421db13
 3948  docker-compose build
 3949  docker-compose up
 3950  docker-compose build
 3951  docker-compose up
 3952  docker-compose build
 3953  docker-compose up
 3954  docker ps -a
 3955  docker ps -a 
 3956  docker rm 999a2e7e1181 78a5ed651527
 3957  docker images
 3958  docker build -t mukiibi:api_base_image .
 3959  docker build -t mukiibi:finalpostgresimage .
 3960  pwd
 3961  ll
 3962  cd ..
 3963  ll
 3964  cd database
 3965  ll
 3966  cdcd ..
 3967  vf ..
 3968  cd ..
 3969  ll
 3970  cd default\ postgres\ image
 3971  ll
 3972  vim Dockerfile
 3973  docker build -t mukiibi:postgres_base_image .
 3974  docker build -t mukiibi:postgres_image .
 3975  docker build -t mukiibi:api_image .
 3976  docker images
 3977  docker rmi -f  e3865ce16845    b238ffc3d52f   bd9813b01dba
 3978  docker images
 3979  docker-compose build
 3980  docker-compose up
 3981  docker build -t mukiibi:api_image .
 3982  docker-compose up
 3983  docker-compose build
 3984  docker-compose up
 3985  docker build -t mukiibi:postgres_image .
 3986  docker-compose up
 3987  docker images
 3988  docker ps -a
 3989  docker stop ba78e8c530a2
 3990  docker rm ba78e8c530a2 4ebd06354309 fe10cec818e7
 3991  docker ps -a
 3992  docker images
 3993  docker rmi  ae63dddfa0c8  ae63dddfa0c8  ae63dddfa0c8  8d89fedb7e9e   beb93a2fce57   9f2a81656738   61c0ab699d6d   d4b61f32cff4
 3994  docker images
 3995  docker rmi -f ae63dddfa0c8  ae63dddfa0c8  ae63dddfa0c8  8d89fedb7e9e   beb93a2fce57   9f2a81656738   61c0ab699d6d   d4b61f32cff4
 3996  docker images
 3997  pwd
 3998  ll
 3999  history
 4000  vim Dockerfile
 4001  docker build -t mukiibi:api_base_image .
 4002  vim Dockerfile
 4003  ll
 4004  vim Dockerfile
 4005  ll
 4006  vim Dockerfile
 4007  docker build -t mukiibi:postgres_base_image .
 4008  docker build -t mukiibi:api_image .
 4009  docker build -t mukiibi:postgres_image .
 4010  docker-compose build
 4011  docker-compose up
 4012  docker-compose up -d
 4013  docker ps -a
 4014  ping 0.0.0.0:5000
 4015  ping 0.0.0.0
 4016  docker ps -a
 4017  docker-compose up -d
 4018  docker ps -a
 4019  docker-compose up -d
 4020  docker ps -a
 4021  docker logs --tail 50 --follow --timestamps d14502c04741
 4022  docker ps -a
 4023  docker-compose up
 4024  docker logs --tail 50 --follow --timestamps d14502c04741
 4025  docker logs --tail 50 --follow --timestamps amitydb_1
 4026  docker ps -a
 4027  docker logs --tail 50 --follow --timestamps 8d0069629357
 4028  docker ps -a
 4029  docker stop ecb59dbf4079 8d0069629357
 4030  docker ps -a
 4031  docker rm -f ecb59dbf4079 8d0069629357
 4032  docker ps -a
 4033  docker build -t mukiibi:postgres_image .
 4034  docker-compose up
 4035  docker ps -a 
 4036  docker rm -f $(docker ps -a -q)
 4037  docker ps -a 
 4038  docker-compose up
 4039  docker ps -a 
 4040  docker rm -f $(docker ps -a -q)
 4041  docker-compose up
 4042  docker-compose build
 4043  docker-compose up
 4044  docker ps -a
 4045  docker logs --tail 50 --follow --timestamps 9e7038061fef
 4046  docker logs --tail 100 --follow --timestamps 9e7038061fef
 4047  docker-compose up
 4048  docker rm -f $(docker ps -a -q)
 4049  docker-compose up
 4050  docker rm -f $(docker ps -a -q)
 4051  docker-compose up
 4052  docker rm -f $(docker ps -a -q)
 4053  docker-compose up
 4054  docker build -t mukiibi:postgres_image .
 4055  docker-compose up
 4056  docker-compose up -d
 4057  docker ps -a
 4058  docker-compose up
 4059  docker-compose up -d
 4060  docker ps -a
 4061  docker logs --tail 50 --follow --timestamps 9e7038061fef
 4062  docker logs --tail 50 --follow --timestamps 6d3e7beac426
 4063  docker rm -f $(docker ps -a -q)
 4064  docker-compose up -d
 4065  docker logs --tail 50 --follow --timestamps 9e7038061fef
 4066  docker ps -a
 4067  docker logs --tail 50 --follow --timestamps 1973f41c7782
 4068  docker rm -f $(docker ps -a -q)
 4069  docker ps -a
 4070  docker-compose up -d
 4071  docker ps -a
 4072  docker logs --tail 50 --follow --timestamps 1973f41c7782
 4073  docker logs --tail 50 --follow --timestamps 0be932733be5
 4074  docker rm -f $(docker ps -a -q)
 4075  docker-compose up -d
 4076  docker ps -a
 4077  pwd
 4078  ll
 4079  git init
 4080  git add .
 4081  git commit -m "my first shot at docker and docker compose"
 4082  git remote add origin https://github.com/davidmukiibi/docker-compose.git
 4083  git push -u origin master
 4084  docker ps -a
 4085  docker-compose up -d
 4086  docker ps -a
 4087  docker logs --tail 50 --follow --timestamps c930e2b24b39
 4088  docker rm -f $(docker ps -a -q)
 4089  docker-compose up -d
 4090  docker ps -a
 4091  docker logs --tail 50 --follow --timestamps 8bb4b6e11d2d
 4092  docker rm -f $(docker ps -a -q)
 4093  docker-compose up -d
 4094  docker ps -a
 4095  docker logs --tail 50 --follow --timestamps ed3d8508329d
 4096  docker logs --tail 100 --follow --timestamps ed3d8508329d
 4097  docker rm -f $(docker ps -a -q)
 4098  docker-compose up -d
 4099  docker ps -a
 4100  docker logs --tail 100 --follow --timestamps 7acf49b000a1
 4101  docker rm -f $(docker ps -a -q)
 4102  docker-compose up -d
 4103  docker ps -a
 4104  docker rm -f $(docker ps -a -q)
 4105  docker build -t mukiibi:postgres_image .
 4106  docker ps -a
 4107  docker-compose up -d
 4108  docker ps -a
 4109  docker rm -f $(docker ps -a -q)
 4110  docker build -t mukiibi:postgres_image .
 4111  docker-compose up -d
 4112  docker ps -a
 4113  docker logs --tail 100 --follow --timestamps f38c193b8d6d
 4114  docker-compose up -d
 4115  docker rm -f $(docker ps -a -q)
 4116  docker build -t mukiibi:postgres_image .
 4117  docker-compose up -d
 4118  docker ps -a
 4119  docker logs --tail 100 --follow --timestamps a4592e4d90b5
 4120  docker rm -f $(docker ps -a -q)
 4121  docker build -t mukiibi:postgres_image .
 4122  docker ps -a
 4123  docker-compose up -d
 4124  docker ps -a
 4125  docker logs --tail 100 --follow --timestamps a4aa864f2c68
 4126  docker ps -a
 4127  git add .
 4128  git commit -m "fix postgres restart bug"
 4129  git push
 4130  docker ps -a
 4131  docker rm -f $(docker ps -a -q)
 4132  docker ps -a
 4133  docker build -t mukiibi:api_image .
 4134  docker-compose up -d
 4135  docker ps -a
 4136  docker logs --tail 100 --follow --timestamps ffa590636574
 4137  docker logs --tail 100 --follow --timestamps 088603f1aaaa
 4138  docker build -t mukiibi:api_image .
 4139  docker rm -f $(docker ps -a -q)
 4140  docker ps -a
 4141  docker-compose up -d
 4142  docker ps -a
 4143  docker rm -f $(docker ps -a -q)
 4144  docker ps -a
 4145  docker-compose up -d
 4146  docker ps -a
 4147  git clone git@github.com:andela/vof-tracker.git
 4148  pwd
 4149  cd Desktop
 4150  ll
 4151  mv .circleci circleci
 4152  pwd
 4153  exit
 4154  docker ps -a
 4155  pwd
 4156  ll
 4157  docker-compose up
 4158  docker ps -a
 4159  psql -h localhost -p 5432 -d docker -U dbuser --password docker
 4160  psql -h localhost -p 5432 -d docker -U docker --password docker
 4161  psql -h localhost -p 5432 -d docker -U postgres --password
 4162  psql -h localhost -p 5432 -d dockerdb -U postgres --password
 4163  psql -h 0.0.0.0 -p 5432 -d dockerdb -U postgres --password
 4164  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4165  pwd
 4166  ll
 4167  docker rm -f $(docker ps -a -q)
 4168  ll
 4169  pwd
 4170  cd ..
 4171  ll
 4172  cd ..
 4173  ll
 4174  cd
 4175  cd Desktop
 4176  ll
 4177  cd bucketlist
 4178  cd bucketlist_api
 4179  ll
 4180  cd database\ image
 4181  ll
 4182  docker build -t mukiibi:postgres_base_image .
 4183  pwd
 4184  ll
 4185  cd bucketlist/
 4186  ll
 4187  cd ..
 4188  docker build -t mukiibi:api_base_image .
 4189  cd Desktop
 4190  ll
 4191  cd bucketlist_api
 4192  ll
 4193  git status
 4194  git add .
 4195  git commit -m "edit dockerfiles"
 4196  git push
 4197  docker build -t mukiibi:postgres_image
 4198  docker build -t mukiibi:postgres_image .
 4199  pwd
 4200  ll
 4201  docker build -t mukiibi:api_image .
 4202  docker-compose up
 4203  docker build -t mukiibi:postgres_image .
 4204  docker-compose up
 4205  docker build -t mukiibi:postgres_image .
 4206  docker-compose up
 4207  docker build -t mukiibi:postgres_image .
 4208  docker-compose up
 4209  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4210  docker build -t mukiibi:postgres_image .
 4211  docker-compose up
 4212  docker build -t mukiibi:postgres_image .
 4213  docker-compose up
 4214  docker build -t mukiibi:postgres_image .
 4215  docker-compose up
 4216  docker rm -f $(docker ps -a -q)
 4217  docker-compose up
 4218  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4219  docker rm -f $(docker ps -a -q)
 4220  docker-compose up
 4221  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4222  docker-compose up
 4223  docker rm -f $(docker ps -a -q)
 4224  docker-compose up
 4225  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4226  pg_ctl -D /var/lib/postgresql/data -l logfile start
 4227  docker ps -a
 4228  docker start -ai 684a57ad2671
 4229  docker start -aid 684a57ad2671
 4230  docker build -t mukiibi:postgres_image .
 4231  docker-compose up
 4232  docker rm -f $(docker ps -a -q)
 4233  docker-compose up
 4234  docker rm -f $(docker ps -a -q)
 4235  docker build -t mukiibi:postgres_image .
 4236  docker-compose up
 4237  docker build -t mukiibi:postgres_image .
 4238  docker-compose up
 4239  docker rm -f $(docker ps -a -q)
 4240  docker-compose up
 4241  docker rm -f $(docker ps -a -q)
 4242  docker build -t mukiibi:postgres_base_image .
 4243  docker ps -a
 4244  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4245  docker rm -f $(docker ps -a -q)
 4246  docker build -t mukiibi:postgres_base_image .
 4247  docker ps -a
 4248  docker build -t mukiibi:postgres_base_image .
 4249  docker build -t mukiibi:postgres_image .
 4250  docker-compose up
 4251  docker build -t mukiibi:postgres_image .
 4252  docker-compose up
 4253  docker rm -f $(docker ps -a -q)
 4254  docker-compose up
 4255  docker rm -f $(docker ps -a -q)
 4256  docker-compose up
 4257  docker build -t mukiibi:postgres_image .
 4258  docker rm -f $(docker ps -a -q)
 4259  docker-compose up
 4260  git log
 4261  cd Desktop
 4262  ll
 4263  cd bucketlist_api
 4264  ll
 4265  git log
 4266  git reset HEAD 1ccbc9260f7462533ab1ba37099ab4ba4716cfa1
 4267  git status
 4268  code .
 4269  docker build -t mukiibi:postgres_image .
 4270  docker-compose up
 4271  docker rm -f $(docker ps -a -q)
 4272  docker-compose up
 4273  docker rm -f $(docker ps -a -q)
 4274  docker-compose up
 4275  docker build -t mukiibi:postgres_image .
 4276  docker-compose up
 4277  docker rm -f $(docker ps -a -q)
 4278  docker-compose up
 4279  git commit
 4280  git status
 4281  git log
 4282  git reset --hard 1ccbc9260f7462533ab1ba37099ab4ba4716cfa1
 4283  code .
 4284  git log
 4285  git status
 4286  docker rm -f $(docker ps -a -q)
 4287  git status
 4288  docker-compose up
 4289  docker build -t mukiibi:postgres_image .
 4290  docker-compose up
 4291  docker build -t mukiibi:postgres_image .
 4292  docker-compose up
 4293  docker build -t mukiibi:postgres_image .
 4294  pwd
 4295  cd 
 4296  cd Desktop
 4297  ll
 4298  cd bucketlist_api
 4299  ll
 4300  cd database\ image
 4301  pwd
 4302  ll
 4303  cd database
 4304  ll
 4305  cd bucketlist
 4306  ll
 4307  pwd
 4308  cd ..
 4309  ll
 4310  cd bucketlist
 4311  ll
 4312  cd ..
 4313  ll
 4314  docker build -t mukiibi:postgres_image .
 4315  docker-compose up
 4316  docker build -t mukiibi:postgres_image .
 4317  docker-compose up
 4318  docker rm -f $(docker ps -a -q)
 4319  docker-compose up
 4320  docker rm -f $(docker ps -a -q)
 4321  docker-compose up
 4322  docker rm -f $(docker ps -a -q)
 4323  docker build -t mukiibi:postgres_image .
 4324  docker-compose up
 4325  docker rm -f $(docker ps -a -q)
 4326  docker-compose up
 4327  docker rm -f $(docker ps -a -q)
 4328  docker-compose up
 4329  docker rm -f $(docker ps -a -q)
 4330  docker-compose up
 4331  docker rm -f $(docker ps -a -q)
 4332  docker images
 4333  docker rmi -f 78a6f5d23c63   c8027f851105  84a5f99acc85   be6236141ff6    c68d83a65adb    6944db20d5f5     157fd381ddfd  842d45c3b15d    cf79ab166e02 bf5732df306f 69f66323d575    fac947b9e5be  ac4cc17f7573  d790428618fb    80571dd370b1 38b9dbc6d1fd    48c7dcd51827   2b32924a3106   929a79a97c40   35f903ffaa52   60a0cd08a0a1    99e7872ee94c  ec8de2b526ac  585d0c18a0bf  da3dd6da6bab     a77b5eaa97c2    d9b18ff30153   e2230888e8a9     2ce1d2892481     bb070f9615a6     476d09d3a0bd   57c61ed10682    6b7b0ade18d3 340cf8fd1b0e
 4334  docker images
 4335  docker rmi -f  385b4e8ac028    c18cd9377e7c   f8551f6cc55f   18ce8e327355
 4336  docker images
 4337  docker rmi -f  36cee8842b42   c7dc3bd9baec    45e56dc7e050   041d25fab8fb
 4338  docker images
 4339  docker ps oa
 4340  docker ps -a
 4341  docker rmi -f  36cee8842b42
 4342  docker ps -a
 4343  docker images
 4344  pwd
 4345  cd 
 4346  cd Desktop
 4347  cd bucketlist_api
 4348  ll
 4349  cd database\ image
 4350  ll
 4351  cd default\ postgres\ image
 4352  ll
 4353  docker build -t mukiibi:postgres_base_image .
 4354  pwd
 4355  cd
 4356  cd Desktop
 4357  cd bucketlist_api
 4358  ll
 4359  cd api\ image
 4360  ll
 4361  docker build -t mukiibi:api_base_image .
 4362  pwd
 4363  ll
 4364  docker build -t mukiibi:api_base_image .
 4365  ll
 4366  cd bucketlist
 4367  ll
 4368  cd bucketlist
 4369  ll
 4370  cd ..
 4371  ll
 4372  cd bucketlist
 4373  ll
 4374  cd ..
 4375  cd bucketlist\ 13.15.41
 4376  ll
 4377  pwd
 4378  cd
 4379  cd Desktop
 4380  cd bucketlist_api
 4381  ll
 4382  api\ image
 4383  ll
 4384  bucketlist
 4385  ll
 4386  cd ..
 4387  ll
 4388  docker build -t mukiibi:api_base_image .
 4389  docker build -t mukiibi:postgres_image .
 4390  docker build -t mukiibi:api_image .
 4391  pwd
 4392  cd
 4393  cd Desktop
 4394  ll
 4395  cd bucketlist_api
 4396  ll
 4397  cd api\ image
 4398  ll
 4399  cd bucketlist
 4400  ll
 4401  docker build -t mukiibi:api_image .
 4402  docker-compose up
 4403  docker build -t mukiibi:api_image .
 4404  docker-compose up
 4405  docker ps -a
 4406  history
 4407  docker logs --tail 100 --follow --timestamps 747920850ac9
 4408  docker build -t mukiibi:api_image .
 4409  docker rm -f $(docker ps -a -q)
 4410  docker-compose up
 4411  docker logs --tail 100 --follow --timestamps 747920850ac9
 4412  docker ps -a
 4413  docker logs --tail 100 --follow --timestamps 4a14da0b28bd
 4414  docker build -t mukiibi:api_image .
 4415  pwd
 4416  ll
 4417  docker-compose up
 4418  docker build -t mukiibi:api_base_image .
 4419  docker build -t mukiibi:api_image .
 4420  docker ps -a
 4421  docker rm -f $(docker ps -a -q)
 4422  docker-compose up
 4423  docker ps -a
 4424  docker logs --tail 100 --follow --timestamps 0ade00e39c41
 4425  docker logs --tail 100 --follow --timestamps a2fd7c796bd1
 4426  history
 4427  ping http://0.0.0.0
 4428  ping http://0.0.0.0:5000
 4429  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4430  ll
 4431  cd Desktop
 4432  ll
 4433  cd bucketlist_api
 4434  ll
 4435  git status
 4436  git add .
 4437  git commit -m " "
 4438  git commit -m "corrections made, i had fucked up the whole thing"
 4439  git push
 4440  ll
 4441  pwd
 4442  git init
 4443  git status
 4444  git add .
 4445  git commit -m "my first shot at docker and docker compose altogether"
 4446  git push
 4447  git remote add origin git@github.com:davidmukiibi/docker-compose-v2.git
 4448  git push -u origin master
 4449  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4450  psql -h 0.0.0.0 -p 5432 -U postgr --password
 4451  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4452  createdb -p 5432 -h postgres -e dockerdb
 4453  createdb -p 5432 -h localhost -e dockerdb
 4454  createdb -p 5432 -h localhost -e dockerdb -U postgres
 4455  docker rm -f $(docker ps -a -q)
 4456  docker-compose up
 4457  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4458  createdb -p 5432 -h localhost -e dockerdb -U postgres
 4459  docker ps -a
 4460  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py create_db"
 4461  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db init"
 4462  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db migrate"
 4463  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db upgrade"
 4464  docker build -t mukiibi:api_image .
 4465  docker-compose up
 4466  docker rm -f $(docker ps -a -q)
 4467  docker-compose up
 4468  docker ps -a
 4469  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4470  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py create_db"
 4471  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db init"
 4472  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db migrate"
 4473  docker exec -it bucketlistapi_amitydb_1 bash -c "python manage.py db upgrade"
 4474  docker-compose logs
 4475  docker ps -a
 4476  history
 4477  docker rm -f $(docker ps -a -q)
 4478  docker build -t mukiibi:postgres_image .
 4479  docker-compose up
 4480  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4481  docker ps -a
 4482  docker rm -f $(docker ps -a -q)
 4483  docker build -t mukiibi:postgres_image .
 4484  docker-compose up
 4485  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4486  docker rm -f $(docker ps -a -q)
 4487  docker build -t mukiibi:postgres_image .
 4488  docker-compose up
 4489  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4490  docker rm -f $(docker ps -a -q)
 4491  docker build -t mukiibi:postgres_image .
 4492  docker-compose up
 4493  docker build -t mukiibi:postgres_image .
 4494  docker-compose up
 4495  pwd
 4496  git status
 4497  git add .
 4498  git commit -m "add new changes"
 4499  git push
 4500  git status
 4501  git add api image/bucketlist
 4502  git add api\ image/bucketlist
 4503  git add atabase\ image/database/bucketlist
 4504  git add database\ image/database/bucketlist
 4505  git add untitled\ folder/api_image/bucketlist
 4506  git add untitled\ folder/database_image/database/bucketlist
 4507  git status
 4508  git add .
 4509  git commit -m "this"
 4510  git push
 4511  cd
 4512  cd Desktop
 4513  cd bucketlist_api
 4514  ll
 4515  git init
 4516  git remote add origin git@github.com:davidmukiibi/docker-compose-v2.git
 4517  git status
 4518  git add .
 4519  git commit -m "this is my first approach to docker and docker compose"
 4520  git push -u origin master
 4521  docker ps -a
 4522  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4523  docker ps -a
 4524  docker rm -f $(docker ps -a -q)
 4525  docker-compose -f docker-compose.yml up
 4526  pwd
 4527  docker-compose -f docker-compose.yml up
 4528  docker ps -a
 4529  docker pull postgres
 4530  docker build -t mukiibi:postgres_image .
 4531  docker build -t mukiibi:api_image .
 4532  docker-compose up
 4533  docker ps -a
 4534  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4535  psql -h 0.0.0.0 -p 5000 -U postgres --password
 4536  docker build -t mukiibi:postgres_image .
 4537  docker build -t mukiibi:api_image .
 4538  docker rm -f $(docker ps -a -q)
 4539  docker-compose up
 4540  psql -h 0.0.0.0 -p 5000 -U postgres --password
 4541  psql -h 0.0.0.0 -p 5432 -U postgres --password
 4542  psql -h 0.0.0.0 -p 5432 -U dbuser --password
 4543  psql -h 0.0.0.0 -p 5432 -U dockerdb --password
 4544  docker rm -f $(docker ps -a -q)
 4545  docker build -t mukiibi:postgres_image .
 4546  docker build -t mukiibi:api_image .
 4547  docker-compose up
 4548  psql -h 0.0.0.0 -p 5432 -U dockerdb --password
 4549  psql -h 0.0.0.0 -p 5432 -U docker --password
 4550  docker build -t mukiibi:postgres_image .
 4551  docker rm -f $(docker ps -a -q)
 4552  docker-compose up
 4553  psql -h 0.0.0.0 -p 5432 -U docker --password
 4554  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4555  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4556  docker build -t mukiibi:postgres_image .
 4557  docker rm -f $(docker ps -a -q)
 4558  docker-compose up
 4559  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4560  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4561  docker rm -f $(docker ps -a -q)
 4562  docker build -t mukiibi:postgres_image .
 4563  docker build -t mukiibi:api_image .
 4564  docker-compose up
 4565  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4566  docker images
 4567  docker rmi -f  0a11a2170175  8052e29ec134   462c172462b6  77db45f57d3f  87ef3e28d8a1 8f832401604c  e2c356273ad4  6b1567543e77  6f551e0cf4b2  34587bc6bf25  c8fb71d19dc6  9500ceb54f03  ac3dd0f6f293 dbdb609d50ad  93d452d18810   41761d719543  7b5cbe23b2bf    405eed0eacb6   7930e75c94ac 38090930d8d0  c50421f80569  520a0b7476fe  cd4093687795 66747d39f188 6d3a40fe78ff  c6bb72a30a22 f383434193ce 188bbde1bc24  70a7c17cc5a7  8e9ef9f009b3 23f84dfb0e3e
 4568  docker images
 4569  docker-compose up --force-recreate
 4570  docker rm -f $(docker ps -a -q)
 4571  docker-compose up --force-recreate
 4572  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4573  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4574  docker rm -f $(docker ps -a -q)
 4575  docker build -t mukiibi:postgres_image .
 4576  docker run -it postgres
 4577  ping google.com
 4578  pwd
 4579  cd Desktop
 4580  ll
 4581  mkdir new_test_folder
 4582  cd new_test_folder
 4583  touch new.txt
 4584  vim new.txt
 4585  touch another.txt
 4586  cat new.txt
 4587  cat another.txt
 4588  cat new.txt >> another.txt
 4589  cat another.txt
 4590  cat new.txt >> another.txt
 4591  cat another.txt
 4592  vim new.txt
 4593  touch new_guy.txt
 4594  vim new_guy.txt
 4595  cat new_guy.txt >> another.txt
 4596  cat another.txt
 4597  cat new_guy.txt > another.txt
 4598  cat another.txt
 4599  docker build -t mukiibi:postgres_image .
 4600  docker build -t mukiibi:api_image .
 4601  docker-compose up
 4602  docker build -t mukiibi:api_image .
 4603  docker-compose up
 4604  docker build -t mukiibi:api_image .
 4605  docker-compose up
 4606  docker ps -a
 4607  docker logs --tail 100 --follow --timestamps 23fe9466125c
 4608  docker build -t mukiibi:api_image .
 4609  docker-compose up
 4610  docker ps -a
 4611  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4612  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4613  docker build -t mukiibi:api_image .
 4614  docker build -t mukiibi:postgres_image .
 4615  docker rm -f $(docker ps -a -q)
 4616  docker-compose up
 4617  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4618  psql -h 0.0.0.0 -p 5432 -d docker -U postgres
 4619  psql -h localhost -p 5432 -d docker -U postgres
 4620  docker build -t mukiibi:postgres_image .
 4621  docker rm -f $(docker ps -a -q)
 4622  docker-compose up
 4623  psql -h localhost -p 5432 -d docker -U postgres
 4624  docker-compose up --scale=5
 4625  docker-compose up --amitydb=5
 4626  docker ps -a
 4627  docker-compose up --help
 4628  docker-compose up --scale amitydb=5
 4629  docker ps -a
 4630  docker-compose up --scale amityapi=5
 4631  docker ps -a
 4632  docker rm -f $(docker ps -a -q)
 4633  docker-compose up -d amitydb
 4634  $ docker-compose run --rm amitydb1 /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.init_db()'"\n
 4635  docker-compose run --rm amitydb1 /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.init_db()'"\n
 4636  docker-compose run --rm amitydb /bin/bash -c "cd /opt/services/flaskapp/src && python -c  'import manage; manage.init_db()'"\n
 4637  docker-compose run --rm amitydb /bin/bash -c "cd /opt/services/amitydb/src && python -c  'import manage; manage.init_db()'"\n
 4638  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.init_db()'"\n
 4639  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4640  docker build -t mukiibi:postgres_image .
 4641  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4642  docker build -t mukiibi:postgres_image .
 4643  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4644  docker build -t mukiibi:postgres_image .
 4645  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4646  docker build -t mukiibi:postgres_image .
 4647  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4648  docker-compose up -d amitydb
 4649  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4650  docker ps -a
 4651  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4652  docker-compose run -h localhost -p 5432 --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4653  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4654  docker ps -a
 4655  docker-compose run --rm bucketlistapi_amitydb_1 /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4656  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4657  docker-compose up -d amitydb
 4658  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4659  docker build -t mukiibi:postgres_image .
 4660  docker build -t mukiibi:api_image .
 4661  docker build -t mukiibi:postgres_image .
 4662  docker-compose run --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4663  docker-compose up
 4664  docker-compose up --network amity
 4665  docker-compose run --network amity --rm amitydb /bin/bash -c "cd /app/amity/bucketlist && python -c  'import manage; manage.create_db()'"\n
 4666  docker-compose up
 4667  psql -h localhost -p 5432 -d docker -U postgres
 4668  psql -h localhost -p 5432 -d docker -U docker
 4669  docker build -t mukiibi:postgres_image .
 4670  docker build -t mukiibi:api_image .
 4671  docker build -t mukiibi:postgres_image .
 4672  docker-compose up -d amitydb
 4673  docker ps -a
 4674  psql -h localhost -p 5432 -d docker -U docker
 4675  docker-compose logs
 4676  psql -h localhost -p 5432 -d docker
 4677  psql -h localhost -p 5432 -d docker -U postgres
 4678  psql -h localhost -p 5432 -d postgres -U postgres
 4679  docker-compose logs
 4680  docker build -t mukiibi:postgres_image .
 4681  docker-compose up amitydb
 4682  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4683  docker ps -a
 4684  docker rm -f $(docker ps -a -q)
 4685  docker ps -a
 4686  docker-compose up
 4687  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4688  docker build -t mukiibi:postgres_image .
 4689  docker rm -f $(docker ps -a -q)
 4690  docker build -t mukiibi:postgres_image .
 4691  docker-compose up
 4692  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4693  docker build -t mukiibi:postgres_image .
 4694  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 4695  history
 4696  docker rm -f $(docker ps -a -q)
 4697  docker build -t mukiibi:postgres_image .
 4698  docker-compose up\n: 1517576271:0;docker-compose up
 4699  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4700  docker rm -f $(docker ps -a -q)
 4701  docker-compose up
 4702  docker rm -f $(docker ps -a -q)
 4703  docker build -t mukiibi:postgres_image .
 4704  docker-compose up
 4705  psql -h 0.0.0.0 -p 5432 -d postgres -U postgres --password
 4706  docker-compose up
 4707  docker rm -f $(docker ps -a -q)
 4708  docker build -t mukiibi:postgres_image .
 4709  export POSTGRES_PASSWORD=docker
 4710  export POSTGRES_USER=docker
 4711  export POSTGRES_DB=docker
 4712  export DATABASE_URL=postgresql://docker:docker@localhost:5432/docker
 4713  printenv
 4714  export POSTGRES_PASSWORD=docker 
 4715  export POSTGRES_DB=docker
 4716  export DATABASE_URL=postgresql://docker:docker@localhost:5432/docker
 4717  docker build -t mukiibi:postgres_image .
 4718  export DATABASE_URL=postgresql://docker:docker@localhost:5432/docker
 4719  docker build -t mukiibi:postgres_image .
 4720  docker-compose up
 4721  psql -h 0.0.0.0 -p 5432 -d postgres -U postgres --password
 4722  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4723  docker-compose up
 4724  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4725  docker build -t mukiibi:postgres_image .
 4726  docker rm -f $(docker ps -a -q)
 4727  docker-compose up
 4728  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4729  docker build -t mukiibi:postgres_image .
 4730  docker rm -f $(docker ps -a -q)
 4731  docker-compose up
 4732  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4733  docker build -t mukiibi:postgres_image .
 4734  docker-compose up
 4735  docker build -t mukiibi:postgres_image .
 4736  docker-compose up
 4737  docker rm -f $(docker ps -a -q)
 4738  docker-compose up
 4739  docker build -t mukiibi:postgres_image .
 4740  docker-compose up
 4741  docker rm -f $(docker ps -a -q)
 4742  docker-compose up
 4743  docker rm -f $(docker ps -a -q)
 4744  docker run -d --name my_db -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=docker docker
 4745  docker run -d --name my_db -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=docker mukiibi:postgres_image
 4746  docker run -d --name api --link mukiibi:my_db mukiibi:api_image
 4747  docker run -d --name api --link my_db mukiibi:api_image
 4748  docker exec -it api bash
 4749  docker ps -a
 4750  docker build -t mukiibi:postgres_image .
 4751  docker-compose up
 4752  docker run -d --name my_db -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=docker mukiibi:postgres_image
 4753  docker rm -f $(docker ps -a -q)
 4754  docker run -d --name my_db -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=docker mukiibi:postgres_image
 4755  docker run -d --name api --link my_db mukiibi:api_image
 4756  docker ps -a
 4757  docker build -t mukiibi:api_image .
 4758  docker rm -f $(docker ps -a -q)
 4759  docker run -d --name my_db -e POSTGRES_PASSWORD=docker -e POSTGRES_USER=docker mukiibi:postgres_image
 4760  docker run -d --name api --link my_db mukiibi:api_image
 4761  docker ps -a
 4762  docker-compose up
 4763  ping google.com
 4764  pwd
 4765  ll
 4766  docker build -t mukiibi:api_image .
 4767  docker-compose up
 4768  docker build -t mukiibi:api_image .
 4769  docker-compose up
 4770  docker-compose up --focre-recreate
 4771  docker-compose up --force-recreate
 4772  docker build -t mukiibi:api_image .
 4773  docker-compose up --force-recreate
 4774  docker build -t mukiibi:api_image .
 4775  docker rm -f $(docker ps -a -q)
 4776  docker-compose up --force-recreate
 4777  docker build -t mukiibi:api_image .
 4778  docker-compose up --force-recreate
 4779  docker build -t mukiibi:api_image .
 4780  docker-compose up --force-recreate
 4781  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 4782  pwd
 4783  exit
 4784  pwd
 4785  cd Desktop
 4786  ll
 4787  cd finalamity
 4788  ll
 4789  cd checkPointII
 4790  l
 4791  ll
 4792  code .
 4793  docker build .
 4794  ping google.com
 4795  exit
 4796  docker build .
 4797  ping google.com
 4798  docker build .
 4799  docker build -t mukiibi:base_image .
 4800  cd Desktop
 4801  cd finalamity
 4802  ll
 4803  cd checkPointII
 4804  ll
 4805  docker build .
 4806  docker build -t mukiibi:base_image .
 4807  docker images
 4808  docker rmi -f 1bac19818796  e4d8be58c6fc  bc27fadde34e   8ec6facf6082    940c1e261625   79224200b39e   0d0692291011   e9d8d4a5a9d0  7ba7d679c7e4   be90862677ee      d3d20387b266   f87bd7f2af7a   fbfcab9d3b1f       dadf51bee95c       2d64b25a58ec   20c43352ec81    3ccc624e9421   dcf72de74b9f   3841474aa2f3   b243d87d72c6   41a9760c9766       cfa8f242bd7d    6935e2c694d9      f34a3235454e   40eb9e74616e  c14b4211b56e   833ba02b86b3   9e337e813beb   fd60c6475004   1fb55f44dd76  52866672f65c  1fb46888e6ce    6d6dc883a4e1     76e35808cb58    422cdfbfc00e     8592191f16e8  b836db3a5ae9   1b53485dc1d0    d6cd87ebfc5b   959f14c29679   9d560d3519c8    4c4ed7a1f5eb   234e22d4c051  43003cc42c7a  c14aa8874ac5     b2c237da7d14    a2e04085b75d   30582faba3a0    879e5e270a07  72cdebd707a3  16cf2d7d7334    9d8a625c6923  a59a6ec5782f    1337d9ee16bb    236a7eb63692  1161ac0011e2  962990e3683b    60abd2759332   0ae8b75792f8        39e13f3459bb    7441d87ba462
 4809  docker images
 4810  docker rmi -f   363bfea2c3ed    06e7ba2dca1e   e5eb57409b5e   0587567e76b7    6c46e7957aac   1c46032aebbe
 4811  docker images
 4812  docker build .
 4813  pwd
 4814  cd /Users/davidmukiibi/Desktop/finalamity/checkPointII
 4815  docker build .
 4816  cd /Users/davidmukiibi/Desktop/finalamity/checkPointII
 4817  docker build .
 4818  docker build -t mukiibi:test_image
 4819  docker build -t mukiibi:test_image .
 4820  docker run -it mukiibi:test_image
 4821  cd Desktop
 4822  cd finalamity
 4823  ll
 4824  cd checkPointII
 4825  ll
 4826  docker build -t mukiibi:final_image
 4827  docker build -t mukiibi:final_image .
 4828  history
 4829  docker images
 4830  docker build -t mukiibi:final_image .
 4831  docker ps -a
 4832  docker stop ae833f6cd5b7
 4833  docker ps -a
 4834  docker build -t mukiibi:final_image .
 4835  export PG_PASSOWRD=password
 4836  docker build -t mukiibi:final_image .
 4837  pwd
 4838  docker build -t mukiibi:final_image .
 4839  ll
 4840  docker build -t mukiibi:final_image .
 4841  cd Desktop
 4842  ls
 4843  cd finalamity
 4844  ll
 4845  cd checkPointII
 4846  ls
 4847  docker build -t mukiibi:final .
 4848  vim Dockerfile
 4849  docker build -t mukiibi:final_image .
 4850  docker build .
 4851  docker build -t mukiibi:base_image .
 4852  ping google.com
 4853  docker build -t mukiibi:base_image .
 4854  docker images
 4855  docker build -t mukiibi:base_image .
 4856  docker build -t mukiibi:final_image .
 4857  docker build -t mukiibi:base_image .
 4858  ping google.com
 4859  docker images
 4860  docker run -it python
 4861  docker run -it mukiibi:api_image
 4862  docker run -it ubuntu
 4863  exit
 4864  docker ps -a
 4865  docker build -t mukiibi:base_image .
 4866  pwd
 4867  docker build -t mukiibi:base_image .pwd
 4868  pwd
 4869  docker build -t mukiibi:base_image .
 4870  docker build -t mukiibi:final .
 4871  docker ps -a
 4872  docker build -t mukiibi:final .
 4873  history
 4874  docker rm -f $(docker ps -a -q)
 4875  docker images
 4876  docker rmi -f    f4b03deddd82  e731936905d8      bbb7b364bc12   444c6e1d015d       c69d72386d5a  912f7796a5c1  324e84d52bda
 4877  docker images
 4878  docker rmi -f    665247864da1  35447109f685     fe49174acb24    a1da770a7314   42ccad108a35   0c0927bdc0cf  254e38b3d07e e1c919e77e46
 4879  docker images
 4880  docker rmi -f        a3c115c5504c  d06897fa7082  1119b4e7b05f    5d90e17cbb08   44470bcfd628   b25bf4a6d876
 4881  docker build -t mukiibi:final .
 4882  docker images
 4883  docker rmi -f 714b29d9c615   80f9c9b390e1   ebd70995ba4e   965d538f5654  8d231bf39dcc  e683c74d434b   1c8edae79129    9baef648b85d    b05e57a282f4  ff47cee868f5  358555de2c1f  75f7f0761c03  1af6c8ec1547    fafcf266521a      3f5dc71efefc    50999a2634af    410966855ce3   764dfff5d39c   4e0abf61fd03   5b6fd41b7db2  1bc3fe795b7b       417e58312675   f7996ba53d3a  4e2341563cd2
 4884  docker build -t mukiibi:final .
 4885  docker images
 4886  docker ps -a
 4887  docker images
 4888  docker ps -a
 4889  docker images
 4890  docker build -t mukiibi:base_image .
 4891  docker build -t mukiibi:final .
 4892  docker run -it mukiibi:final
 4893  docker build -t mukiibi:final .
 4894  sudo -u postgres createdb test_database
 4895  docker build -t mukiibi:final .
 4896  ll
 4897  cd ..
 4898  pwd
 4899  ll
 4900  cd checkPointII
 4901  ls
 4902  docker build -t mukiibi:final .
 4903  docker run -it mukiibi:final
 4904  docker build -t mukiibi:final .
 4905  docker run -it mukiibi:final
 4906  docker build -t mukiibi:final .
 4907  docker run -it mukiibi:final
 4908  docker build -t mukiibi:final .
 4909  docker run -it mukiibi:final
 4910  docker ps -a
 4911  docker run -it mukiibi:final
 4912  docker ps -a
 4913  docker logs
 4914  docker logs e0b938071195
 4915  docker start -ai e0b938071195
 4916  docker ps -a
 4917  docker build -t mukiibi:final .
 4918  docker run -it mukiibi:final
 4919  docker ps -a
 4920  docker run -it -p 5000:5000 mukiibi:final
 4921  docker ps -a
 4922  docker rm 638617faa3ea 71683fbea5b9 e39c8ae7d493 bea0c9414dae 
 4923  docker ps -a
 4924  docker rm 801de62e3c75 9a407b0e8cc6 5dd3868b0426 ff205347ce23 7462956b707b b158361cdc74
 4925  docker ps -a
 4926  docker rm 77c576053c57 b1a3661c17f7 7326d4473978 647f3b1bac99 2699bb68a336
 4927  docker ps -a
 4928  docker rm 5e72f9d3382b df276232abd7 4d3542b1ee17 d622d9f6f02c 27fae01810a4 8ec4df18f2e5
 4929  docker ps -a
 4930  docker rm 629f54b5fb16
 4931  docker rm 72122087a4a7 2189e3c5a2d9 17d4f0cf7c42
 4932  docker rm 629f54b5fb16
 4933  docker ps -a
 4934  docker run -it -p 5000:5000 -h localhost mukiibi:final
 4935  sudo iptables -t nat -L -n
 4936  docker build -t mukiibi:final .
 4937  docker run -it --publish-all=true  mukiibi:final
 4938  docker ps -a
 4939  docker run -it -P 5000:5000  mukiibi:final
 4940  docker run -it -p 5000:5000  mukiibi:final
 4941  docker run -it -p 127.0.0.1:5000:5000  mukiibi:final
 4942  ping 127.0.0.1
 4943  ping 127.0.0.1:5000
 4944  nmap -p 5000 127.0.0.1
 4945  docker logs
 4946  docker ps -a
 4947  docker logs 2baab061acc3
 4948  docker ps -a
 4949  pwd
 4950  cd PROJECTS
 4951  ll
 4952  cd checkPointII
 4953  workon checkpoint2
 4954  ll
 4955  python run.py
 4956  export APP_SETTING=development
 4957  python run.py
 4958  docker ps -a
 4959  python run.py
 4960  cd ..
 4961  ll
 4962  cd iPhoneBucketlist
 4963  ls
 4964  cd ..
 4965  cd Bucketlists
 4966  ls
 4967  cd Bucketlists
 4968  ls
 4969  cd ..
 4970  ls
 4971  cd bucketlist
 4972  ls
 4973  cd ..
 4974  ls
 4975  git clone git@github.com:davidmukiibi/bucketlist-ios-.git
 4976  ls
 4977  cd bucketlist-ios-
 4978  ls
 4979  workon checkpoint2
 4980  python run.py
 4981  code .
 4982  pwd
 4983  ls
 4984  docker build -t mukiibi:final1 .
 4985  docker build -t mukiibi:final1 .\n: 1517865710:0;docker build -t mukiibi:final1 .
 4986  docker run -it -p 127.0.0.1:5000:5000  mukiibi:final
 4987  docker ps -a
 4988  pwd
 4989  docker build -t mukiibi:final1 .
 4990  docker run -it -p 127.0.0.1:5000:5000  mukiibi:final1
 4991  docker ps -a
 4992  docker build -t mukiibi:final2 .
 4993  docker run -it -p 127.0.0.1:5000:5000  mukiibi:final1
 4994  docker run -it -p 5000:5000  mukiibi:final1
 4995  pwd
 4996  python run.py
 4997  docker run -it -p 5000:5000  mukiibi:final2
 4998  python manage.py db upgrade
 4999  python run.py
 5000  python manage.py db init
 5001  python manage.py db migrate
 5002  python manage.py db upgrade
 5003  python manage.py db init
 5004  python manage.py db upgrade
 5005  python run.py
 5006  pwd
 5007  cd Desktop
 5008  ls
 5009  ll
 5010  cd bucketlist_api
 5011  ls
 5012  ll
 5013  code .
 5014  docker-compose build amitydb
 5015  docker-compose up amitydb
 5016  docker images
 5017  pwd
 5018  ls
 5019  ll
 5020  cd /Users/davidmukiibi/Desktop/bucketlist_api
 5021  /Users/davidmukiibi/Desktop/bucketlist_api
 5022  cd api\ image
 5023  database\ image
 5024  docker images
 5025  docker ps -a
 5026  docker rm -f 5ee5e12645e5 2ffdb9f50972d0943db245e7d132a946b5d85ab28e27533be7359f1b16b225403a0496a02baab061acc3ae8536325ba9587b27d7a28d343846b9c708d2cfc9ea7a62faaf22b6d7fd
 5027  history
 5028  docker rm -f $(docker ps -a -q)
 5029  docker ps -a
 5030  docker images
 5031  docker rmi -f       2ee0c7eed737  2c806c241e7b    c54be3e766b3   2593a8651965   fd101e1981ae   bd15cc861c3d   9829c12e5f20    e70bb44fb60a    aa4443c0309e   d5665f57e402      f97f4d570b13       65e62895749b     55ed365830d6        7db72857fe6e        226e7a5e2f63      681c9e2cab06  0a1461d78bd8 f0f6a20e808c   e6186352c812      9ff0d73c155f     cede33617454    61d01a2c28bf       d7279f90b084       7f630bea8e94   38e15f5161bf   7f630bea8e94    4cc091e78d27   30c7c199033f     f505fe924ee7    874b0c485814  d9c279ae0ae2   d9c0448d253a    34dead85ca5a    8ff1900f4efe    ede9a093b662  206cf2d99837   f859d53264c6   87b5fec929f2   1f1df84d571c   6c21cbcb9113    ee5af895b734  1818c24505a7   35accc189ef1   179906285f86  ade939dd9f94
 5032  docker images
 5033  ll
 5034  docker build -t mukiibi:api_base .
 5035  ll
 5036  cd default\ postgres\ image
 5037  vim Dockerfile
 5038  docker build -t mukiibi:database_base .
 5039  ls
 5040  cd bucketlist
 5041  ls
 5042  vim Dockerfile
 5043  cd instance/
 5044  vim config.py
 5045  cd ..
 5046  ls
 5047  ll
 5048  vim create_user_db.sh
 5049  cd ..
 5050  ls
 5051  vim Dockerfile
 5052  cd bucketlist
 5053  ls
 5054  cd instance
 5055  ls
 5056  cd ..
 5057  vim Dockerfile
 5058  ls
 5059  vim entry.sh
 5060  vim Dockerfile
 5061  pwd
 5062  ll
 5063  docker build -t mukiibi:api_final .
 5064  ls
 5065  cd ..
 5066  ls
 5067  cd d
 5068  cd database
 5069  ls
 5070  vim Dockerfile
 5071  vim create_user_db.sh
 5072  vim Dockerfile
 5073  pwd
 5074  ll
 5075  docker build -t mukiibi:database_final .
 5076  vim Dockerfile
 5077  docker build -t mukiibi:database_final .
 5078  vim Dockerfile
 5079  docker build -t mukiibi:database_final .
 5080  vim Dockerfile
 5081  docker build -t mukiibi:database_final .
 5082  vim Dockerfile
 5083  docker build -t mukiibi:database_final .
 5084  vim Dockerfile
 5085  docker build -t mukiibi:database_final .
 5086  vim Dockerfile
 5087  docker build -t mukiibi:database_final .
 5088  vim Dockerfile
 5089  docker build -t mukiibi:database_final .
 5090  vim Dockerfile
 5091  docker build -t mukiibi:database_final .
 5092  vim Dockerfile
 5093  docker build -t mukiibi:database_final .
 5094  vim Dockerfile
 5095  docker build -t mukiibi:database_final .
 5096  vim Dockerfile
 5097  docker build -t mukiibi:database_final .
 5098  vim Dockerfile
 5099  docker build -t mukiibi:database_final .
 5100  vim Dockerfile
 5101  docker build -t mukiibi:database_final .
 5102  vim Dockerfile
 5103  docker build -t mukiibi:database_final .
 5104  code .
 5105  cd 
 5106  cd Desktop
 5107  cd finalamity
 5108  ll
 5109  cd checkPointII
 5110  ls
 5111  ll
 5112  cd ..
 5113  ls
 5114  cd bucketlist_api
 5115  ls
 5116  ll
 5117  cd checkPointII
 5118  ll
 5119  docker build -t mukiibi:database_final .
 5120  vim docker-compose.yml
 5121  docker-compose up amitydb
 5122  vim docker-compose.yml
 5123  docker-compose up amitydb
 5124  docker ps -a
 5125  docker start -it b67f9285b176
 5126  docker start -ai b67f9285b176
 5127  vim docker-compose.yml
 5128  pwd
 5129  vim docker-compose.yml
 5130  pwd
 5131  ll
 5132  vim Dockerfile
 5133  vim docker-compose.yml
 5134  pwd
 5135  vim docker-compose.yml
 5136  docker start -ai b67f9285b176
 5137  history
 5138  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 5139  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 5140  ll
 5141  psql -h 0.0.0.0 -p 5432 -U postgres --password
 5142  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 5143  psql -h 0.0.0.0 -p 5432 -d docker -U docker --password
 5144  docker images
 5145  docker run -it  df1d6ade7a15
 5146  docker ps -a
 5147  vim docker-compose.yml
 5148  docker-compose up amity_db
 5149  docker-compose up amitydb
 5150  vim Dockerfile
 5151  docker build -t mukiibi:database_final .
 5152  docker-compose up amitydb
 5153  vim Dockerfile
 5154  pwd
 5155  ll
 5156  vim docker-compose.yml
 5157  docker-compose up amitydb
 5158  docker ps -a
 5159  docker logs 89bcc96b3dd4
 5160  docker-compose build .
 5161  docker-compose build
 5162  docker-compose up
 5163  ll
 5164  pwd
 5165  docker images
 5166  pwd
 5167  ll
 5168  docker build -t mukiibi:api_final .
 5169  ll
 5170  docker-compose up
 5171  docker-compose run --rm database_final /bin/bash -c "cd /opt/services/database_final/src && python -c  'import manage.py; python manage.py db upgrade'"
 5172  docker-compose run --rm amitydb /bin/bash -c "cd /opt/services/database_final/src && python -c  'import manage.py; python manage.py db upgrade'"
 5173  docker-compose run --rm amitydb /bin/bash -c "cd /opt/services/amitydb/src && python -c  'import manage.py; python manage.py db upgrade'"
 5174  pwd
 5175  cd ..
 5176  ll
 5177  cd checkPointII
 5178  ll
 5179  pwd
 5180  docker-compose run --rm amitydb /bin/bash -c "cd /app/bucketlist_api/checkPointII/amitydb && python -c  'import manage.py; python manage.py db upgrade'"
 5181  docker-compose up -d db
 5182  docker-compose up -d amitydb
 5183  docker-compose run --rm amitydb /bin/bash -c "cd /app/bucketlist_api/checkPointII/amitydb && python -c  'import manage.py; python manage.py db upgrade'"
 5184  docker-compose run --rm amitydb /bin/bash -c "cd /bucketlist_api/checkPointII/amitydb && python -c  'import manage.py; python manage.py db upgrade'"
 5185  pwd
 5186  ll
 5187  vim Dockerfile
 5188  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage.py; python manage.py db upgrade'"
 5189  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage; python manage.py db upgrade'"
 5190  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage; python manage.creat_all()'"
 5191  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage; manage.create_all()'"
 5192  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage; manage.createall()'"
 5193  ll
 5194  vim manage.py
 5195  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'import manage; manage.create_db()'"
 5196  docker-compose run --rm amitydb /bin/bash -c "cd / && python -c  'python manage.py db upgrade'"
 5197  docker-compose run --rm amitydb /bin/bash -c "cd / && /bin/bash -c  'python manage.py db upgrade'"
 5198  docker-compose run --rm amitydb /bin/bash -c "cd / && /bin/bash -c  '/etc/init.d/postgresql start && python manage.py db upgrade'"
 5199  docker ps -a
 5200  docker-compose up
 5201  ll
 5202  cd ..
 5203  ll
 5204  cd api\ image
 5205  ll
 5206  cd bucketlist
 5207  ll
 5208  vim Dockerfile
 5209  cd instance
 5210  vim config.py
 5211  history
 5212  docker ps -a
 5213  docker-compose up
 5214  docker ps -a
 5215  vim docker-compose.yml
 5216  pwd
 5217  vim Dockerfile
 5218  docker build -t mukiibi:database_final .
 5219  vim docker-compose.yml
 5220  docker-compose up amitydb
 5221  docker ps -a
 5222  docker-compose run --rm amitydb /bin/bash -c "cd / && /bin/bash -c  '/etc/init.d/postgresql start && python manage.py db upgrade'"
 5223  vim docker-compose.yml
 5224  docker-compose up
 5225  docker ps -a
 5226  vim docker-compose.yml
 5227  docker-compose up
 5228  docker ps -a
 5229  vim docker-compose.yml
 5230  docker-compose up
 5231  docker ps -a
 5232  history
 5233  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 5234  docker ps -a
 5235  psql -h 0.0.0.0 -p 5432 -d docker -U postgres --password
 5236  docker ps -a
 5237  history
 5238  ll
 5239  vim Dockerfile
 5240  docker ps -a
 5241  docker-compose stop
 5242  docker ps -a
 5243  history
 5244  docker rm -f $(docker ps -a -q)
 5245  exit
 5246  python run.py
 5247  docker images
 5248  docker rmi -f   834989a24156      cb62e9d1d03e  f7d1bf618e47    aae63a73172f       5867b18f009b   a839bdfd5b0a  a2a8d4d1c7b5  28391ee02456       d330e31ceb43   0bb936c8b09a   aa8388d0d96av   aa8388d0d96a    4b4b9f52539e  eef85577300b 8a99600466e7
 5249  docker images
 5250  docker rmi -f 94bc0cddfa0a
 5251  docker images
 5252  pwd
 5253  docker images
 5254  docker build -t mukiibi:final .
 5255  exit
 5256  docker run -it -p 127.0.0.1:5000:5000  mukiibi:final
 5257  history
 5258  nmap -p 5000 127.0.0.1
 5259  nmap -p 5001 127.0.0.1
 5260  nmap -p 5432 127.0.0.1
 5261  nmap -p 5001 127.0.0.1
 5262  nmap -p 5000 127.0.0.1
 5263  nmap -p 50000 127.0.0.1
 5264  nmap -p 5000 127.0.0.1
 5265  nmap -p 127.0.0.1
 5266  docker ps -a
 5267  nmap -p 32770 127.0.0.1
 5268  pw
 5269  pwd
 5270  ll
 5271  touch docker-compose.yml
 5272  code .
 5273  docker-compose up
 5274  pwd
 5275  ll
 5276  cd checkPointII/
 5277  ll
 5278  docker-compose up
 5279  docker-compose logs
 5280  minikube version
 5281  kubectl version
 5282  minikube start
 5283  kubectl get nodes
 5284  kubectl cluster-info
 5285  kubectl versio
 5286  kubectl version
 5287  kubectl cluster-info dump
 5288  kubectl get nodes
 5289  kubectl run kubernetes-bootcamp --image=docker.io/jocatalin/kubernetes-bootcamp:v1 --port=8080
 5290  kubectl get nodes
 5291  kubectl get deployments
 5292  kubectl get nodes
 5293  kubectl get pods
 5294  kubectl describe pods
 5295  kubectl describe deployments
 5296  kubectl proxy
 5297  export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
 5298  echo Name of the Pod: $POD_NAME
 5299  curl http://localhost:8001/api/v1/proxy/namespaces/default/pods/$POD_NAME/
 5300  kubectl logs $POD_NAME
 5301  curl http://localhost:8001/api/v1/proxy/namespaces/default/pods/$POD_NAME/
 5302  kubectl logs $POD_NAME
 5303  curl http://localhost:8001/api/v1/proxy/namespaces/default/pods/$POD_NAME/
 5304  kubectl logs $POD_NAME
 5305  kubectl exec $POD_NAME env
 5306  kubectl exec -ti $POD_NAME bash
 5307  history
 5308  kubectl get services
 5309  kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
 5310  kubectl get services
 5311  kubectl describe services/kubernetes-bootcamp
 5312  export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
 5313  echo NODE_PORT=$NODE_PORT
 5314  curl host01:$NODE_PORT
 5315  curl 10.100.126.70:$NODE_PORT
 5316  curl 127.17.0.4:$NODE_PORT
 5317  kubectl descirbe node
 5318  kubectl describe node
 5319  kubectl describe pods
 5320  curl 192.168.99.100:$NODE_PORT
 5321  kubectl get pods -l run=kubernetes-bootcamp
 5322  kubectl describe pods -l run=kubernetes-bootcamp
 5323  kubectl get services -l run=kubernetes-bootcamp
 5324  kubectl label pod $POD_NAME app=v1
 5325  kubectl describe pods -l run=kubernetes-bootcamp
 5326  kubectl get services -l app=v1
 5327  kubectl get pods -l app=v1
 5328  kubectl get pods -l app=v
 5329  kubectl get services
 5330  kubectl delete services -l app=v1
 5331  kubectl delete service -l app=v1
 5332  kubectl get pods -l app=v1
 5333  kubectl describe pods -l run=kubernetes-bootcamp
 5334  kubectl describe serices -l run=kubernetes-bootcamp
 5335  kubectl describe services -l run=kubernetes-bootcamp
 5336  kubectl describe services -l app=v1
 5337  kubectl delete service -l run=kubernetes-bootcamp
 5338  kubectl describe services -l run=kubernetes-bootcamp
 5339  kubectl describe pods -l run=kubernetes-bootcamp
 5340  kubectl get services
 5341  kubectl describe hello-minikube
 5342  kubectl describe service hello-minikube
 5343  kubectl delete service --help
 5344  curl 192.168.99.100:$NODE_PORT
 5345  history
 5346  kubectl get deployments
 5347  kubectl scale deployments/kubernetes-bootcamp --replicas=4
 5348  kubectl get deployments
 5349  kubectl get pods
 5350  kubectl get pods -o wide
 5351  kubectl describe deployments/kubernetes-bootcamp
 5352  kubectl describe services/kubernetes-bootcamp
 5353  kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
 5354  kubectl describe services/kubernetes-bootcamp
 5355  kubectl describe services/kubernetes-bootcamp -o wide
 5356  kubectl scale deployments/kubernetes-bootcamp --replicas=2
 5357  kubectl describe services/kubernetes-bootcamp -o wide
 5358  kubectl describe services/kubernetes-bootcamp
 5359  kubectl get pods
 5360  kubectl get deployments
 5361  kubectl get pods
 5362  kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
 5363  kubectl get pods
 5364  kubectl rollout status deployments/kubernetes-bootcamp
 5365  kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v10
 5366  kubectl get deployments
 5367  kubectl describe deployments
 5368  kubectl describe pods
 5369  kubectl ge pods
 5370  kubectl get pods
 5371  brew install xhyve
 5372  echo $PATH
 5373  curl --proxy "" https://cloud.google.com/container-registry/
 5374  minikube start --vm-driver=xhyve
 5375  ~/.kube/config
 5376  sudo ~/.kube/config
 5377  vim ~/.kube/config
 5378  kubectl cluster-info
 5379  pwd
 5380  cd Desktop
 5381  mkdir kubernetes
 5382  cd kubernetes
 5383  mkdir hellonode
 5384  cd hellonode
 5385  pwd
 5386  touch server.js
 5387  vim server.js
 5388  node server.js
 5389  touch Dockerfile
 5390  vim Dockerfile
 5391  eval $(minikube docker-env)
 5392  echo eval $(minikube docker-env)
 5393  docker build -t hello-node:v1 .
 5394  docker images
 5395  kubectl run hello-node --image=hello-node:v1 --port=8080
 5396  kubectl get deployments
 5397  kubectl get events
 5398  kubectl config view
 5399  history
 5400  kubectl expose deployment hello-node --type=LoadBalancer
 5401  kubectl get services
 5402  minikube service hello-node
 5403  kubectl get services
 5404  kubectl get pods
 5405  kubectl logs hello-node-9f5f775d6-ktgvs
 5406  vim server.js
 5407  docker build -t hello-node:v2 .
 5408  kubectl set image deployment/hello-node hello-node=hello-node:v2
 5409  minikube service hello-node
 5410  minikube addons list
 5411  minikube addons enable heapster
 5412  kubectl get po,svc -n kube-system
 5413  minikube addons open heapster
 5414  kubectl delete service hello-node
 5415  kubectl delete deployment hello-node\n
 5416  pwd
 5417  ll
 5418  cd ..
 5419  ll
 5420  cd checkPointII
 5421  pwd
 5422  cd Desktop
 5423  ll
 5424  cd bucketlist_api
 5425  ll
 5426  docker-compose up amitydb
 5427  docker ps -a
 5428  docker stop 3ba7e66ba400
 5429  pwd
 5430  cd ..
 5431  ll
 5432  cd theamityapp
 5433  cd
 5434  cd Desktop
 5435  cd theamityapp
 5436  ll
 5437  docker-compose up amitydb
 5438  ll
 5439  docker-compose
 5440  vim docker-compose.yml
 5441  docker-compose up amitydb
 5442  docker ps -a
 5443  vim docker-compose.yml
 5444  ll
 5445  cd database\ image
 5446  ll
 5447  cd database
 5448  ll
 5449  vim Dockerfile
 5450  vim start_postgres.sh
 5451  vim Dockerfile
 5452  docker ps -a
 5453  docker exec --help
 5454  docker exec -i --help
 5455  docker exec -it 346aba09b0c4 "python manage.py db upgrade"
 5456  docker ps -a
 5457  docker exec -it 3ba7e66ba400 "python manage.py db upgrade"
 5458  docker ps -a
 5459  docker inspect 3ba7e66ba400 | grep '"IPAddress"' | head -n 1
 5460  docker ps -a
 5461  docker stop 3ba7e66ba400
 5462  docker start 3ba7e66ba400
 5463  docker ps -a
 5464  docker inspect 3ba7e66ba400 | grep '"IPAddress"' | head -n 1
 5465  docker ps -a
 5466  docker inspect 3ba7e66ba400 | grep '"IPAddress"' | head -n 1
 5467  docker ps -a
 5468  ll
 5469  cd ..
 5470  ll
 5471  cd ..
 5472  vim docker-compose.yml
 5473  docker-compose up amitydb
 5474  docker ps -a
 5475  docker start a4cbd638447d
 5476  docker ps -a
 5477  ll
 5478  exit
 5479  cd Desktop
 5480  ll
 5481  cd bucketlist_api
 5482  ll
 5483  cd databasev2
 5484  ll
 5485  cd checkpointII
 5486  ll
 5487  touch Dockerfile
 5488  ll
 5489  code .
 5490  touch start_postgres.sh
 5491  ll
 5492  docker images
 5493  docker rmi   07ab16f0e0ed
 5494  docker rmi  -f 07ab16f0e0ed
 5495  docker build -t mukiibi:my_db .
 5496  docker images
 5497  docker build -t mukiibi:my_db .
 5498  docker images
 5499  docker rmi -f  d73b3f7f27c9     79f365d2457d  c43e6b8b9727  8feae12e06a9  066bd57bee49  b81d5ded27f7  4137c9120acb   7d49ecdc9719  7a59fa937c14  235ed73b1d35  a6e7ce19900d   43ef076e9fc5
 5500  docker images
 5501  docker rmi -f   656f83c90864    8e174519ef8f
 5502  docker images
 5503  exit
 5504  docker build -t mukiibi:my_db .
 5505  exit
 5506  x
 5507  cd Desktop
 5508  cd bucketlist_andela
 5509  cd Desktop
 5510  ll
 5511  cd bucketlist_api
 5512  ll
 5513  cd databasev2
 5514  ll
 5515  cd checkpointII
 5516  ll
 5517  docker build -t mukiibi:database_finale .
 5518  docker i mages
 5519  docker images
 5520  docker rmi -f  df1d6ade7a15
 5521  docker images
 5522  docker rmi -f    36170474b470  0654c74117f8  50af9f2ac0b2  73419750f75c    94e2284c32e8      26b526f9eb7c    1eff101aa605  e24b6b2ec88f  4b6f3c382b46  b55fb6080a35   ab5a723ce2e7  4cbffc0e79c3  f23dfda6dbd4 1fc69539b5cd   27ab66693652   d5cf7683cccb      c5dcfee81ffd   6ac544e152e1
 5523  docker images
 5524  docker rmi -f  e78bddf1428e   411ac40e1058  d4d10dcf2493 fde3405b96d8
 5525  docker images
 5526  docker build -t mukiibi:database_finale .
 5527  docker images
 5528  docker build -t mukiibi:database_finale .
 5529  docker build -t mukiibi:database_finale_base .
 5530  kubectl get nodes
 5531  kubectl get deployment
 5532  docker rmi -f f27fd5e338b9
 5533  docker rmi -f f91e74b4aaf5
 5534  docker rmi -f  e94d2f21bc0c   86a0ddc3a8c2  d166ffa9201a   4689081edb10    4689081edb10   fed89e8b4248  512cd7425a73  459944ce8cc4   577260d221db  8cb3de219af7  faaadb4aaf9b    b6556396ebd4       8fafd8af70e9  a90209bb39e3   99e59f495ffa  99e59f495ffa
 5535  kubectl get nodes
 5536  docker images
 5537  kubectl get pods
 5538  kubectl stop pods
 5539  kubectl --help
 5540  docker build -t mukiibi:database_finale_base .
 5541  kubectl delete pods
 5542  kubectl delete pods --all
 5543  kubectl get pods
 5544  kubectl delete pod kubernetes-bootcamp-5f9999f64c-b7gnl
 5545  kubectl get pods
 5546  kubectl delete pod kubernetes-bootcamp-5f9999f64c-6nhl5
 5547  kubectl delete pod kubernetes-bootcamp-7689dc585d-tngvp
 5548  kubectl get pods
 5549  kubectl get deployments
 5550  kubectl delete deployment kubernetes-bootcamp
 5551  kubectl get deployments
 5552  kubectl get pods
 5553  docker images
 5554  docker rmi -f   e94d2f21bc0c    86a0ddc3a8c2  d166ffa9201a    4689081edb10   4689081edb10    fed89e8b4248   512cd7425a73   459944ce8cc4   577260d221db   8cb3de219af7   b6556396ebd4   99e59f495ffa  99e59f495ffa
 5555  docker ps -a
 5556  docker images
 5557  docker build -t mukiibi:database_finale_base .
 5558  ping google.com
 5559  exit
 5560  ping google.com
 5561  docker images
 5562  pwd
 5563  ll
 5564  pwd
 5565  /Users/davidmukiibi/Desktop/bucketlist_api/databasev2/checkpointII
 5566  ll
 5567  docker build -t mukiibi:database_finale .
 5568  pwd
 5569  docker build -t mukiibi:database_finale .
 5570  cd /Library/Python/2.7
 5571  pwd
 5572  cd ~
 5573  cd Desktop
 5574  ll
 5575  cd bucketlist_api
 5576  ll
 5577  cd databasev2
 5578  ll
 5579  cd checkpointII
 5580  ll
 5581  docker build -t mukiibi:database_finale .
 5582  ll
 5583  docker build -t mukiibi:database_finale .
 5584  docker IMAGES
 5585  docker images
 5586  docker build -t mukiibi:database_finale .
 5587  docker run -it mukiibi:database_finale
 5588  history
 5589  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5590  docker ps -a
 5591  docker exec ll 902a7fd8e1b4
 5592  docker exec 902a7fd8e1b4 ls
 5593  docker exec 902a7fd8e1b4 python db upgrade
 5594  docker exec 902a7fd8e1b4 python db upgrade'
 5595  docker exec 902a7fd8e1b4 'python db upgrade'
 5596  docker exec 902a7fd8e1b4 'python db update'
 5597  docker exec 902a7fd8e1b4 'python version'
 5598  docker exec 902a7fd8e1b4 'python --version'
 5599  docker exec 902a7fd8e1b4 'apt-get install python-dev'
 5600  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5601  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5602  docker ps -a
 5603  history
 5604  docker rm -f $(docker ps -a -q)
 5605  docker ps -a
 5606  docker run -it mukiibi:database_finale
 5607  docker build -t mukiibi:database_finale .
 5608  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5609  docker build -t mukiibi:database_finale .
 5610  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5611  docker build -t mukiibi:database_finale .
 5612  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5613  docker build -t mukiibi:database_finale .
 5614  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5615  docker build -t mukiibi:database_finale .
 5616  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5617  docker build -t mukiibi:database_finale .
 5618  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5619  docker exec 902a7fd8e1b4 'll'
 5620  docker ps -a
 5621  docker exec 6d2933d2986e 'll'
 5622  docker exec 6d2933d2986e 'ls'
 5623  docker exec 6d2933d2986e 'python manage.py db init'
 5624  docker exec 6d2933d2986e 'postgres service start'
 5625  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5626  docker build -t mukiibi:database_finale .
 5627  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5628  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5629  psql -h 127.0.0.1 -p 5432 -U docker --password
 5630  docker build -t mukiibi:database_finale .
 5631  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5632  docker build -t mukiibi:database_finale .
 5633  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5634  docker build -t mukiibi:database_finale .
 5635  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5636  docker build -t mukiibi:database_finale .
 5637  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5638  docker build -t mukiibi:database_finale .
 5639  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5640  psql -h 127.0.0.1 -p 5432 -U docker --password
 5641  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5642  docker build -t mukiibi:database_finale .
 5643  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5644  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5645  docker build -t mukiibi:database_finale .
 5646  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5647  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5648  docker build -t mukiibi:database_finale .
 5649  docker images
 5650  docker rmi -f   2067aeb35e15       db1fee51cd27     31c5864d96ef  7eeb68a03650    d5764d58778b     65d13471e896   4c0301b9c089
 5651  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5652  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5653  docker build -t mukiibi:database_finale .
 5654  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5655  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5656  docker build -t mukiibi:database_finale .
 5657  docker images
 5658  docker rmi -f   a1c6eed647d5    bfc48f3b7650  ee342a80af70  4dcd5e9f0d7d    07eaffeb14d3  47642fa80297     515f457c90f7    a6a46fb194cc    5bc7c7e46615
 5659  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5660  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5661  docker images
 5662  docker rmi -f     13f8c91ecbd2       8a63df6b1380  2fbb129ac0d0  2b63ed8ed2a8    dc986ce782f9   15e82e0bc719   d38c704e19f0      5a3da2f8baeb
 5663  docker images
 5664  docker rmi -f     0befc4cc79a4   ea8131c769a6   605810f4c70b      47b63d420418   b9403ff2f92b  f412bccaaccf    28bad2bef095   289a6f794fff    48f8a0e1ceee     2940f058b638     855ccb0b3ad5      7d0b038bb93b     a89657ea6d2b      059994a98e19  faecfacc9090   79fd9d1f522d    a89fd23dd182   e9c4970b3245   b8a40f164478    aff03220b996    5291c5d28f96   7f446cafab52
 5665  docker images
 5666  docker build -t mukiibi:database_finale .
 5667  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5668  docker build -t mukiibi:database_finale .
 5669  docker images
 5670  docker rmi    940aef07497c   00576ec1a547   da536ab58dce
 5671  docker rmi  -f  940aef07497c   00576ec1a547   da536ab58dce
 5672  docker build -t mukiibi:database_finale .
 5673  docker rmi    940aef07497c   00576ec1a547   da536ab58dce
 5674  docker images
 5675  docker rmi -f    157979b86a7f  b18c1275c10f
 5676  docker build -t mukiibi:database_finale .
 5677  docker images
 5678  docker rmi -f    77d57718e8ef   657e0bc47bce  76f4169dd90a  6cb75a0386b6
 5679  docker build -t mukiibi:database_finale .
 5680  docker images
 5681  docker rmi -f     bf8b52eb902b        5189cb5e576e     231675bf825b
 5682  docker images
 5683  docker build -t mukiibi:database_finale .
 5684  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5685  docker build -t mukiibi:database_finale .
 5686  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5687  docker build -t mukiibi:database_finale .
 5688  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5689  docker build -t mukiibi:database_finale .
 5690  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5691  docker build -t mukiibi:database_finale .
 5692  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5693  docker build -t mukiibi:database_finale .
 5694  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5695  docker build -t mukiibi:database_finale .
 5696  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5697  docker ps -a
 5698  docker exec cd5e62870fb2 ls
 5699  docker build -t mukiibi:database_finale .
 5700  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5701  docker ps -a
 5702  docker exec dce857d43020 ls
 5703  docker build -t mukiibi:database_finale .
 5704  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5705  docker ps -a
 5706  docker exec 0db13dab721b ls
 5707  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5708  psql -h 127.0.0.1 -p 5432 -U docker --password
 5709  docker build -t mukiibi:database_finale .
 5710  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5711  pwd
 5712  cd Desktop
 5713  ll
 5714  cd migrations\ test
 5715  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5716  psql -h 127.0.0.1 -p 5432 -U docker --password
 5717  docker build -t mukiibi:database_finale .
 5718  pwd
 5719  docker build -t mukiibi:database_finale .
 5720  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5721  psql -h 127.0.0.1 -p 5432 -U docker --password
 5722  docker ps -a
 5723  psql -h 127.0.0.1 -p 5432 -U postgres --password
 5724  psql -h 0.0.0.0 -p 5432 -U postgres --password
 5725  docker ps -a
 5726  docker run -it -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5727  docker ps -a
 5728  deocker exec b797626ee7ba ls
 5729  docker exec b797626ee7ba ls
 5730  docker exec b797626ee7ba ls migrations
 5731  docker run -itd -p 127.0.0.1:5432:5432 mukiibi:database_finale
 5732  docker ps -a
 5733  docker stop
 5734  docker stop d58cb8c2e50a
 5735  docker images
 5736  docker run -it ubuntu
 5737  docker images
 5738  history
 5739  docker rm -f $(docker ps -a -q)
 5740  docker ps -a
 5741  docker ps
 5742  docker images
 5743  docker rmi -f     c579d94a0cc6   474b953a13f8          5c68bc3b2684     269f73799e1b          44d53857d6e8   2bd0e248850d  ab4d8e386d85   fea2f5fef6aa            72d307e83dcd     b3a6c7f6a6cc    9c86d4b51e42   3c15cb0346cd   2898b39a309e  74e1078584db
 5744  docker images
 5745  exit
 5746  docker run -it -p 5432:5432 mukiibi:database_finale
 5747  psql -p 5432 -U postgres 
 5748  psql -h localhost -p 5432 -U postgres 
 5749  docker build -t mukiibi:database_finale .
 5750  docker run -it -p 5432:5432 mukiibi:database_finale
 5751  psql -h localhost -p 5432 -U docker
 5752  psql -h localhost -p 5432 -U postgres
 5753  ls
 5754  cd Desktop
 5755  ll
 5756  cd new_test_folder
 5757  ll
 5758  cd ..
 5759  cd postgres_image
 5760  ll
 5761  cd ..
 5762  theamityapp
 5763  ll
 5764  cd database
 5765  ll
 5766  vim Dockerfile
 5767  cd ..
 5768  ll
 5769  ..
 5770  pwd
 5771  cd Desktop
 5772  ll
 5773  postgres_image
 5774  ll
 5775  vim Dockerfile
 5776  cd checkpointII
 5777  ll
 5778  ..
 5779  bucketlist_api
 5780  ll
 5781  cd database\ image
 5782  ll
 5783  cd database
 5784  ll
 5785  vim Dockerfile
 5786  vim start_postgres.sh
 5787  ll
 5788  cd bucketlist
 5789  ll
 5790  ..
 5791  ll
 5792  pwd
 5793  ll
 5794  docker build -t thursday_base .
 5795  ..
 5796  ll
 5797  ..
 5798  pwd
 5799  ll
 5800  cd finalamity
 5801  ll
 5802  cd checkPointII
 5803  ll
 5804  vim Dockerfile
 5805  docker build -t mukiibi:database_finale .
 5806  docker run -it -p 5432:5432 mukiibi:database_finale
 5807  docker run -p 5432:5432 mukiibi:database_finale
 5808  docker ps -a
 5809  psql -h 0.0.0.0 -p 5432 -U postgres
 5810  docker build -t mukiibi:database_finale .
 5811  docker run -p 5432:5432 mukiibi:database_finale
 5812  psql -h 0.0.0.0 -p 5432 -U postgres
 5813  docker build -t mukiibi:database_finale .
 5814  docker run -p 5432:5432 mukiibi:database_finale
 5815  psql -h 0.0.0.0 -p 5432 -U postgres
 5816  docker build -t mukiibi:database_finale .
 5817  docker run -p 5432:5432 mukiibi:database_finale
 5818  psql -h 0.0.0.0 -p 5432 -U postgres
 5819  psql -h 0.0.0.0 -p 5432 -U docker
 5820  exit
 5821  cd Desktop
 5822  ll
 5823  finalamity
 5824  ll
 5825  cd checkPointII
 5826  ll
 5827  vim Dockerfile
 5828  docker build -t mukiibi:v1 .
 5829  vim Dockerfile
 5830  docker build -t mukiibi:v1 .
 5831  vim Dockerfile
 5832  docker build -t mukiibi:v1 .
 5833  vim Dockerfile
 5834  docker build -t mukiibi:v1 .
 5835  exit
 5836  pwd
 5837  /Users/davidmukiibi/Desktop/bucketlist_api/databasev2/checkpointII
 5838  ll
 5839  ..
 5840  ll
 5841  cd checkpointII
 5842  ll
 5843  cd ..
 5844  ll
 5845  cd
 5846  cd Desktop
 5847  cd bucketlist_api
 5848  ll
 5849  cd apiv2
 5850  ll
 5851  cd api\ image
 5852  ll
 5853  cd bucketlist
 5854  ll
 5855  cd instance
 5856  vim config.py
 5857  cd ..
 5858  ll
 5859  cd ..
 5860  ll
 5861  vim Dockerfile
 5862  cd bucketlist
 5863  ll
 5864  docker build -t mukiibi:api_finale .
 5865  vim Dockerfile
 5866  ..
 5867  ll
 5868  vim Dockerfile
 5869  docker build -t mukiibi:api_finale_base .
 5870  cd bucketlist
 5871  vim Dockerfile
 5872  docker build -t mukiibi:api_finale .
 5873  cd ..
 5874  ..
 5875  ll
 5876  ..
 5877  ll
 5878  vim docker-compose.yml
 5879  docker-compose up -d
 5880  docker ps -a
 5881  docker inspect 43e1d1e0a5d2
 5882  docker ps -a
 5883  docker stop 680cd0123fa2
 5884  docker start -ai 680cd0123fa2
 5885  pwd
 5886  ll
 5887  cd apiv2
 5888  ll
 5889  cd api\ image
 5890  ll
 5891  bucketlist
 5892  ll
 5893  cd instance
 5894  ll
 5895  vim config.py
 5896  cd ..
 5897  ll
 5898  docker build -t mukiibi:api_finale .
 5899  vim create_user_db.sh
 5900  ll
 5901  vim Dockerfile
 5902  docker build -t mukiibi:api_finale .
 5903  ll
 5904  cd ..
 5905  ll
 5906  cd ..
 5907  ll
 5908  ..
 5909  ll
 5910  docker-compose up -d amityapi
 5911  docker ps -a
 5912  docker exec ac5729ce9a9b ping 172.18.0.2
 5913  ping 172.18.0.2
 5914  docker ps -a
 5915  docker stop ac5729ce9a9b
 5916  docker stop 43e1d1e0a5d2
 5917  pwd
 5918  ll
 5919  cd databasev2
 5920  ll
 5921  cd checkpointII
 5922  ll
 5923  docker run -d -p 5432:5432 --name my-postgres mukiibi:database_finale
 5924  cd ..
 5925  ll
 5926  cd ..
 5927  cd
 5928  cd Desktop
 5929  cd bucketlist_api
 5930  ll
 5931  cd apiv2
 5932  ll
 5933  api\ image
 5934  ll
 5935  cd bucketlist
 5936  ll
 5937  vim instance/config.py
 5938  docker run -d -p 5000:5000 --link my-postgres mukiibi:api_finale
 5939  docker ps -a
 5940  docker logs  7e4157476f1d
 5941  docker logs 6bace38dece4
 5942  docker logs  7e4157476f1d
 5943  pwd
 5944  cd Desktop
 5945  ll
 5946  mkdir react
 5947  cd react
 5948  npm install -g gulp-cli
 5949  ll
 5950  pwd
 5951  docker ps -a
 5952  docker exec 6bace38dece4 python manage.py db update
 5953  docker exec 6bace38dece4 python manage.py db migrate
 5954  docker exec 6bace38dece4 vim /instance/config.py
 5955  docker exec 6bace38dece4 vi /instance/config.py
 5956  docker exec 6bace38dece4 apt-get install vim
 5957  docker exec 6bace38dece4 apt-get install -y vim
 5958  docker exec 6bace38dece4 vim /instance/config.py
 5959  docker ps -a
 5960  docker stop 7e4157476f1d
 5961  cd Desktop
 5962  cd bucketlist_api
 5963  cd apiv2
 5964  ll
 5965  cd api\ image
 5966  ll
 5967  cd bucketlist
 5968  ll
 5969  vim instance/config.py
 5970  docker build -t mukiibi:api_finale
 5971  cd ..
 5972  docker build -t mukiibi:api_finale
 5973  pwd
 5974  ll
 5975  cd bucketlist
 5976  ll
 5977  docker build -t mukiibi:api_finale .
 5978  history
 5979  docker run -d -p 5000:5000 --link my-postgres mukiibi:api_finale
 5980  docker ps -a
 5981  docker exec be39900d4af4 vim /instance/config.py
 5982  docker exec be39900d4af4 apt-get install vim
 5983  docker exec be39900d4af4 apt-get install -y vim
 5984  pwd
 5985  docker exec be39900d4af4 vim /instance/config.py
 5986  /Users/davidmukiibi/Desktop/bucketlist_api/apiv2/api image/bucketlist
 5987  docker exec be39900d4af4 ls
 5988  docker exec be39900d4af4 ls instance
 5989  docker exec be39900d4af4 vim instance/config.py
 5990  /Users/davidmukiibi/Desktop/bucketlist_api/apiv2/api image/bucketlist
 5991  /Users/davidmukiibi/Desktop/bucketlist_api/apiv2/api\ image/bucketlist
 5992  docker ps -a
 5993  docker logs be39900d4af4
 5994  docker logs 6bace38dece4
 5995  ll
 5996  vim instance/config.py
 5997  docker build -t mukiibi:api_finale .
 5998  docker stop be39900d4af4
 5999  docker run -d -p 5000:5000 --link my-postgres mukiibi:api_finale
 6000  docker logs 17f8b5d5c07fbfd3c17e5ce408ce89c4009d862d6bddebba5f6d465a4abf8c35
 6001  docker logs be39900d4af4
 6002  docker logs 6bace38dece4
 6003  gulp sass
 6004  npm install gulp
 6005  cd 
 6006  cd Desktop
 6007  ll
 6008  cd react
 6009  ll
 6010  gulp sass
 6011  npm install gulp
 6012  gulp sass
 6013  ll
 6014  cd bucketlist-react
 6015  ll
 6016  gulp sass
 6017  docker images
 6018  docker rmi -f   715c7233ea87
 6019  docker images
 6020  docker rmi -f   90daa1da2c0c  0bf1305f8445  70f5651ef806   534a9386b75c   ae557b139c7f 88a6ad5b8a66  76fcc4d353de
 6021  docker images
 6022  docker rmi -f    fc1d7b111d43 a7a51bf5c6cd    687fc341cc3b   636f212daa8c
 6023  docker images
 6024  docker ps -a
 6025  docker ps 
 6026  docker stop 17f8b5d5c07f6bace38dece4
 6027  docker stop 17f8b5d5c07f 6bace38dece4
 6028  history
 6029  docker rm -f $(docker ps -a -q)
 6030  pwd
 6031  exit
 6032  touch Dockerfile
 6033  code .
 6034  cd Desktop
 6035  mkdir check_react
 6036  cd check_react
 6037  ll
 6038  cd bucketlist-react
 6039  ll
 6040  npm install
 6041  ll
 6042  gulp sass
 6043  npm start
 6044  pwd
 6045  npm run build
 6046  npm start
 6047  pwd
 6048  ll
 6049  docker build  -t mukiibi:react .
 6050  pwd
 6051  ll
 6052  docker build -t mukiibi:react .
 6053  docker images
 6054  docker rmi -f  2a01a113dd00   622833b77d53   307e58a8153d
 6055  ll
 6056  docker ps -a
 6057  docker build -t mukiibi:react .
 6058  docker images
 6059  docker build -t mukiibi:react .
 6060  pwd
 6061  exit
 6062  pwd
 6063  cd Desktop
 6064  cd react/bucketlist-react
 6065  ll
 6066  docker build -t mukiibi:reactv1 .
 6067  docker build .
 6068  vim Dockerfile
 6069  docker build -t mukiibi:reactv1 .
 6070  cd public
 6071  ll
 6072  cd ..
 6073  ll
 6074  docker build -t mukiibi:reactv1 .
 6075  vim Dockerfile
 6076  docker run -it node
 6077  docker build -t mukiibi:reactv1 .
 6078  vim Dockerfile
 6079  docker build -t mukiibi:reactv1 .
 6080  docker images
 6081  ping google.com
 6082  docker images
 6083  docker rmi -f  a696309517c6  34a20378e745  54ed6b6e4e40    85dcbced2f2f
 6084  docker ps -a
 6085  docker rm -f    a696309517c6
 6086  docker ps -a
 6087  pwd
 6088  git clone git@github.com:chadwalt/aquaculture.git
 6089  ll
 6090  cd PROJECTS
 6091  git clone git@github.com:chadwalt/aquaculture.git
 6092  ..
 6093  ll
 6094  rm -rf aquaculture
 6095  ll
 6096  cd PROJECTS
 6097  cd aquaculture
 6098  mkdir app
 6099  mkdir instance
 6100  touch run.py
 6101  touch manage.py
 6102  ll
 6103  git add .
 6104  git commit -m "initial application-folder structure configuration"
 6105  git push
 6106  touch .gitignore
 6107  code .
 6108  ll
 6109  git pull
 6110  ll
 6111  git push
 6112  git status
 6113  git add config.py
 6114  git commit .
 6115  git push
 6116  ll
 6117  git add /app
 6118  ll
 6119  git status
 6120  cd ..
 6121  ll
 6122  cd aquaculture
 6123  ll
 6124  git status
 6125  git add .
 6126  git commit -m "add app folder"
 6127  git push
 6128  git pull
 6129  git push
 6130  cd app
 6131  touch app.py
 6132  cd ..
 6133  git status
 6134  git add app
 6135  git commit -m "add app/ folder"
 6136  git push
 6137  git add .
 6138  git commit -m "add initial flask code"
 6139  git push
 6140  git pull
 6141  git status
 6142  git add app/app.py\n
 6143  git commit -m "Adding the get_fish and get_suppliers methods"
 6144  git pull
 6145  git diff 
 6146  git push
 6147  git pull
 6148  git push
 6149  git diff
 6150  git pull
 6151  git push
 6152  git add .
 6153  git status
 6154  git commit -m "add these files"
 6155  git push
 6156  git pull
 6157  git add .
 6158  git commit -m "database query changes"
 6159  git pull
 6160  git add .
 6161  git commit -m "adding more functionality"
 6162  git pull
 6163  git push
 6164  git pull
 6165  git stattus
 6166  git status
 6167  git add .
 6168  git commit -m "add everything"
 6169  git push
 6170  git add .
 6171  git commit -m "adding minor edits"
 6172  git push
 6173  git status
 6174  git add .
 6175  git commit -m "update database models as well as application methods"
 6176  git push
 6177  git status
 6178  git add .
 6179  git commit -m "import flask and json packages, including databse models"
 6180  git push
 6181  cd PROJECTS
 6182  ll
 6183  cd untitled\ folder
 6184  ll
 6185  cd aquaculture
 6186  ll
 6187  code .
 6188  mkvirtualenv aquaculture
 6189  ll
 6190  pip install -r requirements.txt
 6191  psql
 6192  ll
 6193  python manage.py db init
 6194  vim requirements.txt
 6195  python manage.py db init
 6196  vim requirements.txt
 6197  pip install flask_restful
 6198  python manage.py db init
 6199  pip install decouple
 6200  brew install decouple
 6201  pip install python-decouple
 6202  python manage.py db init
 6203  export APP_SETTING=development
 6204  python manage.py db init
 6205  export APP_SETTING=development
 6206  python manage.py db init
 6207  printenv
 6208  export APP_SETTINGS=development
 6209  python manage.py db init
 6210  python manage.py db migrate
 6211  pip install psycopg2
 6212  python manage.py db migrate
 6213  python manage.py db update
 6214  python manage.py db upgrade
 6215  psql
 6216  psql -U postgres
 6217  python manage.py db upgrade
 6218  python manage.py db migrate
 6219  python manage.py db init
 6220  python manage.py db migrate
 6221  python manage.py db upgrade
 6222  psql
 6223  python manage.py db init
 6224  python manage.py db upgrade
 6225  python manage.py db migrate
 6226  python manage.py db init
 6227  python manage.py db migrate
 6228  python manage.py db upgrade
 6229  psql
 6230  python manage.py db init
 6231  python manage.py db upgrade
 6232  python manage.py db migrate
 6233  psql
 6234  python manage.py db init
 6235  python manage.py db migrate
 6236  python manage.py db upgrade
 6237  python manage.py db init
 6238  python manage.py db migrate
 6239  python manage.py db upgrade
 6240  python manage.py db init
 6241  python manage.py db migrate
 6242  python manage.py db upgrade
 6243  psql
 6244  git add .
 6245  git commit -m "modify database.py and manage.py files"
 6246  git push
 6247  git status
 6248  git add .
 6249  git commit -m "update .gitignore"
 6250  git push
 6251  git add .
 6252  git commit -m "update .gitignore"
 6253  git push
 6254  git status
 6255  git add  .gitignore
 6256  git status
 6257  git commit -m "final changes"
 6258  git push
 6259  git status
 6260  git add .
 6261  git commit -m "add a few minor changes to the app.py and run.py files"
 6262  git push
 6263  docker images
 6264  docker ps -a
 6265  doker rm 7108dd70688a
 6266  docker rm 7108dd70688a
 6267  docker rm 42e53f0e6f4b 0b5ca7293489
 6268  docker ps -a
 6269  docker images
 6270  pwd
 6271  cd /var/
 6272  ll
 6273  cd log
 6274  ll
 6275  cd ..
 6276  cd lib
 6277  ll
 6278  pwd
 6279  cd postfix
 6280  cd /etc/
 6281  ll
 6282  exit
 6283  pwd
 6284  cd Desktop
 6285  ll
 6286  cd bucketlist_api
 6287  ll
 6288  ifconfig
 6289  docker network create -d overlay --subnet=10.0.9.0/24 backend
 6290  docker swam init
 6291  docker swam init --help
 6292  docker swam --help
 6293  docker network create -d overlay --subnet=10.0.9.0/24 backend
 6294  docker network ls
 6295  docker node ls
 6296  echo $?
 6297  if docker node ls > /dev/null 2>&1; then\n  echo this is a swarm node\nelse\n  echo this is a standalone node\nfi
 6298  pwd
 6299  ll
 6300  cd apiv2
 6301  docker images
 6302  cd ..
 6303  ll
 6304  docker run -d api_finale
 6305  docker run -ai api_finale
 6306  docker run -d mukiibi:api_finale
 6307  docker run -d mukiibi:database_finale
 6308  docker network create -d overlay --subnet=10.0.9.0/24 backend
 6309  docker swam
 6310  docker swam --help
 6311  docker swam info
 6312  docker swam --help
 6313  docker swam nodes
 6314  docker swam init
 6315  docker swarm
 6316  docker swarm leave
 6317  docker network create -d overlay --subnet=10.0.9.0/24 backend
 6318  docker node ls
 6319  docker swarm init
 6320  docker network create -d overlay --subnet=10.0.9.0/24 backend
 6321  docker node ls
 6322  docker network ls
 6323  docker network inspect backend
 6324  docker ps -a
 6325  docker stop 83
 6326  docker start -d 83fa9ffb428e -p 5000:5000
 6327  docker start 83fa9ffb428e -p 5000:5000
 6328  docker rm 83
 6329  docker run -d mukiibi:api_finale -p 5000:5000
 6330  docker ps -a
 6331  docker network connect backend 819dff863d09
 6332  docker network connect backend 57fb1db31039
 6333  docker inspect 81
 6334  docker logs 81
 6335  docker run -d -p 5000:5000 mukiibi:api_finale
 6336  docker ps -a
 6337  docker rm 81
 6338  docker network connect backend 2f
 6339  docker service create --name balance -p 5000:5000 --network backend mukiibi:api_finale
 6340  docker 2fbe14b04763 inspect
 6341  docker inspect 2fbe14b04763
 6342  0.0.0.0:5000
 6343  open 0.0.0.0:5000
 6344  docker service ls
 6345  ping 0.0.0.0:5000
 6346  nmap 0.0.0.0:5000
 6347  nmap 192.168.99.100:5000
 6348  docker-machine ip dev
 6349  docker-host ip dev
 6350  docker ps -a
 6351  docker inspect 2fbe14b04763
 6352  nmap 172.17.0.2:5000
 6353  docker ps -a
 6354  docker logs 2f
 6355  docker logs 39
 6356  docker logs 2f
 6357  docker exec 57 ls
 6358  docker exec 57 python manage.py db init
 6359  docker exec 57 python manage.py db migrate
 6360  docker exec 57 apt-get install vim
 6361  docker exec 57 apt-get install -y vim
 6362  ll
 6363  touch config.py
 6364  vim config.py
 6365  docker images
 6366  pwd
 6367  /Users/davidmukiibi/Desktop/bucketlist_api
 6368  ll
 6369  cd apiv2
 6370  ll
 6371  cd api\ image
 6372  ll
 6373  vim bucketlist
 6374  cd bucketlist
 6375  ll
 6376  vim instance/config.py
 6377  ll
 6378  docker build -t mukiibi:database_finale .
 6379  docker ps -a
 6380  docker stop 57fb1db31039
 6381  docker run -d mukiibi:database_finale
 6382  docker exec 0f
 6383  docker exec 0f ls
 6384  docker exec 0f python manage.py db init
 6385  docker exec 0f python manage.py db migrate
 6386  docker exec 0f /etc/init.d/postgresql start
 6387  docker exec 0f postgres service start
 6388  ll
 6389  docker exec 0f ls
 6390  ll
 6391  cd databasev2
 6392  ll
 6393  cd checkpointII
 6394  ll
 6395  vim Dockerfile
 6396  vim start_postgres.sh
 6397  docker build -t mukiibi:database_finale .
 6398  vim Dockerfile
 6399  docker build -t mukiibi:database_finale .
 6400  vim Dockerfile
 6401  docker build -t mukiibi:database_finale .
 6402  ll
 6403  docker run -d mukiibi:database_finale
 6404  docker ps -a
 6405  docker stop 0f7abfac2b0e
 6406  docker rm 0f7abfac2b0e
 6407  docker ps -a
 6408  docker logs 77
 6409  history
 6410  docker connect backend 77
 6411  docker network connect backend 77
 6412  docker ps -a
 6413  docker logs 2fbe14b04763
 6414  docker logs 3965a993122c
 6415  ll
 6416  docker stop 77 39 2f 57
 6417  docker ps -a
 6418  docker rm 77 39 2f 57
 6419  docker ps -a
 6420  docker rm 3e
 6421  docker rm -f 3e
 6422  docker ps -a
 6423  docker rm -f b9
 6424  docker ps -a
 6425  docker nodes ls
 6426  docker swarm nodes ls
 6427  docker swarm ls
 6428  ll
 6429  cd
 6430  cd Desktop
 6431  ll
 6432  cd finale
 6433  ll
 6434  code .
 6435  cd database_image
 6436  ll
 6437  cd database
 6438  ll
 6439  docker build -t mukiibi:database .
 6440  docker  images
 6441  docker rmi -f  75cb7d0c7268
 6442  docker  images
 6443  docker rmi -f 
 6444  docker rmi -f 93
 6445  docker rmi -f    9395f13edb5f
 6446  docker  images
 6447  docker build -t mukiibi:database .
 6448  docker run -d mukiibi:database
 6449  docker ps =a
 6450  docker ps -a
 6451  docker exec 7e ls
 6452  docker exec 7e cd bucket
 6453  docker exec 7e ls bucket
 6454  docker exec 7e ls buckeT
 6455  docker exec 7e python manage.py db init
 6456  docker exec 7e python manage.py db migrate
 6457  docker exec 7e ls
 6458  docker exec 7e ls buckeT
 6459  ll
 6460  docker build -t mukiibi:database .
 6461  docker ps -a
 6462  docker stop 7ec2b899c3b9
 6463  docker run -d mukiibi:database
 6464  docker exec 1a ls
 6465  docker exec 1a ./postgres_migrations.sh
 6466  docker exec 1a chmod +x ./postgres_migrations.sh
 6467  docker exec 1a ./postgres_migrations.sh
 6468  docker exec 1a rm -rf /var/lib/postgresql/data
 6469  docker exec 1a initdb -D /var/lib/postgresql/data -EUTF-8
 6470  docker ps -a
 6471  docker start -d 1a
 6472  docker start 1a
 6473  docker ps -a
 6474  docker exec 1a initdb -D /var/lib/postgresql/data -EUTF-8
 6475  docker ps -a
 6476  docker exec 1a pg_ctl -D /var/lib/postgresql/data -l logfile start
 6477  docker logs 1a
 6478  docker exec 1a createdb -O postgres docker
 6479  docker exec 1a psql --command "\l"
 6480  docker exec 1a ll
 6481  docker exec 1a ls
 6482  docker exec 1a python manage.py db init
 6483  docker exec 1a python manage.py db migrate
 6484  docker exec 1a python manage.py db upgrade
 6485  docker exec 1a psql --command "\c docker"
 6486  docker exec 1a psql --command "\dt"
 6487  docker logs 1a
 6488  docker ps -a
 6489  docker stop 1ae32c7b923d
 6490  docker run -d mukiibi:database
 6491  docker logs 0b
 6492  docker exec 1a psql --command "\l"
 6493  docker exec ob psql --command "\l"
 6494  docker exec 0b psql --command "\l"
 6495  docker ps -a
 6496  docker stop 0bba843af194
 6497  docker ps -a
 6498  docker build -t mukiibi:database .
 6499  docker run -d mukiibi:database
 6500  docker exec 1e ls
 6501  docker exec 1e psql --command "\l"
 6502  docker exec 1a python manage.py db init
 6503  docker exec 1a initdb -D /var/lib/postgresql/data -EUTF-8
 6504  docker exec 1e pg_ctl -D /var/lib/postgresql/data -l logfile start
 6505  docker logs 1e
 6506  docker exec 1a python manage.py db init
 6507  docker exec 1e python manage.py db init
 6508  docker exec 1e python manage.py db migrate
 6509  docker exec 1e python manage.py db upgrade
 6510  docker exec 1e psql --command "\c docker"
 6511  docker exec 1e psql --command "\dt"
 6512  ll
 6513  vim /instance/config.py
 6514  vim config.py
 6515  docker build -t mukiibi:database .
 6516  docker run -d mukiibi:database
 6517  docker ps -a
 6518  docker stop 1eae1e9a2244 4b45a433e00e
 6519  docker ps -a
 6520  docker run -d mukiibi:database
 6521  docker exec 66 ls
 6522  docker exec 66 chmod +x postgres_migrations.sh
 6523  docker exec 66  ./postgres_migrations.sh
 6524  docker exec 66 mkdir /var/lib/postgresql2/data
 6525  docker exec 66 mkdir -p /var/lib/postgresql2/
 6526  docker exec 66 sudo mkdir -p /var/lib/postgresql2/
 6527  docker exec 66 psql --command "\l"
 6528  docker exec 66 psql --command "\c docker"
 6529  docker exec 66 psql --command "\dt"
 6530  docker exec 66 python manage.py db init
 6531  docker exec 66 python manage.py db migrate
 6532  docker exec 66 python manage.py db upgrade
 6533  docker exec 66 psql --command "\dt"
 6534  docker exec 66 flask db --help
 6535  docker exec 66 flask db branches
 6536  docker build -t mukiibi:database .
 6537  docker run -d mukiibi:database
 6538  docker exec cf ls
 6539  docker exec cf python manage.py db init
 6540  docker exec cf psql --command "\l"
 6541  docker exec cf psql --command "\c"
 6542  docker exec cf psql --command "\dt"
 6543  docker ps -a
 6544  docker stop 66f7757194d8
 6545  docker exec cf ls
 6546  docker exec cf python manage.py db init
 6547  docker exec cf python manage.py db migrate
 6548  docker build -t mukiibi:database .
 6549  docker run -d mukiibi:database
 6550  docker exec 43 python manage.py db init
 6551  docker build -t mukiibi:database .
 6552  docker run -d mukiibi:database
 6553  docker exec 85 python manage.py db init
 6554  docker exec 85340 python manage.py db init
 6555  docker exec 85340 python manage.py db migrate
 6556  docker exec 85340 python manage.py db upgrade
 6557  docker exec 85340 psql --command "\l"
 6558  docker exec 85340 psql --command "\c docker"
 6559  docker exec 85340 psql --command "\dt"
 6560  docker exec 85340 psql -U docker --command "\l"
 6561  docker ps -a
 6562  docker stop 8534056bdafd 4396da930931 cf1b9d9e65a3 66f7757194d8
 6563  docker ps -a
 6564  docker rm 8534056bdafd 4396da930931 cf1b9d9e65a3 66f7757194d8
 6565  docker ps -a
 6566  docker rm 4b45a433e00e 1eae1e9a2244 0bba843af194
 6567  docker ps -a
 6568  docker build -t mukiibi:database .
 6569  docker run -d mukiibi:database
 6570  docker logs f1
 6571  docker build -t mukiibi:database .
 6572  docker run -d mukiibi:database
 6573  docker ps -a
 6574  docker logs 55
 6575  docker build -t mukiibi:database .
 6576  docker run -d mukiibi:database
 6577  docker ps -a
 6578  docker logs 0f
 6579  docker build -t mukiibi:database .
 6580  docker run -d mukiibi:database
 6581  docker ps -a
 6582  docker logs 69
 6583  docker build -t mukiibi:database .
 6584  docker images
 6585  docker build -t mukiibi:database .
 6586  pwd
 6587  exit
 6588  docker images
 6589  cd Desktop
 6590  ll
 6591  cd finale
 6592  ll
 6593  cd database_image/
 6594  ll
 6595  cd database
 6596  ll
 6597  eit
 6598  exit
 6599  mkvirtualenv graphql
 6600  pip install graphene
 6601  pwd
 6602  cd D
 6603  cd Desktop
 6604  cd graphql
 6605  touch hello.py
 6606  vim hello.py
 6607  python hello.py
 6608  ll
 6609  pwd
 6610  rm hello.py
 6611  ll
 6612  rm hello.py
 6613  ll
 6614  cd ..
 6615  pwd
 6616  mv graphql flask_sqlalchemy
 6617  ll
 6618  cd flask_sqlalchemy
 6619  pip install SQLAlchemy
 6620  pip install graphene_sqlalchemy
 6621  pip install Flask
 6622  pip install Flask-GraphQL
 6623  touch models.py
 6624  vim models.py
 6625  touch schema.py
 6626  vim schema.py
 6627  touch app.py
 6628  vim app.py
 6629  python
 6630  python ./app.py
 6631  vim schema.py
 6632  python ./app.py
 6633  cd Desktop
 6634  ll
 6635  cd my\ latino\ mixtape
 6636  touch playlist.txt
 6637  vim playlist.txt
 6638  exit
 6639  cd Desktop
 6640  cd my\ latino\ mixtape
 6641  vim playlist.txt
 6642  ll
 6643  cd graphql
 6644  ll
 6645  cd bucketlist\(ios\)
 6646  ll
 6647  code .
 6648  psql
 6649  pwd
 6650  python run.py
 6651  pip insall requirements.txt
 6652  pip install -r requirements.txt
 6653  python run.py
 6654  pip install psycopg2-binary
 6655  python run.py
 6656  pwd
 6657  exit
 6658  /Users/davidmukiibi/Desktop/flask_sqlalchemy/graphql/bucketlist(ios)
 6659  workon graphql
 6660  /Users/davidmukiibi/Desktop/flask_sqlalchemy/graphql/bucketlist(ios)
 6661  /Users/davidmukiibi/Desktop/flask_sqlalchemy/graphql/
 6662  cd bucketlist\(ios\)
 6663  python run.py
 6664  export APP_SETTING=development
 6665  python run.py
 6666  cd PROJECTS
 6667  cd checkPointII
 6668  workon checkpoint2
 6669  export APP_SETTING=development
 6670  python run.py
 6671  ll
 6672  vim instance/config.py
 6673  python manage.py db init
 6674  python manage.py db migrate
 6675  python manage.py db upgrade
 6676  python run.py
 6677  ll
 6678  vim instance/config.py
 6679  psql
 6680  python run.py
 6681  rm -rf migrations
 6682  ll
 6683  python manage.py db init
 6684  python manage.py db migrate
 6685  python manage.py db upgrade
 6686  psql
 6687  vim buckeT/database_models.py
 6688  vim instance/config.py
 6689  python manage.py db init
 6690  python manage.py db migrate
 6691  python manage.py db upgrade
 6692  vim manage.py
 6693  python manage.py db init
 6694  vim buckeT/database_models.py
 6695  python manage.py db init
 6696  rm -rf migrations
 6697  python manage.py db init
 6698  python manage.py db migrate
 6699  python manage.py db upgrade
 6700  python run.py
 6701  vim run
 6702  vim run.py
 6703  vim buckeT/bucketlist.py
 6704  vim run.py
 6705  python run.py
 6706  docker-machine -v
 6707  git clone git@github.com:davidmukiibi/docker-compose-v2.git
 6708  ll
 6709  mv docker-compose-v2 /PROJECTS
 6710  mv /docker-compose-v2 /PROJECTS
 6711  cd PROJECTS
 6712  ll
 6713  cd docker-compose-v2
 6714  ll
 6715  l
 6716  cd database\ image
 6717  ll
 6718  default\ postgres\ image
 6719  l
 6720  vim requirements.txt
 6721  vim Dockerfile
 6722  docker build -t mukiibi:database_base_image .
 6723  defaults write com.apple.finder AppleShowAllFiles YES
 6724  defaults write com.apple.finder AppleShowAllFiles NO
 6725  docker-machine --help
 6726  docker-machine inspect
 6727  l
 6728  cd ..
 6729  l
 6730  cd .
 6731  ll
 6732  cd ..
 6733  ll
 6734  vim docker-compose.yml
 6735  pwd
 6736  vim docker-compose.yml
 6737  docker-compose -f docker-compose.yml up
 6738  vim docker-compose.yml
 6739  docker-compose -f docker-compose.yml up
 6740  vim docker-compose.yml
 6741  docker-compose -f docker-compose.yml up
 6742  docker ps -a
 6743  psql -U postgres 
 6744  vim docker-compose.yml
 6745  docker-compose -f docker-compose.yml up
 6746  docker ps -a
 6747  psql -U postgres
 6748  psql -U postgres -h localhost
 6749  psql -U postgres -h 0.0.0.0
 6750  psql -U postgres -h 0.0.0.0 -p 5001
 6751  docker exec 16 ls
 6752  docker exec 16 pwd
 6753  vim docker-compose.yml
 6754  docker-compose -f docker-compose.yml up
 6755  docker exec 16 cd /docker-compose-v2
 6756  docker ps -a
 6757  vim docker-compose.yml
 6758  docker-compose docker-compose.yml up
 6759  docker-compose -f docker-compose.yml up
 6760  vim docker-compose.yml
 6761  docker-compose -f docker-compose.yml up
 6762  docker ps -a
 6763  docker exec d9 pwd
 6764  cd PROJECTS
 6765  cd docker-compose-v2
 6766  ll
 6767  cd database\ image
 6768  ll
 6769  cd default\ postgres\ image
 6770  ll
 6771  vim Dockerfile
 6772  pwd
 6773  cd ..
 6774  l
 6775  cd ..
 6776  ll
 6777  vim docker-compose
 6778  vim docker-compose.yml
 6779  pwd
 6780  docker-compose -f docker-compose.yml up
 6781  cd database\ image
 6782  l
 6783  cd default\ postgres\ image
 6784  ll
 6785  docker ps -a
 6786  docker exec 70 pwd
 6787  l
 6788  vim Dockerfile
 6789  docker-compose -f docker-compose.yml up
 6790  docker exec 70 pwd
 6791  ll
 6792  cd database\ image
 6793  ll
 6794  cd database
 6795  ll
 6796  vim Dockerfile
 6797  docker build -t mukiibi:databse_image_final .
 6798  ll
 6799  cd ..
 6800  ll
 6801  cd ..
 6802  ll
 6803  vim docker-compose
 6804  vim docker-compose.yml
 6805  docker-compose -f docker-compose.yml up
 6806  vim docker-compose.yml
 6807  docker-compose -f docker-compose.yml up
 6808  docker images
 6809  vim docker-compose.yml
 6810  pwd
 6811  vim docker-compose.yml
 6812  docker-compose -f docker-compose.yml up
 6813  docker ps -a
 6814  docker exec 23 pwd
 6815  docker exec 23 ls
 6816  pwd
 6817  code .
 6818  l
 6819  code .
 6820  docker images
 6821  pwd
 6822  /Users/davidmukiibi/PROJECTS/docker-compose-v2
 6823  ll
 6824  cd api\ image
 6825  ll
 6826  cd bucketlist
 6827  ll
 6828  vim Dockerfile
 6829  cd ..
 6830  vim Dockerfile
 6831  docker build -t mukiibi:api_base_image .
 6832  docker images
 6833  docker rmi -f 855ebc1c83d2
 6834  docker images
 6835  ll
 6836  cd bucketlist
 6837  ll
 6838  vim Dockerfile
 6839  docker build -t mukiibi:api_image_final .
 6840  docker images
 6841  docker-compose api_service -d up
 6842  docker-compose up -d api_service
 6843  docker ps -a
 6844  docker-compose up -d api_service
 6845  docker ps -a
 6846  docker logs 24
 6847  docker stop 52efc8eab006
 6848  docker-compose up -d api_service
 6849  docker ps -a
 6850  docker logs 40
 6851  docker exec 52 psql -U postgres
 6852  docker exec 52 psql --command "\l"
 6853  docker logs 52
 6854  docker build -t mukiibi:api_image_final .
 6855  pqd
 6856  pwd
 6857  ll
 6858  docker build -t mukiibi:database_image_final .
 6859  docker ps -a
 6860  docker stop 40 52
 6861  ll
 6862  docker-compose up -d
 6863  docker ps -a
 6864  docker logs 40
 6865  docker logs 52
 6866  docker ps -a
 6867  docker exec 52 /docker-entrypoint-initdb.d
 6868  docker exec 52 ls /docker-entrypoint-initdb.d
 6869  pwd
 6870  docker build -t mukiibi:database_image_final .
 6871  docker-compose up -d
 6872  docker exec 52 ls /docker-entrypoint-initdb.d
 6873  docker exec 52 pwd
 6874  docker exec 52 ls /amity/checkpointII
 6875  docker exec 52 ls
 6876  docker exec 52 ls buckeT
 6877  docker build -t mukiibi:database_image_final .
 6878  docker images
 6879  docker rmi aba9bfee7f1c
 6880  docker rmi e1
 6881  docker images
 6882  docker ps -a
 6883  docker stop 40 52
 6884  docker rm 40 52 23 d7
 6885  docker ps -a
 6886  docker-compose up -d
 6887  docker ps -a
 6888  docker logs d1
 6889  docker logs 56
 6890  docker logs d1
 6891  docker exec 56 pwd
 6892  docker exec 56 ls
 6893  docker exec 56 ls /docker-entrypoint-initdb.d
 6894  docker exec 56 vim /usr/local/bin/docker-entrypoint.sh
 6895  docker exec 56 nano /usr/local/bin/docker-entrypoint.sh
 6896  docker exec 56 apt-get install vim
 6897  docker exec 56 sudo apt-get install -y vim
 6898  docker exec 56 apt-get install -y vim
 6899  docker exec 56 psql --command "CREATE DATABASE docker;"
 6900  psql -U postgres
 6901  psql -U postgres -h localhost -p 5432
 6902  docker ps -a
 6903  psql -U postgres -p 5432
 6904  docker logs 52
 6905  docker ps -a
 6906  docker logs 56
 6907  psql -U postgres -p 5432
 6908  docker logs 56
 6909  docker build -t mukiibi:database_image_final .
 6910  docker-compose up -d
 6911  docker ps -a
 6912  docker stop d1 56
 6913  docker rm d1 56
 6914  docker-compose up -d
 6915  docker ps -a
 6916  docker logs 27
 6917  docker build -t mukiibi:database_image_final .
 6918  docker-compose up -d
 6919  docker logs 27
 6920  docker build -t mukiibi:database_image_final .
 6921  psql -U postgres -p 5432
 6922  docker-compose up -d
 6923  psql -U postgres -p 5432
 6924  docker ps -a
 6925  docker stop 79 27
 6926  docker rm 79 27
 6927  docker-compose up -d
 6928  psql -U postgres -p 5432
 6929  psql -U postgres -p 5432 -h localhost
 6930  psql -U postgres -p 5432 -h 0.0.0.0
 6931  docker ps -a
 6932  docker logs 2b
 6933  cd PROJECTS
 6934  mkdir test
 6935  cd test
 6936  touch Dockerfile-dev
 6937  code .
 6938  cd ..
 6939  ll
 6940  cd users-service
 6941  code .
 6942  ll
 6943  docker-compose -f docker-compose-dev.yml build
 6944  mkdir testdriven-app && cd testdriven-app
 6945  pwd
 6946  ll
 6947  mkdir users-service && cd users-service
 6948  ll
 6949  cd ..
 6950  ll
 6951  mkdir testdriven-app && cd testdriven-app
 6952  mkdir users-service && cd users-service
 6953  mkdir project
 6954  mkvirtualenv practice env
 6955  mkvirtualenv practice-env
 6956  ll
 6957  cd po
 6958  cd project
 6959  touch __init__.py
 6960  vim __init__.py
 6961  pip install flask-script==2.0.5
 6962  ll
 6963  cd ..
 6964  ll
 6965  cd ..
 6966  ll
 6967  touch manage.py 
 6968  vim manage.py
 6969  python manage.py runserver
 6970  cd ..
 6971  ll
 6972  cd testdriven-app
 6973  ll
 6974  cd users-service
 6975  ll
 6976  touch manage.py
 6977  vim manage.py
 6978  cd ..
 6979  ll
 6980  rm -rf manage.py
 6981  ll
 6982  cd users-service
 6983  python manage.py runserver
 6984  ll
 6985  cd project
 6986  touch config.py
 6987  vim config.py
 6988  ll
 6989  vim __init__.py
 6990  python manage.py runserver
 6991  cd ..
 6992  python manage.py runserver
 6993  ll
 6994  cd project
 6995  ll
 6996  vim config.py
 6997  vim __init__.py
 6998  cd ..
 6999  python manage.py runserver
 7000  cd project
 7001  vim __init__.py
 7002  pwd
 7003  cd ..
 7004  pwd
 7005  ll
 7006  pip freeze requirements.txt
 7007  ll
 7008  pwd
 7009  touch Dockerfile-dev
 7010  vim Dockerfile-dev
 7011  cd ..
 7012  pwd
 7013  touch docker-compose-dev.yml
 7014  vim docker-compose-dev.yml
 7015  docker-compose -f docker-compose-dev.yml build
 7016  vim docker-compose-dev.yml
 7017  ll
 7018  cd users-service
 7019  ll
 7020  vim Dockerfile-dev
 7021  ll
 7022  cd ..
 7023  ll
 7024  pwd
 7025  ll
 7026  cd users-service
 7027  ll
 7028  cd project
 7029  ll
 7030  cd ..
 7031  ll
 7032  pwd
 7033  pip freeze > requirements.txt
 7034  docker-compose -f docker-compose-dev.yml build
 7035  ll
 7036  cd users-service
 7037  ll
 7038  cd ..
 7039  mv requirements.txt users-service
 7040  ll
 7041  docker-compose -f docker-compose-dev.yml build
 7042  docker-compose -f docker-compose-dev.yml up -d
 7043  ll
 7044  vim docker-compose-dev.yml
 7045  vim users-service/project/config.py
 7046  vim users-service/project/__init__.py
 7047  docker-compose -f docker-compose-dev.yml up -d
 7048  ll
 7049  vim users-service/requirements.txt
 7050  vim users-service/project/config.py
 7051  vim users-service/project/__init__.py
 7052  ll
 7053  mkdir -p users-service/project/db
 7054  touch -p users-service/project/db/create.sql
 7055  touch users-service/project/db/create.sql
 7056  vim users-service/project/db/create.sql
 7057  touch users-service/project/db/Dockerfile
 7058  vim users-service/project/db/Dockerfile
 7059  vim docker-compose-dev.yml
 7060  touch users-service/entrypoint.sh
 7061  vim users-service/entrypoint.sh
 7062  vim users-service/Dockerfile-dev
 7063  docker-compose -f docker-compose-dev.yml up -d --build
 7064  pwd
 7065  cd /Users/davidmukiibi/PROJECTS/docker-compose-v2
 7066  ll
 7067  cd api\ image
 7068  ll
 7069  cd bucketlist
 7070  ll
 7071  cd ..
 7072  ll
 7073  vim Dockerfile
 7074  docker build -t mukiibi:api_image_final .
 7075  pwd
 7076  ll
 7077  cd database\ image
 7078  ll
 7079  cd database
 7080  ll
 7081  vim Dockerfile
 7082  docker build -t mukiibi:database_image_final .
 7083  docker images
 7084  docker rmi -f   c7dadbc9d0cc    6e9ff458f443     681115ea389b     a676eb59fd96   d0a97f22360c  02489455ea6c   fc85c85dd859  098b5b828463       6ae1ec0a9ed2
 7085  docker images
 7086  pwd
 7087  cd ..
 7088  ll
 7089  pwd
 7090  docker-compose -f docker-compose-dev.yml run api_service python manage.py create_db
 7091  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7092  docker-compose -f docker-compose.yml up api_service python manage.py create_db
 7093  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7094  docker run mukiibi:database_image_final 
 7095  docker-compose -f docker-compose.yml up amity_db
 7096  docker-compose -f docker-compose.yml up amity-db
 7097  psql -U -p 5432 -h localhost
 7098  psql -h 0.0.0.0 -p 5432 -U postgres
 7099  docker ps -a
 7100  docker stop ff9a4eca3563
 7101  psql -h 0.0.0.0 -p 5432 -U postgres
 7102  docker ps -a
 7103  docker exec a1 psql
 7104  docker exec a1 psql --command "\l"
 7105  docker start 35453aa622aa
 7106  docker ps -a
 7107  psql -h 0.0.0.0 -p 5432 -U postgres
 7108  docker exec 35 psql
 7109  docker exec 35 psql -U postgres
 7110  docker exec 35 psql --command "\l"
 7111  docker exec 35 psql -U postgres --command "\l"
 7112  docker exec 35 ls
 7113  docker-compose up api_service
 7114  docker ps -a
 7115  docker build -t mukiibi:api_image_final .
 7116  docker logs 77911fbdbb91
 7117  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7118  docker logs a1a56e50c1a2
 7119  docker ps -a
 7120  docker stop e2b20a725f9f 35453aa622aa a1a56e50c1a2
 7121  docker rm -f (docker ps -a -q)
 7122  docker rm -f $(docker ps -a -q)
 7123  docker ps -a
 7124  docker-compose -f docker-compose.yml up amity-db
 7125  ll
 7126  docker build -t mukiibi:database_image_final .
 7127  docker-compose -f docker-compose.yml up amity-db
 7128  docker rm -f $(docker ps -a -q)
 7129  docker-compose -f docker-compose.yml up amity-db
 7130  docker-compose -f docker-compose.yml up --build amity-db
 7131  docker ps -a
 7132  docker exec 92 psql -U postgres --command "\l"
 7133  docker run dockercomposev2_amity-db:latest
 7134  docker ps -a
 7135  docker exec 923608b4ebc8 psql -U postgres --command "\l"
 7136  docker ps -a
 7137  docker logs 923608b4ebc8
 7138  docker ps -a
 7139  docker exec a692a2a818f6 psql -U postgres --command "\l"
 7140  docker ps -a
 7141  docker images
 7142  docker rmi  94967e8caac2
 7143  docker images
 7144  docker rmi    3f1593fe1bce
 7145  docker images
 7146  pwd
 7147  ll
 7148  vim docker-compose.yml
 7149  docker-compose -f docker-compose.yml run api_service python manage.py db init
 7150  docker ps -a
 7151  docker rm -f 7084e36a8ef2 a692a2a818f6 923608b4ebc8
 7152  docker-compose -f docker-compose.yml run api_service python manage.py db init && python manage.py db migrate && python manage.py db upgrade
 7153  docker ps -a
 7154  docker rm -f 633 400
 7155  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7156  docker ps -a
 7157  docker exec fc psql -U postgres --command "\l"
 7158  docker build -t mukiibi:api_image_final .
 7159  docker ps -a
 7160  docker rm -f $(docker ps -a -aq)
 7161  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7162  docker ps -a
 7163  docker logs 71
 7164  docker exec 71 psql -U postgres --command "\l"
 7165  docker exec 71 psql -U postgres --command "\c docker"
 7166  docker exec 71 psql -U postgres --command "\dt"
 7167  docker start 0e
 7168  docker ps -a
 7169  docker build -t mukiibi:api_image_final .
 7170  docker run mukiibi:appi_image_final
 7171  docker run mukiibi:api_image_final
 7172  docker logs 0e
 7173  docker build -t mukiibi:api_image_final .
 7174  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7175  docker ps -a
 7176  docker logs 32
 7177  docker run mukiibi:api_image_final
 7178  docker build -t mukiibi:api_image_final .
 7179  docker images
 7180  docker rm -f $(docker ps -a -q)
 7181  docker rmi -f   c7dadbc9d0cc        6959a31260c7  abd5378f6b62    8d806eeea8f9    ff15e58e223f  0f68d82ca9f1     b8cc151fe524  af229b96ff8c   882efc142ff9    043c68913e51    44ab400f6dcc
 7182  docker images
 7183  docker rmi -f   2fbc03e3b5db  6a46a4e547cb  faeb6858cfc2
 7184  docker images
 7185  docker build -t mukiibi:api_image_final .
 7186  docker rmi -f f4
 7187  docker run mukiibi:api_image_final
 7188  docker ps -a
 7189  docker logs fd
 7190  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7191  docker ps -a
 7192  docker run -d mukiibi:api_image_final
 7193  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7194  docker ps -a
 7195  docker build -t mukiibi:api_image_final .
 7196  docker ps -a
 7197  docker rm -f $(docker ps -a -q)
 7198  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7199  docker ps -a
 7200  docker logs 77
 7201  docker ps -a
 7202  docker logs 40
 7203  docker start 40
 7204  docker logs 40
 7205  docker ps -a
 7206  docker run mukiibi:api_image_final
 7207  docker ps -a
 7208  docker exec 583917b9e4fd pwd
 7209  docker exec 583917b9e4fd ls
 7210  docker exec 583917b9e4fd python manage.py create_db
 7211  docker build -t mukiibi:api_image_final .
 7212  pwd
 7213  ll
 7214  docker build -t mukiibi:api_image_final .
 7215  docker ps -a
 7216  docker build -t mukiibi:api_image_final .
 7217  docker ps -a
 7218  docker rm -f $(docker ps -a -q)
 7219  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7220  docker ps -a
 7221  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7222  psql -U postgres -h 0.0.0.0 
 7223  docker logs 1a
 7224  docker exec 1a psql --command "\l"
 7225  docker exec 1a psql -U --command "\l"
 7226  docker exec 1a psql -U postgres --command "\l"
 7227  docker exec 1a psql -U postgres --command "\c docker"
 7228  docker exec 1a psql -U postgres --command "\dt"
 7229  docker run mukiibi:api_image_final
 7230  docker-compose -f docker-compose.yml up amity-db
 7231  ll
 7232  pwd
 7233  /Users/davidmukiibi/PROJECTS/docker-compose-v2/database image/database
 7234  /Users/davidmukiibi/PROJECTS/docker-compose-v2/database\ image/database
 7235  /Users/davidmukiibi/PROJECTS/docker-compose-v2/database-image
 7236  ll
 7237  cd ..
 7238  ll
 7239  docker-compose -f docker-compose.yml run api_service python manage.py create_db
 7240  docker ps -a
 7241  docker-compose -f docker-compose.yml run api_service python manage.py db init
 7242  docker-compose -f docker-compose.yml run api_service python manage.py db migrate
 7243  docker-compose -f docker-compose.yml run api_service python manage.py db init && python manage.py db migrate && python manage.py db upgrade
 7244  docker ps -a
 7245  docker start 01
 7246  docker ps -a
 7247  docker-compose -f docker-compose.yml run api_service ls
 7248  docker-compose -f docker-compose.yml run api_service python manage.py db init && python manage.py db migrate && \ python manage.py db upgrade
 7249  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7250  pwd
 7251  cd PROJECTS
 7252  ll
 7253  cd docker-compose-v2
 7254  ll
 7255  docker build -t mukiibi:api_image_final .
 7256  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7257  docker ps-a
 7258  docker ps -a
 7259  docker exec 1a
 7260  docker exec 1a psql -U postgres --command "\c docker"
 7261  docker exec 1a psql -U postgres --command "\dt"
 7262  docker stop e8 1e 2a
 7263  docker rm -f ($docker ps -a -q)
 7264  docker rm -f $(docker ps -a -q)
 7265  docker ps -a
 7266  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7267  docker ps -a
 7268  docker exec psql -U postgres --command "\c docker"
 7269  docker exec 07 psql -U postgres --command "\c docker"
 7270  docker exec 07 psql -U postgres --command "\dt"
 7271  docker rm -f $(docker ps -a -q)
 7272  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7273  docker ps -a
 7274  docker exec 3c psql --command "\c docker"
 7275  docker exec 3c psql -U postgres --command "\c docker"
 7276  docker exec 3c psql -U postgres --command "\dt"
 7277  docker 3c
 7278  docker --help
 7279  docker run 3c
 7280  docker ps 0a
 7281  docker ps -a
 7282  docker attach --help
 7283  docker attach 3c
 7284  docker ps -a
 7285  docker start 3c
 7286  docker build -t mukiibi:api_image_final .
 7287  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7288  docker ps -a
 7289  docker rm -f $(docker ps -a -q)
 7290  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7291  docker ps -a
 7292  docker exec 0c psql -U --command "\c docker"
 7293  docker exec 0c psql -Upostgres --command "\c docker"
 7294  docker exec 0c psql -Upostgres --command "\dt"
 7295  docker build -t mukiibi:api_image_final .
 7296  docker ps -a
 7297  docker rm -f $(docker ps -a -q)
 7298  docker build -t mukiibi:api_image_final .
 7299  pwd
 7300  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7301  docker ps -a
 7302  docker exec 33 psql -Upostgres --command "\l"
 7303  docker exec 33 psql -U postgres --command "\c docker"
 7304  docker exec 33 psql -U postgres --command "\dt"
 7305  docker ps -a
 7306  psql -U postgres -p 5435 
 7307  psql -U postgres -p 5435 -h 0.0.0.0
 7308  docker ps -a
 7309  docker rm -f $(docker ps -a -q)
 7310  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7311  docker ps-a
 7312  docker ps -a
 7313  docker rm -f $(docker ps -a -q)
 7314  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7315  docker ps -a
 7316  docker images
 7317  psql -U postgres -p 5435 -h 0.0.0.0
 7318  docker ps 0a
 7319  docker ps -a 
 7320  psql -U postgres -p 5432 -h 0.0.0.0
 7321  docker ps -a
 7322  docker-compose -f docker-compose.yml up
 7323  ll
 7324  pwd
 7325  docker-compose up
 7326  docker-compose up >> output.txt
 7327  docker ps -a
 7328  docker logs 59
 7329  docker rm -f $(docker ps -a -q)
 7330  docker-compose up
 7331  docker ps -a
 7332  docker rm -f $(docker ps -a -q)
 7333  pwd
 7334  docker-compose -f docker-compose.yml run api_service ./start_postgres.sh
 7335  psql -U postgres -p 5432
 7336  docker ps -a
 7337  psql -U postgres -p 5432 -h localhost 
 7338  docker ps -a
 7339  docker-compose up
 7340  docker rm -f $(docker ps -a -q)
 7341  docker-compose up
 7342  psql -U postgres -p 5432 -h localhost 
 7343  docker ps -a
 7344  docker build -t mukiibi:api_image_final .
 7345  docker-compose up
 7346  docker rm -f $(docker ps -a -q)
 7347  docker-compose up
 7348  docker build -t mukiibi:api_image_final .
 7349  docker-compose up
 7350  docker rm -f $(docker ps -a -q)
 7351  docker-compose up
 7352  docker rm -f $(docker ps -a -q)
 7353  docker build -t mukiibi:api_image_final .
 7354  docker rm -f $(docker ps -a -q)
 7355  docker-compose up
 7356  docker images
 7357  docker rmi -f    c820cc598752        0902a2ad010f          7f72c01094ac        af8effe1af10      b4178ba25cad    a7a96ca754e3      07c67a7060ba     f684816c0f99      3c2d6c424ef3         554e99d46b61      f2afef5333f8     bfe1e0efef57
 7358  docker rm -f $(docker ps -a -q)
 7359  docker build -t mukiibi:api_image_final .
 7360  docker images
 7361  docker-compose up
 7362  docker build -t mukiibi:api_image_final .
 7363  docker images
 7364  docker rm -f $(docker ps -a -q)
 7365  docker-compose up
 7366  docker build -t mukiibi:api_image_final .
 7367  docker rm -f $(docker ps -a -q)
 7368  docker-compose up
 7369  docker rm -f $(docker ps -a -q)
 7370  docker-compose up
 7371  pwd
 7372  ll
 7373  pwd
 7374  docker images
 7375  docker push --help
 7376  docker push mukiibi:api_image_final
 7377  docker login
 7378  docker push mukiibi:api_image_final
 7379  pwd
 7380  exit
 7381  docker ps -a
 7382  pwd
 7383  git status
 7384  git add docker-compose.yml
 7385  git commit
 7386  git status
 7387  git add api image/bucketlist/requirements.txt
 7388  git add api\ image/bucketlist/requirements.txt
 7389  git commit 
 7390  git add api\ image/bucketlist/manage.py
 7391  git commit 
 7392  git add api\ image/bucketlist/buckeT/bucketlist.py
 7393  git commit 
 7394  git add api\ image/Dockerfile
 7395  git commit
 7396  git status
 7397  git add api\ image/Dockerfile
 7398  git commit 
 7399  git status
 7400  git add api\ image/bucketlist/start_postgres.sh
 7401  git commit 
 7402  git status
 7403  ll
 7404  git add database-image/createdb.sql
 7405  git add database-image/database/createdb.sql
 7406  git commit
 7407  git add database-image/database/Dockerfile
 7408  git commit
 7409  git status
 7410  git add database-image/database/Dockerfile
 7411  git commit
 7412  git rm  untitled folder/database_image/requirements.txt
 7413  git rm  untitled\ folder/database_image/requirements.txt
 7414  git status
 7415  git rm untitled\ folder/database_image/database/
 7416  git rm -r untitled\ folder/database_image/database/
 7417  git rm -r untitled\ folder/api_image/bucketlist/
 7418  git status
 7419  git rm -r untitled\ folder/database_image
 7420  git status
 7421  git rm -r untitled\ folder/api_image/
 7422  git status
 7423  git rm -r untitled folder
 7424  git rm -r untitled\ folder
 7425  git rm -r  database\ image/
 7426  git status
 7427  git rm -r api\ image/bucketlist/Dockerfile
 7428  git status
 7429  git push
 7430  touch README.md
 7431  gitgit status
 7432  git status
 7433  git add \tREADME.md
 7434  git commit 
 7435  git commit .
 7436  git push
 7437  git status
 7438  git add \tREADME.md
 7439  git commit .
 7440  git push
 7441  pwd
 7442  cd PROJECTS
 7443  ll
 7444  aquaculture
 7445  ll
 7446  git status
 7447  git pull
 7448  code .
 7449  cd PROJECTS/k8s
 7450  ll
 7451  docker images
 7452  docker ps -a
 7453  docker rmi   22f1c9b67839    3d24cbc5d0ae     d4d862a47257   ccbf83b72ef5
 7454  docker images
 7455  docker rmi     a410a7b3642d  a2932ab7296c
 7456  docker images
 7457  docker rmi     9e92c8430ba0
 7458  kubectl config current-context
 7459  kubectl get nodes
 7460  minikube start
 7461  kubectl get nodes
 7462  ping google.com
 7463  docker images
 7464  docker ps -a
 7465  docker images
 7466  pwd
 7467  ll
 7468  kubectl create -f kubernetes-deployment.yaml\n
 7469  kubectl get nodes
 7470  kubectl start
 7471  kubectl init
 7472  kubectl --help
 7473  history
 7474  minikube start
 7475  kubectl create -f kubernetes-deployment.yaml\n
 7476  minikube start
 7477  kubectl create -f kubernetes-deployment.yaml
 7478  kubectl create --validate=false -f kubernetes-deployment.yaml
 7479  kubectl create -f kubernetes-deployment.yaml --validate=false
 7480  kubectl get nodes
 7481  kubectl get deployment
 7482  kubectl get deployments
 7483  pwd
 7484  kubectl create -f /Users/davidmukiibi/PROJECTS/docker-compose-v2
 7485  kubectl create -f /Users/davidmukiibi/PROJECTS/docker-compose-v2 --validate=false
 7486  pwd
 7487  ll
 7488  cd kubernetes
 7489  pwd
 7490  kubectl create -f /Users/davidmukiibi/PROJECTS/docker-compose-v2/kubernetes --validate=false
 7491  kubectl create -f /Users/davidmukiibi/PROJECTS/docker-compose-v2/kubernetes
 7492  kubectl describe deploy api-deployment
 7493  kubectl get rs
 7494  kubectl describe rs
 7495  kubectl get rs
 7496  kubectl get deployment
 7497  exit
 7498  kubectl delete rs
 7499  kubectl get rs
 7500  kubectl delete api-deployment-6bcf5d859f
 7501  kubectl delete api-deployment-6bcf5d859f --all
 7502  kubectl delete rs
 7503  pwd
 7504  cd ..
 7505  ll
 7506  pwd
 7507  git pull
 7508  ll
 7509  pwd
 7510  cd ..
 7511  cd docker-flask
 7512  git pull
 7513  pwd
 7514  cd PROJECTS
 7515  git clone git@github.com:davidmukiibi/docker-flask.git
 7516  ssh-keygen -t rsa -b 4096 -C "david.mukiibiq@gmail.com"
 7517  eval "$(ssh-agent -s)"
 7518  vim  ~/.ssh/config
 7519  ssh-add -K ~/.ssh/id_rsa
 7520  pbcopy < ~/.ssh/id_rsa.pub
 7521  pwd
 7522  cd ..
 7523  cd docker-compose-v2
 7524  git pull
 7525  cd ..
 7526  exit
 7527  ll
 7528  cd docker-compose-v2
 7529  git pull
 7530  docker images
 7531  history
 7532  ping google.com
 7533  pwd
 7534  git status
 7535  git add api\ image/Dockerfile
 7536  git commit
 7537  git add api\ image/bucketlist/start_postgres.sh
 7538  git commit
 7539  git add database-image/database/Dockerfile
 7540  git commit
 7541  git add database-image/database/createdb.sql
 7542  git commit
 7543  git add docker-compose.yml
 7544  git commit
 7545  git status
 7546  git push
 7547  ping google.com
 7548  exit
 7549  ping google.com
 7550  docker images
 7551  export DOCKER_ID_USER=mukiibi
 7552  docker login
 7553  docker images
 7554  docker push $DOCKER_ID_USER/api_image_final
 7555  docker push api_image_final
 7556  docker push $DOCKER_ID_USER/api_image_final
 7557  docker tag api_image_final $DOCKER_ID_USER/api_image_final
 7558  docker tag mukiibi/api_image_final $DOCKER_ID_USER/api_image_final
 7559  docker tag mukiibi $DOCKER_ID_USER/api_image_final
 7560  docker tag mukiibi:api_image_final $DOCKER_ID_USER/api_image_final
 7561  docker push $DOCKER_ID_USER/api_image_final
 7562  pwd
 7563  exit
 7564  pwd
 7565  exit
 7566  docker images
 7567  docker tag mukiibi:database_image_final $DOCKER_ID_USER
 7568  docker push $DOCKER_ID_USER/database_image_final
 7569  docker tag mukiibi:database_image_final $DOCKER_ID_USER/database_image_final
 7570  docker push $DOCKER_ID_USER/database_image_final
 7571  cd PROJECTS
 7572  ll
 7573  cd docker-compose-v2
 7574  ll
 7575  cd database-image
 7576  ll
 7577  cd database
 7578  ll
 7579  vim Dockerfile 
 7580  docker images
 7581  docker tag dockercomposev2_amity-db $DOCKER_ID_USER/latest
 7582  docker push $DOCKER_ID_USER/dockercomposev2_amity-db
 7583  docker push dockercomposev2_amity-db
 7584  docker push dockercomposev2_amity-db/latest
 7585  docker tag dockercomposev2_amity-db dockercomposev2_amity-db/latest
 7586  docker push dockercomposev2_amity-db/latest
 7587  ping google.com
 7588  pwd
 7589  cd ..
 7590  pw
 7591  pwd
 7592  ll
 7593  docker status
 7594  git status
 7595  git add api image/bucketlist/start_postgres.sh
 7596  git add api\ image/bucketlist/start_postgres.sh
 7597  git commit
 7598  git push
 7599  git status
 7600  git add docker-compose.yml
 7601  git committ
 7602  git commit
 7603  git push
 7604  ping google.com
 7605  git status
 7606  git add  README.md
 7607  git commit
 7608  git push
 7609  ping google.com
 7610  docker 
 7611  pwd
 7612  ping google.com
 7613  git status
 7614  ping google.com
 7615  git status
 7616  git add README.md
 7617  git commit
 7618  git push
 7619  pwd
 7620  exit
 7621  docker ps 
 7622  docker ps -a
 7623  docker --help
 7624  docker ps -a --help
 7625  docker ps -a --no-trunc
 7626  docker ps -a
 7627  docker images --help
 7628  docker images -a
 7629  docker images
 7630  docker images -a
 7631  docker rmi     846bae3c8d43  bb305a26a9f7    b971c7ba098b  270f67b0666b   d10e51ce206c     486dd573e48a    0be2ab7b3308
 7632  docker rmi  -f   846bae3c8d43  bb305a26a9f7    b971c7ba098b  270f67b0666b   d10e51ce206c     486dd573e48a    0be2ab7b3308
 7633  docker images
 7634  docker rmi --help
 7635  docker start --help
 7636  docker start -ai --help
 7637  docker ps -a
 7638  docker stop --help
 7639  docker kill --help
 7640  docker logs --help
 7641  docker exec --help
 7642  docker run --help
 7643  docker run -it --help
 7644  docker build --help
 7645  docker --help
 7646  ping google.com
 7647  printenv
 7648  docker pull --help
 7649  docker port --help
 7650  docker ps -a
 7651  docker port 0fd3915f7eb7
 7652  docker port 2b
 7653  docker push --help
 7654  docker images
 7655  docker pull postgres:9.6
 7656  history
 7657  docker tag --help
 7658  docker login --help
 7659  ping google.com
 7660  history
 7661  ping google.com
 7662  pwd
 7663  exit
 7664  pwd
 7665  ll
 7666  pwd
 7667  ll
 7668  vim docker-compose.yml
 7669  git status
 7670  git add docker-compose.yml
 7671  git commit
 7672  git push
 7673  ping google.com
 7674  cat ~/.ssh/id_rsa.pub
 7675  pbcopy ~/.ssh/id_rsa.pub
 7676  pwd
 7677  cd PROJECTS
 7678  cd topcoder-CI:CD
 7679  git init
 7680  git remote rename origin old-origin
 7681  git remote topsider-CI-CD-challenge origin old-origin
 7682  git remote add origin https://gitlab.com/mukiibi/topsider-CI-CD-challenge.git
 7683  ll
 7684  git add .
 7685  git commit -m "Initial commit"
 7686  git push -u origin master
 7687  git config --global user.name "David Mukiibi"
 7688  git config --global user.email "david.mukiibiq@gmail.com"
 7689  git push -u origin master
 7690  pwd
 7691  ll
 7692  cd resources
 7693  ll
 7694  cd android
 7695  ll
 7696  cd icon
 7697  ll
 7698  ..
 7699  ll
 7700  splash
 7701  ll
 7702  ..
 7703  ll
 7704  ..
 7705  ll
 7706  cd src
 7707  LL
 7708  CD PROJECTS/topcoder-CI:CD
 7709  ll
 7710  cd PROJECTS/topcoder-CI:CD
 7711  ll
 7712  touch build.gradle
 7713  vim build.gradle
 7714  vim config.xml
 7715  vim ionic.config.json
 7716  vim package.json
 7717  mkvirtualenv topcoder
 7718  rmvirtualenv topcoder
 7719  deactivate
 7720  rmvirtualenv topcoder
 7721  pwd
 7722  mkvirtualenv topcoder
 7723  lsvirtualenv
 7724  rmvirtualenv tensorflow_plaground
 7725  rmvirtualenv myenv
 7726  rmvirtualenv practice-env
 7727  rmvirtualenv react-testbed
 7728  lsvirtualenv
 7729  rmvirtualenv graphql
 7730  rmvirtualenv sims2
 7731  rmvirtualenv hc-environment
 7732  rmvirtualenv everything
 7733  lsvirtualenv
 7734  rmvirtualenv aquaculture
 7735  rmvirtualenv checkpointII
 7736  lsvirtualenv
 7737  rmvirtualenv kubernetes
 7738  lsvirtualenv
 7739  brew install node >= 8.x
 7740  brew upgrade python
 7741  node -v 
 7742  npm -v 
 7743  node -v
 7744  lssitepackages
 7745  brew install node
 7746  node -v
 7747  npm -v
 7748  npm i -g npm to update
 7749  sudo npm install -g cordova
 7750  ll
 7751  vim build.gradle
 7752  cordova -v
 7753  sudo npm install -g ionic
 7754  ionic cordova platform add android
 7755  cordova platform ls
 7756  cordova telemetry on
 7757  android
 7758  sdkmanager
 7759  vim ~/.bash_profile
 7760  pwd
 7761  cd
 7762  cd PROJECTS
 7763  ll
 7764  cd topcoder-CI:CD
 7765  ll
 7766  vim ~/.bash_profile
 7767  source ~/.bash_profile
 7768  pwd
 7769  cordova run --emulator
 7770  ionic cordova platform add android
 7771  ionic cordova build android
 7772  npm i -g ionic
 7773  sudo npm i -g ionic
 7774  npm i -g cordova
 7775  sudo npm i -g cordova
 7776  ionic cordova platform add android
 7777  ionic cordova run android --device
 7778  ionic cordova build android
 7779  ll
 7780  vim package.json
 7781  cd node_modules
 7782  ll
 7783  c @ionic/
 7784  cd @ionic/
 7785  ll
 7786  npm install @ionic/app-scripts@latest --save-dev
 7787  ll
 7788  ionic cordova build android
 7789  ..
 7790  ll
 7791  ..
 7792  ll
 7793  ionic cordova build android
 7794  ionic cordova run android --device
 7795  ll
 7796  ionic cordova build android --prod --release
 7797  ll
 7798  cd platforms
 7799  ll
 7800  cd android
 7801  ll
 7802  cd app
 7803  ll
 7804  ..
 7805  ll
 7806  ..
 7807  ll
 7808  cd www
 7809  ll
 7810  cd build
 7811  ll
 7812  ..
 7813  ll
 7814  ..
 7815  ll
 7816  pwd
 7817  ionic cordova run android --device
 7818  ionic cordova run android
 7819  npm install
 7820  ll
 7821  vim build.gradle
 7822  cordova run --emulator\n
 7823  sdk install gradle 4.6
 7824  brew install gradle
 7825  docker i mages
 7826  docker images
 7827  docker rmi    9e92c8430ba0    9e92c8430ba0
 7828  docker rmi   8f85dad731b5  8f85dad731b5    2db184a8078a
 7829  docker rmi    8f85dad731b5
 7830  docker rmi -f   8f85dad731b5
 7831  docker rmi -f  8f85dad731b5  8f85dad731b5    2db184a8078a
 7832  docker images
 7833  docker rmi -f 6229b1b7366f
 7834  docker images
 7835  docker rmi   9e92c8430ba0
 7836  docker rmi -f  9e92c8430ba0
 7837  docker images
 7838  docker rmi -f   2fbc03e3b5db
 7839  docker images
 7840  docker rmi   a8f7167de312   6e3b6a866c37     c7cca23b4760
 7841  docker images
 7842  docker ps -a
 7843  docker rm 0fd3915f7eb7 2b8e07e14ad6
 7844  history
 7845  ionic cordova run android
 7846  ll
 7847  touch build.gradle
 7848  vim build.gradle
 7849  ionic cordova run android
 7850  ll
 7851  touch .gitlab-ci.yml 
 7852  vim .gitlab-ci.yml 
 7853  git status
 7854  git add .gitlab-ci.yml
 7855  git add build.gradle
 7856  git add config.xml
 7857  git add package.json
 7858  git commit -m "add some more files"
 7859  git push
 7860  vim .gitlab-ci.yml 
 7861  code .
 7862  git status
 7863  git add .gitlab-ci.yml
 7864  git commit -m "add another configuration"
 7865  git push
 7866  ll
 7867  cd platforms
 7868  ll
 7869  cd android
 7870  ll
 7871  cd app
 7872  ll
 7873  vim build.gradle
 7874  cd ..
 7875  ll
 7876  pwd
 7877  ..
 7878  ll
 7879  ..
 7880  ll
 7881  platforms/android
 7882  ll
 7883  app
 7884  ll
 7885  ..
 7886  ll
 7887  ..
 7888  ll
 7889  ..
 7890  ll
 7891  git status
 7892  git add  .gitlab-ci.yml
 7893  git commit
 7894  git push
 7895  git add  .gitlab-ci.yml
 7896  git commit -m "edit"
 7897  git push
 7898  platforms/android
 7899  ll
 7900  cd app
 7901  ll
 7902  vim build.gradle
 7903  ..
 7904  ll
 7905  vim build.gradle
 7906  git add .gitlab-ci.yml
 7907  git commit -m "add files"
 7908  git push
 7909  ll
 7910  =
 7911  cd =
 7912  git status
 7913  git add =
 7914  git status
 7915  git commit -m "dependencies"
 7916  git push
 7917  export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdkVersion'  build.gradle | awk '{print $2}'`
 7918  printenv
 7919  export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdkVersion'  build.gradle | awk '{print $4}'`
 7920  printenv
 7921  export ANDROID_COMPILE_SDK=`grep '^[[:blank:]]+compileSdkVersion'  build.gradle | awk '{print $2}'`
 7922  printenv
 7923  git add .gitlab-ci.yml
 7924  git commit -m "configuration"
 7925  git push
 7926  pwd
 7927  ll
 7928  pwd
 7929  ..
 7930  ll
 7931  ..
 7932  cd Desktop
 7933  ll
 7934  wget --quiet --output-document=/tmp/sdk-tools-linux.zip https://dl.google.com/android/repository/sdk-tools-linux-2.0.zip
 7935  ll
 7936  cd /tmp
 7937  ll
 7938  sdk-tools-linux
 7939  /sdk-tools-linux
 7940  unzip /tmp/sdk-tools-linux.zip 
 7941  unzip sdk-tools-linux.zip 
 7942  ll
 7943  unzip sdk-tools-linux.zip -d /Desktop
 7944  unzip /sdk-tools-linux.zip -d /Desktop
 7945  unzip /tmp/sdk-tools-linux.zip -d /Desktop
 7946  unzip /tmp/sdk-tools-linux.zip
 7947  pwd
 7948  git status
 7949  git add .gitlab-ci.yml
 7950  git commit -m "edit some more configurations"
 7951  git push
 7952  echo $ANDROID_COMPILE_SDK
 7953  git add .gitlab-ci.yml
 7954  git commit -m "edit some more configurations"
 7955  git push
 7956  git add .gitlab-ci.yml
 7957  git commit -m "installing gradle"
 7958  git push
 7959  git add .gitlab-ci.yml
 7960  git commit -m "installing gradle"
 7961  git push
 7962  git add .gitlab-ci.yml
 7963  git commit -m "installing gradle"
 7964  git push
 7965  git add .gitlab-ci.yml
 7966  git commit -m "installing gradle"
 7967  git push
 7968  git add .gitlab-ci.yml
 7969  git commit -m "installing gradle"
 7970  git push
 7971  git add .gitlab-ci.yml
 7972  git commit -m "checking out gitlab"
 7973  git push
 7974  ./gradlew wrapper --gradle-version=4.6 --distribution-type=bin
 7975  brew install gradle
 7976  touch build.gradle
 7977  vim build.gradle
 7978  gradle wrapper
 7979  git status
 7980  git add  build.gradle
 7981  git add \t.gradle/ \tgradle/\tgradlew\tgradlew.bat
 7982  git commit -m "add gradlew"
 7983  git push
 7984  git status
 7985  git add .gitlab-ci.yml
 7986  git commit -m "chmod gradlew"
 7987  git push
 7988  Run gradlew tasks
 7989  gradlew tasks
 7990  .gradlew tasks
 7991  ./gradlew tasks
 7992  git status
 7993  git add \tsetting.gradle
 7994  git commit -m "add graddle settings"
 7995  git push
 7996  git add \tsetting.gradle
 7997  git add .gitlab-ci.yml
 7998  git commit -m "add graddle"
 7999  git push
 8000  git add .gitlab-ci.yml
 8001  git commit -m "add graddle"
 8002  git push
 8003  git add .gitlab-ci.yml
 8004  git commit -m "add graddle"
 8005  git push
 8006  git add .gitlab-ci.yml
 8007  git commit -m "add graddle"
 8008  git push
 8009  git add .gitlab-ci.yml
 8010  git commit -m "edit graddle"
 8011  git push
 8012  git add .gitlab-ci.yml
 8013  git commit -m "edit graddle"
 8014  git push
 8015  git add .gitlab-ci.yml
 8016  git commit -m "print gradlew tasks"
 8017  git push
 8018  git add .gitlab-ci.yml
 8019  git commit -m "print gradlew tasks"
 8020  git push
 8021  pwd
 8022  exit
 8023  git add .gitlab-ci.yml
 8024  git commit -m "debuggiing build fail"
 8025  git push
 8026  git add .gitlab-ci.yml
 8027  git commit -m "debuggiing build fail"
 8028  git push
 8029  ll
 8030  cd platforms
 8031  ll
 8032  cd android
 8033  ll
 8034  ./gradlew test
 8035  gradle wrapper
 8036  ./gradlew test
 8037  ./gradlew wrapper
 8038  gradle wrapper
 8039  ./gradlew test
 8040  gradle wrapper
 8041  gradle wrapper --gradle-version 4.5.1
 8042  ./gradlew assembleDebug
 8043  gradle wrapper --gradle-distribution-url https\://services.gradle.org/distributions/gradle-4.5.1-all.zip
 8044  ./gradlew assembleDebug
 8045  pwd
 8046  exit
 8047  ionic cordova run android --device
 8048  ll
 8049  cd ..
 8050  ll
 8051  ..
 8052  ll
 8053  ionic cordova run android --device
 8054  exit
 8055  pwd
 8056  exit
 8057  pwd
 8058  exit
 8059  ll
 8060  cd PROJECTS
 8061  ll
 8062  cd topcoder
 8063  cd ..
 8064  cd topcoder-CI:CD
 8065  ll
 8066  cd platforms
 8067  ll
 8068  cd android
 8069  ll
 8070  history
 8071  ./gradlew test
 8072  exit
 8073  docker images
 8074  docker pull node:alpine
 8075  docker pull python:3.*
 8076  docker pull python:3
 8077  docker pull postgres:alpine
 8078  docker images
 8079  cd PROJECTS
 8080  l
 8081  git clone git@github.com:john555/bucketlist-api.git
 8082  git clone git@github.com:john555/bucketlist-react.git
 8083  ll
 8084  cd react-app
 8085  ll
 8086  code .
 8087  ll
 8088  cd bucketlist-api
 8089  ll
 8090  touch Dockerfile
 8091  bucketlist
 8092  ll
 8093  cd..
 8094  ..
 8095  ll
 8096  bucketlist-react
 8097  ll
 8098  touch Dockerfile
 8099  docker images
 8100  ll
 8101  pwd
 8102  docker build .
 8103  ll
 8104  pwd
 8105  docker build -t mukiibi:frontend .
 8106  docker run -d mukiibi:frontend
 8107  docker ps -a
 8108  docker logs 032b0eb55a61
 8109  docker run -d mukiibi:frontend
 8110  docker ps -a
 8111  docker logs 0c
 8112  docker images
 8113  docker ps -a
 8114  docker rm 0cf614995ebb  032b0eb55a61  d782c11bfb6c  daf94d5ce82b
 8115  docker ps -a
 8116  docker images
 8117  docker rmi  390de1dbbcff
 8118  docker images
 8119  docker run -d mukiibi:frontend
 8120  docker build -t mukiibi:frontend .
 8121  docker run -d mukiibi:frontend
 8122  docker ps -a
 8123  docker logs b9
 8124  docker network
 8125  docker network ls
 8126  docker network rm dbde0016fd4e
 8127  docker network rm 1c
 8128  docker network ls
 8129  docker inspect b9
 8130  docker ps -a
 8131  docker run -d -p 3000:3000 mukiibi:frontend
 8132  docker ps -a
 8133  docker logs 9c
 8134  docker images
 8135  docker rmi dc81212492c0
 8136  docker rmi -f dc81212492c0
 8137  docker ps -a
 8138  docker rm 9c94610355b2
 8139  docker rm b9e33805daf7
 8140  docker build -t mukiibi:frontend .
 8141  docker run -d -p 3000:3000 mukiibi:frontend
 8142  docker ps -a
 8143  docker exec c0 serve -s build
 8144  docker ps -a
 8145  docker logs c0
 8146  docker exec c0 serve -s build
 8147  docker start -ai c0
 8148  docker logs c0
 8149  docker ps -a
 8150  docker rm c0
 8151  docker images
 8152  docker rmi 1a
 8153  docker build -t mukiibi:frontend .
 8154  docker run -d -p 3000:3000 mukiibi:frontend
 8155  docker ps -a
 8156  docker logs d1
 8157  ll
 8158  ..
 8159  ll
 8160  mkdir .circleci
 8161  cd .circleci
 8162  touch .config.yml
 8163  pwd
 8164  cd ..
 8165  ll
 8166  git status
 8167  git init
 8168  cd bucketlist-api
 8169  git status
 8170  ..
 8171  ll
 8172  git remote add origin git@github.com:davidmukiibi/react-app.git
 8173  git push -u origin master
 8174  git status
 8175  git add .
 8176  git commit -m "
 8177  git commit -m "first commit"
 8178  git push -u origin master
 8179  git add .
 8180  git commit -m "fine tune circleci config file"
 8181  git push
 8182  git add .
 8183  git commit -m "fine tune circleci config file"
 8184  git push
 8185  git add .
 8186  git commit -m "fine tune circleci config file"
 8187  git push
 8188  git add .
 8189  git commit -m "fine tune circleci config file"
 8190  git push
 8191  git add .
 8192  git commit -m "fine tune circleci config file"
 8193  git push
 8194  git add .
 8195  git commit -m "fine tune circleci config file"
 8196  git push
 8197  git add .
 8198  git commit -m "fine tune circleci config file"
 8199  git push
 8200  git add .
 8201  git commit -m "fine tune circleci config file"
 8202  git push
 8203  git add .
 8204  git commit -m "fine tune circleci config file"
 8205  git push
 8206  git add .
 8207  git commit -m "fine tune circleci config file"
 8208  git push
 8209  git add .
 8210  git commit -m "fine tune circleci config file"
 8211  git push
 8212  git add .
 8213  git commit -m "fine tune circleci config file"
 8214  git push
 8215  git add .
 8216  git status
 8217  git commit -m "fine tune circleci config file"
 8218  git push
 8219  git status
 8220  git add .
 8221  git commit -m "fine tune circleci config file"
 8222  git push
 8223  git add .
 8224  git commit -m "fine tune circleci config file"
 8225  git push
 8226  git add .
 8227  git commit -m "fine tune circleci config file"
 8228  git commit -m "fine tune circleci config"
 8229  git push
 8230  git add .
 8231  git commit -m "fine tune circleci config"
 8232  git push
 8233  git add .
 8234  git commit -m "fine tune circleci config"
 8235  git push
 8236  git add .
 8237  git commit -m "fine tune circleci config"
 8238  git push
 8239  git add .
 8240  git commit -m "fine tune circleci config"
 8241  git push
 8242  git add .
 8243  git commit -m "fix gulp error"
 8244  git push
 8245  git add .
 8246  git commit -m "decouple sass compilation"
 8247  git push
 8248  git add .
 8249  git commit -m "fix dependency issues"
 8250  git push
 8251  git add .
 8252  git commit -m "fix gulp issues"
 8253  git push
 8254  git add .
 8255  git commit -m "fix gulp issues"
 8256  git push
 8257  git add .
 8258  git commit -m "install gulp cli"
 8259  git push
 8260  git add .
 8261  git commit -m "install gulp cli"
 8262  git push
 8263  git add .
 8264  git commit -m "install gulp cli"
 8265  git add .
 8266  git commit -m "install gulp cli"
 8267  git push
 8268  git add .
 8269  git commit -m "install gulp cli"
 8270  git push
 8271  git add .
 8272  git commit -m "install gulp cli"
 8273  git push
 8274  git add .
 8275  git commit -m "install gulp cli"
 8276  git push
 8277  git add .
 8278  git commit -m "add docker image installation job"
 8279  git push
 8280  git add .
 8281  git commit -m "add docker image installation job"
 8282  git push
 8283  git add .
 8284  git commit -m "add docker image installation job"
 8285  git push
 8286  git add .
 8287  git commit -m "add docker image installation job"
 8288  git push
 8289  git add .
 8290  git commit -m "add docker image installation job"
 8291  git push
 8292  git add .
 8293  git commit -m "add docker image installation job"
 8294  git push
 8295  git add .
 8296  git commit -m "docker installation job"
 8297  git push
 8298  git status
 8299  git add .
 8300  git commit -m "docker installation job"
 8301  git push
 8302  git add .
 8303  git commit -m "docker installation job"
 8304  git push
 8305  history
 8306  git add .
 8307  git commit -m "build and push docker image"
 8308  git push
 8309  git add .
 8310  git commit -m "build and push docker image"
 8311  git push
 8312  git add .
 8313  git commit -m "build and push docker image"
 8314  git push
 8315  git add .
 8316  git commit -m "build and push docker image"
 8317  git push
 8318  git add .
 8319  git commit -m "build and push docker image"
 8320  git push
 8321  whoami
 8322  git add .
 8323  git commit -m "echo user"
 8324  git push
 8325  git add .
 8326  git commit -m "echo user"
 8327  git push
 8328  git commit -m "echo user"
 8329  git add .
 8330  git commit -m "echo user"
 8331  git push
 8332  git add .
 8333  git commit -m "echo user"
 8334  git push
 8335  whoami
 8336  git add .
 8337  git commit -m "echo user"
 8338  git push
 8339  git add .
 8340  git commit -m "echo user"
 8341  git push
 8342  git add .
 8343  git commit -m "create user group"
 8344  git push
 8345  git add .
 8346  git commit -m "echo pwd"
 8347  git push
 8348  git add .
 8349  git commit -m "echo ls"
 8350  git push
 8351  git add .
 8352  git commit -m "echo ls"
 8353  git push
 8354  git add .
 8355  git commit -m "echo ls and pwd"
 8356  git push
 8357  git add .
 8358  git commit -m "echo ls and pwd"
 8359  git push
 8360  git add .
 8361  git commit -m "run docker commands"
 8362  git push
 8363  git add .
 8364  git commit -m "run docker commands to build the image"
 8365  git push
 8366  git add .
 8367  git commit -m "run docker commands to build the image"
 8368  git push
 8369  git add .
 8370  git commit -m "fix user login"
 8371  git push
 8372  git add .
 8373  git commit -m "fix user login"
 8374  git push
 8375  git add .
 8376  git commit -m "fix user login"
 8377  git push
 8378  git add .
 8379  git commit -m "fix user login"
 8380  git push
 8381  git add .
 8382  git commit -m "fix user login"
 8383  git push
 8384  git add .
 8385  git commit -m "fix user login"
 8386  git push
 8387  git add .
 8388  git commit -m "fix user login"
 8389  git push
 8390  git add .
 8391  git commit -m "fix user login"
 8392  git push
 8393  git add .
 8394  git commit -m "fix user login"
 8395  git push
 8396  git add .
 8397  git commit -m "fix user login"
 8398  git push
 8399  git add .
 8400  git commit -m "fix user login"
 8401  git push
 8402  git add .
 8403  git commit -m "fix user login"
 8404  git push
 8405  git add .
 8406  git commit -m "fix user login"
 8407  git push
 8408  git add .
 8409  git commit -m "fix docker installation issues"
 8410  git push
 8411  sudo service docker start
 8412  sudo systemctl restart docker
 8413  git add .
 8414  git commit -m "start docker"
 8415  git push
 8416  git add .
 8417  git commit -m "start docker"
 8418  git push
 8419  git add .
 8420  git commit -m "start docker"
 8421  git push
 8422  git add .
 8423  git commit -m "start docker"
 8424  git push
 8425  cd PROJECTS
 8426  git clone git@github.com:andela/learningmap.git
 8427  hostname
 8428  man sg
 8429  sg --help
 8430  git add .
 8431  git commit -m "start docker"
 8432  git push
 8433  ping google.com
 8434  ll
 8435  learningmap
 8436  ll
 8437  cd D2
 8438  ll
 8439  cd D2\ DevOps
 8440  ll
 8441  git add .
 8442  git commit -m "start docker"
 8443  git push
 8444  git add .
 8445  git commit -m "start docker"
 8446  git push
 8447  git add .
 8448  git commit -m "start docker"
 8449  git push
 8450  git add .
 8451  git commit -m "start docker"
 8452  git push
 8453  git add .
 8454  git commit -m "start docker"
 8455  git push
 8456  ..
 8457  .
 8458  ..
 8459  ll
 8460  mkdir topcoder\ challenges
 8461  cd topcoder\ challenges
 8462  git clone git@gitlab.com:lets-app/ios-app-latest.git
 8463  git clone git@gitlab.com:lets-app/lets-refactored-backend.git
 8464  ll
 8465  lets-refactored-backend
 8466  ll
 8467  node -v
 8468  local
 8469  ll
 8470  local
 8471  ll
 8472  cd local
 8473  ll
 8474  docker-compose up -d
 8475  docker ps -a
 8476  virtualenv list
 8477  lsvirtualenv
 8478  virtualenv rm topcoder
 8479  rmvirtualenv topcoder
 8480  mkvirtualenv topcoder
 8481  ll
 8482  printenv
 8483  export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
 8484  printenv
 8485  cd PROJECTS
 8486  ll
 8487  cd topcoder
 8488  ll
 8489  ..
 8490  cd topcoder\ challenges
 8491  ll
 8492  lets-refactored-backend
 8493  ll
 8494  cd local
 8495  ll
 8496  mkvirtualenv topcoder
 8497  pip uninstall virtualenvwrapper
 8498  pip install virtualenvwrapper
 8499  sudo pip install virtualenvwrapper
 8500  mkvirtualenv topcoder
 8501  pwd
 8502  exit
 8503  /Users/davidmukiibi/PROJECTS/topcoder\ challenges/lets-refactored-backend/local
 8504  ll
 8505  workon topcoder
 8506  docker ps -a
 8507  npm install
 8508  ll
 8509  ..
 8510  ll
 8511  pwd
 8512  npm install
 8513  workon vof
 8514  rmvirtualenv topcoder
 8515  mkvirtualenv topcoder
 8516  ll
 8517  pwd
 8518  npm install
 8519  localhost
 8520  pwd
 8521  touch .env
 8522  ll
 8523  vim .env
 8524  pwd
 8525  npm run start
 8526  vim /Users/davidmukiibi/.npm/_logs/2018-03-15T16_14_45_766Z-debug.log
 8527  vim .env
 8528  npm run start
 8529  cd local
 8530  ll
 8531  npm run start
 8532  ..
 8533  pwd
 8534  docker ps -a
 8535  ll
 8536  npm run build
 8537  npm start
 8538  ll
 8539  vim /var/log/lets-api.log
 8540  vim app/server.js
 8541  npm run start
 8542  vim /Users/davidmukiibi/.npm/_logs/2018-03-15T16_28_03_378Z-debug.log
 8543  npm run install
 8544  npm install
 8545  npm run start
 8546  ll
 8547  cd node_modules
 8548  ll
 8549  ..
 8550  ll
 8551  npm run install
 8552  npm install -g npm-install-missing
 8553  npm-install-missing
 8554  npm run install
 8555  npm run rts:start
 8556  npm run install
 8557  pwd
 8558  ll
 8559  npm -v
 8560  node -v
 8561  ll
 8562  npm install
 8563  npm run start
 8564  ll
 8565  vim app/server.js
 8566  vim prepare_dist.sh
 8567  ll
 8568  cd config
 8569  ll
 8570  ..
 8571  cd app
 8572  ll
 8573  vim server.js
 8574  ..
 8575  pwd
 8576  npm run start
 8577  sudo ss -lptn 'sport = :4000'
 8578  sudo netstat -nlp | grep :4000
 8579  netstat -tulpn
 8580  netstat -vanp tcp | grep 4000
 8581  netstat -vanp tcp | grep 3000
 8582  ll
 8583  pwd
 8584  node_modules
 8585  ll
 8586  ..
 8587  ll
 8588  real-time-server
 8589  ll
 8590  vim server.js
 8591  ..
 8592  ll
 8593  node_modules
 8594  ll
 8595  cd dotenv
 8596  ll
 8597  vim config.js
 8598  npm run install
 8599  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
 8600  command -v nvm
 8601  vim ~/.bash_profile
 8602  pwd
 8603  exit
 8604  command -v nvm
 8605  nvm install node
 8606  cd PROJECTS
 8607  cd topcoder\ challenges
 8608  ll
 8609  workon topcoder
 8610  nvm install node
 8611  npm run install
 8612  ll
 8613  cd lets-refactored-backend
 8614  npm run install
 8615  vim package.json
 8616  npm run start
 8617  vim package.json
 8618  nvm install node 59
 8619  npm install
 8620  npm rebuild
 8621  npm run start
 8622  vim /Users/davidmukiibi/PROJECTS/topcoder challenges/lets-refactored-backend/node_modules/winston/lib/winston/transports/file.js
 8623  ll
 8624  vim prepare_dist.sh
 8625  vim app/server.js
 8626  cd real-time-server
 8627  ll
 8628  cd common
 8629  ll
 8630  ..
 8631  ll
 8632  npm run start
 8633  ll
 8634  cd config
 8635  ll
 8636  ..
 8637  cd docs
 8638  ll
 8639  ..
 8640  cd app
 8641  ll
 8642  ..
 8643  ll
 8644  cd api
 8645  ll
 8646  ..
 8647  ll
 8648  vim package.json
 8649  npm run workers:start
 8650  npm run start
 8651  npm run rts:start
 8652  vim .env
 8653  node -v
 8654  npm -v
 8655  pwd
 8656  /Users/davidmukiibi/PROJECTS/topcoder\ challenges
 8657  ll
 8658  cd ios-app-latest
 8659  ll
 8660  git checkout develop
 8661  git submodule init
 8662  git submodule update
 8663  cd src/LetsApp
 8664  pod install
 8665  history
 8666  nvm install node 8.9.4
 8667  nvm run node 8.9.4
 8668  npm uninstall node
 8669  pwd
 8670  nvm install node 8.9.4
 8671  nvm run node 8.9.4
 8672  npm uninstall node
 8673  node
 8674  node -v
 8675  brew search node
 8676  brew unlink node
 8677  brew install node@8
 8678  echo 'export PATH="/usr/local/opt/node@8/bin:$PATH"' >> ~/.zshrc
 8679  vim ~/.zshrc
 8680  brew link node@8
 8681  echo 'export PATH="/usr/local/opt/node@8/bin:$PATH"' >> ~/.zshrc
 8682  brew link --force node@8
 8683  brew link --overwrite node@8
 8684  node -v
 8685  rm '/usr/local/bin/node'
 8686  brew link node@8
 8687  node -v
 8688  npm run start\n
 8689  exit
 8690  cd PROJECTS
 8691  ll
 8692  git clone
 8693  git clone git@gitlab.com:lets-app/lets-refactored-backend.git
 8694  ll
 8695  cd lets-refactored-backend
 8696  touch JWT_SECRET=helloletsjwtsecret\nSINCH_FROM_NUMBER=+12023679466\nSINCH_APP_KEY=14810489-3ba2-4c52-93b6-15c852eafe92\nSINCH_APP_SECRET=th9q4mp2wUOmt1Gduj4MRw==\nAWS_ACCESS_KEY_ID=AKIAJDMKA77QFTZE3OCA\nAWS_SECRET_ACCESS_KEY=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\nGOOGLE_CLIENT_ID=440928843764-iet8libsr6m2v9uav0i2dfkhjiipd3on.apps.googleusercontent.com\nGOOGLE_CLIENT_SECRET=5WSyYYwJL0mjvlKb6X8tUr7i\nGOOGLE_REDIRECT_URI=http://localhost:5000/google/callback\nENABLE_FORCE_SIGNUP=0\nRETHINKDB_URL=rethinkdb://localhost:28015/lets\nRABBITMQ_HOST=amqp://localhost:5672/?heartbeat=30\n
 8697  touch .env
 8698  vim .env
 8699  ll
 8700  rm JWT_SECRET=helloletsjwtsecret
 8701  ll
 8702  docker ps -a
 8703  ll
 8704  pwd
 8705  npm run start
 8706  mkvirtualenv letsbackend
 8707  ll
 8708  npm install
 8709  npm run start
 8710  brew uninstall npm
 8711  node -v
 8712  npm -v
 8713  npm run start
 8714  sudo npm run start
 8715  npm run start
 8716  vim app/server.js
 8717  ll
 8718  config
 8719  ll
 8720  vim default.js
 8721  ..
 8722  vim .env
 8723  docker ps -a
 8724  sudo npm run start
 8725  sudo npm run start > logs.txt
 8726  ll
 8727  code logs.txt
 8728  docker ps -a
 8729  docker exec b4 r.dbCreate('lets').run(conn, callback);
 8730  docker exec b4 "r.dbCreate('lets').run(conn, callback);"
 8731  docker stop b4
 8732  docker start -ai b4
 8733  docker exec b4 "r.dbCreate('lets').run(conn, callback);"
 8734  docker exec b4 "r.dbCreate('lets');"
 8735  exit
 8736  cd PROJECTS
 8737  cd lets-refactored-backend
 8738  ll
 8739  npm run start
 8740  sudo npm run start
 8741  cd local
 8742  ll
 8743  vim docker-compose.yml
 8744  ll
 8745  ..
 8746  ll
 8747  rm logs.txt
 8748  ll
 8749  docker ps-a
 8750  docker ps -a
 8751  node -v
 8752  docker stop c8 b4
 8753  r.dbCreate('superheroes').run(conn, callback);
 8754  ll
 8755  docker stop c8 b4
 8756  docker ps -a
 8757  ll
 8758  cd local
 8759  ll
 8760  docker-compose up -d
 8761  docker ps -a
 8762  sudo npm run start
 8763  docker ps -a
 8764  docker logs c8
 8765  docker ps -a
 8766  docker logs b4
 8767  ll
 8768  ..
 8769  ll
 8770  vim .env
 8771  sudo npm run start
 8772  npm run start
 8773  vim .env
 8774  sudo npm run start
 8775  vim .env
 8776  sudo npm run start
 8777  vim .env
 8778  sudo npm run start
 8779  sudo npm run start > logs.txt
 8780  cd PROJECTS
 8781  cd lets-refactored-backend
 8782  ll
 8783  code logs.txt
 8784  vim .env
 8785  sudo npm run start > logs.txt
 8786  code logs.txt
 8787  sudo npm run start > logs.txt
 8788  sudo npm run start
 8789  docker ps -a
 8790  docker rm -f c8 b4
 8791  ll
 8792  docker ps -a
 8793  docker images
 8794  docker-compose up -d
 8795  ll
 8796  local
 8797  cd local
 8798  ll
 8799  docker-compose up -d
 8800  ..
 8801  pwd
 8802  ll
 8803  npm run start
 8804  sudo npm run start
 8805  sudo npm run start > logs.txt
 8806  pwd
 8807  npm run workers:start
 8808  sudo npm run workers:start
 8809  npm run rts:start
 8810  exit
 8811  ping google.com
 8812  exit
 8813  vim ~/zsh
 8814  vim ~/.bashrc
 8815  vim ~/.zshrc
 8816  cd PROJECTS
 8817  git clone git@github.com:builtinnya/circleci-2.0-beta-docker-example.git
 8818  ping google.com
 8819  ll
 8820  cd react-app
 8821  ll
 8822  git status
 8823  git add .circleci/config.yml
 8824  git commit -m "docker build and push to docker hub"
 8825  git push
 8826  ping google.com
 8827  exit
 8828  git push
 8829  ping google.com
 8830  git add .circleci/config.yml
 8831  git commit -m "docker build and push to docker hub"
 8832  git push
 8833  git add .circleci/config.yml
 8834  git commit -m "docker build and push to docker hub"
 8835  git push
 8836  git add .circleci/config.yml
 8837  git commit -m " fix syntax errors in config.yml and docker build and push to docker hub"
 8838  git push
 8839  git add .circleci/config.yml
 8840  git commit -m "docker image rename"
 8841  git push
 8842  git add .circleci/config.yml
 8843  git commit -m "minor deletions"
 8844  git push
 8845  git add .circleci/config.yml
 8846  git commit -m "minor deletions and additions"
 8847  git push
 8848  history
 8849  exit
 8850  git add .circleci/config.yml
 8851  git commit -m "correct docker repository naming"
 8852  git push
 8853  docker images
 8854  docker pull mukiibi/react-app
 8855  docker pull mukiibi:react-app
 8856  docker login
 8857  docker pull mukiibi:react-app
 8858  docker pull mukiibi/react-app
 8859  git add .circleci/config.yml
 8860  git commit -m "correct docker repository naming"
 8861  git push
 8862  docker pull react-app
 8863  docker pull --all-tags mukiibi/react-app|sha256:316b6ac56f6ada5474e276db862aa3bc1d754ead895ef28783176bda5d4c99ab
 8864  docker pull --all-tags mukiibi/react-app|@316b6ac56f6ada5474e276db862aa3bc1d754ead895ef28783176bda5d4c99ab
 8865  docker pull --all-tags mukiibi/react-app
 8866  docker images
 8867  docker run -d 1b0b0aa65430 -p 3000:3000
 8868  docker ps -a
 8869  docker logs 2e
 8870  docker run -d 1b0b0aa65430 -p 3000:3000
 8871  docker ps -a
 8872  docker run -d 1b0b0aa65430 -P 3000:3000
 8873  docker ps -a
 8874  docker run -d 1b0b0aa65430
 8875  docker ps -a
 8876  history
 8877  docker run -d -p 3000:3000 mukiibi:react-app
 8878  docker images
 8879  docker run -d -p 3000:3000 mukiibi/react-app:react-app
 8880  docker run -d -p 3000:3000  1b0b0aa65430
 8881  docker ps -a
 8882  docker stop 0b
 8883  docker stop 01
 8884  docker ps -a
 8885  docker stop 33
 8886  docker ps -a
 8887  docker rm -f $(docker ps -q)
 8888  docker rm -f $(docker ps -a)
 8889  docker rm 01
 8890  docker ps -q
 8891  docker ps -aq
 8892  docker rm -f $(docker ps -aq)
 8893  docker ps -a
 8894  docker images
 8895  ll
 8896  pwd
 8897  ..
 8898  cd react-app
 8899  bucketlist-api
 8900  ll
 8901  vim Dockerfile
 8902  ll
 8903  pwd
 8904  docker images
 8905  docker build -t mukiibi/api-image .
 8906  cd PROJECTS
 8907  ll
 8908  cd react-app
 8909  ll
 8910  cd bucketlist-api
 8911  ll
 8912  cd database
 8913  ll
 8914  docker build -t mukiibi/react-database .
 8915  docker images
 8916  docker build -t mukiibi/react-database .
 8917  docker ps -a
 8918  docker images
 8919  docker build -t mukiibi/api-image .
 8920  docker build -t mukiibi/react-database .
 8921  docker images
 8922  docker rmi -f d1
 8923  docker rmi -f be 28
 8924  docker images
 8925  docker rmi -f 0a
 8926  docker images
 8927  docker build -t mukiibi:react-database .
 8928  docker images
 8929  docker build -t mukiibi:api-image .
 8930  docker images
 8931  docker rmi -f af 23
 8932  docker images
 8933  docker rmi -f 23ac
 8934  docker images
 8935  docker build -t mukiibi/api-image .
 8936  docker build -t mukiibi:react-database .
 8937  docker images
 8938  docker build -t mukiibi:api-image .
 8939  docker images
 8940  docker rmi -f 1b
 8941  docker images
 8942  docker rmi -f 81
 8943  docker images
 8944  pwd
 8945  /Users/davidmukiibi/PROJECTS/react-app/bucketlist-api/database
 8946  ..
 8947  ll
 8948  pwd
 8949  ..
 8950  pwd
 8951  ll
 8952  docker images
 8953  pwd
 8954  docker build -t mukiibi:frontend-react .
 8955  cd PROJECTS
 8956  ll
 8957  cd react-app
 8958  ll
 8959  docker-compose -d up
 8960  docker-compose up -d
 8961  docker build -t mukiibi:api-image .
 8962  docker ps -a
 8963  docker-compose up -d
 8964  docker ps -a
 8965  docker logs 9d
 8966  docker logs 04
 8967  docker ps -a
 8968  docker logs 69
 8969  docker logs 04
 8970  docker ps -a
 8971  docker logs 9d
 8972  docker stop ${docker -s -aq
 8973  docker stop ${docker -s -aq}
 8974  docker stop $(docker -s -aq)
 8975  docker stop $(docker -aq)
 8976  docker ps -a
 8977  docker stop 9d 04 69
 8978  docker rm -f 9d 04 69
 8979  docker ps -a
 8980  docker build -t mukiibi:api-image .
 8981  docker-compose up -d
 8982  docker ps -a
 8983  docker logs c0
 8984  docker logs fa
 8985  psql -h localhost -p 5432
 8986  psql -h localhost -p 5432 -U postgres
 8987  docker logs fa
 8988  docker images
 8989  docker rmi -f a4 9e
 8990  docker images
 8991  docker rmi -f 62
 8992  docker images
 8993  ll
 8994  python dbmigration.py db --help
 8995  workon checkpoint2
 8996  python dbmigration.py db --help
 8997  pip install flasgger
 8998  pip install --upgrade pip
 8999  python dbmigration.py db --help
 9000  docker logs fa
 9001  ll
 9002  mkvirtualenv reactapi
 9003  docker ps -a
 9004  docker exec fa ls
 9005  docker rm -f fa c0 02
 9006  docker exec fa ls
 9007  docker ps -a
 9008  docker-compose up -d
 9009  docker ps -a
 9010  docker logs 37
 9011  docker ps -a
 9012  docker rm -f 79 37 c4
 9013  docker ps -a
 9014  docker-compose up -d
 9015  docker ps -a
 9016  docker logs 22
 9017  docker ps -a
 9018  docker rm -f 97 22 16
 9019  ll
 9020  history
 9021  docker build -t mukiibi:api-image .
 9022  docker-compose up -d
 9023  docker ps -a
 9024  docker logs 49
 9025  docker ps -a
 9026  docker logs ec
 9027  docker ps -a
 9028  docker logs 49
 9029  docker ps -a
 9030  docker-compose up -d
 9031  docker exec 49 python dbmigration.py db init
 9032  docker images
 9033  docker rmi -f 15
 9034  docker ps -a
 9035  docker rm -f 5f 49 ec
 9036  docker ps -a
 9037  docker images
 9038  docker rmi -f 15
 9039  docker rmi -f fd
 9040  docker images
 9041  docker-compose up -d
 9042  docker build -t mukiibi:api-image .
 9043  docker-compose up -d
 9044  docker ps -a
 9045  docker logs 33
 9046  docker logs 9b
 9047  docker ps -a
 9048  docker exec 9b python dbmigration.py db init
 9049  docker build -t mukiibi:api-image .
 9050  docker exec 9b python dbmigration.py db init
 9051  docker build -t mukiibi:api-image .
 9052  docker ps -a
 9053  docker rm -f 33 9b 54
 9054  docker ps -a
 9055  docker-compose up -d
 9056  docker ps -a
 9057  docker logs fc
 9058  docker ps -a
 9059  docker exec fc python dbmigration.py db init
 9060  cd PROJECTS
 9061  cd react-app
 9062  ll
 9063  cd bucketlist-api
 9064  ll
 9065  mkdir testapienv
 9066  rm testapienv
 9067  rm rf testapienv
 9068  mkvirtualenv testapienv
 9069  ll
 9070  pip install -r requirements.txt
 9071  docker ps -a
 9072  docker stop f5 fc 89
 9073  psql
 9074  export DATABASE_URL=postgres://localhost:5432/reactdb
 9075  export APP_SECRET=thisisasecretkey
 9076  export REQUESTS_ORIGIN=localhost
 9077  python run.py
 9078  ll
 9079  npm start
 9080  mkvirtualenv react
 9081  ll
 9082  npm install -g serve
 9083  npm start
 9084  npm install -g gulp-cli
 9085  gulp sass
 9086  npm install gulp
 9087  gulp sass
 9088  npm start
 9089  rmvirtualenv react
 9090  workon topcoder
 9091  rmvirtualenv react
 9092  docker imags
 9093  docker images
 9094  docker rmi b1
 9095  docker ps -a
 9096  docker rm -f 89 fc f5
 9097  docker ps -a
 9098  docker rmi b1
 9099  ll
 9100  docker build -t mukiibi:api-image .
 9101  ll
 9102  docker-compose up -d
 9103  docker ps -a
 9104  docker logs bc
 9105  docker ps -a
 9106  docker stop bc 315b
 9107  docker stop bc 31 5b
 9108  docker start 5b
 9109  docker logs 5b
 9110  docker ps -a
 9111  docker exec bc python dbmigration.py db init
 9112  docker start bc
 9113  docker ps -a
 9114  docker logs bc
 9115  docker build -t mukiibi:api-image .
 9116  docker ps -a
 9117  docker-compose up -d
 9118  docker ps -a
 9119  docker logs 203
 9120  docker exec 203 python dbmigration.py db init
 9121  docker ps -a
 9122  docker stop e6 20 5b
 9123  pip install Django==2.0.3
 9124  brew --help
 9125  brew list --help
 9126  brew list
 9127  pwd
 9128  ..
 9129  cd
 9130  mkvirtualenv personal-backend
 9131  pip install django
 9132  pip install django==2.0.3
 9133  pip install Django==2.0.3
 9134  pip uninstall django
 9135  pip install Django==2.0.3
 9136  pip list
 9137  brew install Django
 9138  pip3 install Django==2.0.3
 9139  pip list
 9140  brew list
 9141  pip install Django==2.0.3
 9142  pip uninstall Django==2.0.3
 9143  pip list
 9144  pip uninstall SQLAlchemy
 9145  pip list
 9146  pip uninstall pytz
 9147  exit
 9148  pip install Django==2.0.3
 9149  pip3 install Django==2.0.3
 9150  pip list
 9151  pip3 list
 9152  ll
 9153  mkdir PersonalWebsite
 9154  cd PersonalWebsite
 9155  ll
 9156  mkdir frontend
 9157  mkdir backend
 9158  ll
 9159  cd backend
 9160  ll
 9161  ..
 9162  ll
 9163  django-admin startproject mywebsite
 9164  ll
 9165  cd mywebsite
 9166  ll
 9167  vim manage.py
 9168  cd mywebsite
 9169  ll
 9170  ..
 9171  ll
 9172  cd mywebsite
 9173  ll
 9174  python manage.py runserver 
 9175  python3 manage.py runserver 
 9176  ll
 9177  mywebsite
 9178  ll
 9179  ..
 9180  ll
 9181  pwd
 9182  code .
 9183  python -m pip install -U pylint
 9184  python -m pip3 install -U pylint
 9185  python3 -m pip install -U pylint
 9186  code .
 9187  ..
 9188  pwd
 9189  code .
 9190  history
 9191  docker build -t mukiibi:api-image .
 9192  ll
 9193  vim Dockerfile
 9194  cd bucketlist-api
 9195  ll
 9196  docker build -t mukiibi:api-image .
 9197  ll
 9198  docker-compose up -d
 9199  docker ps -a
 9200  docker logs bf
 9201  docker ps -a
 9202  docker exec bf python dbmigration.py init
 9203  docker ps -a
 9204  docker rm -f bf 6a 0b
 9205  docker-compose up -d
 9206  docker s -a
 9207  docker ps -a
 9208  docker ps
 9209  docker logs 34
 9210  docker exec 34 python dbmigrations.py db init
 9211  docker exec 34 python dbmigration.py db init
 9212  docker exec 34 python ls
 9213  docker exec 34 ls
 9214  pwd
 9215  cd PROJECTS
 9216  ll
 9217  cd react-app
 9218  ll
 9219  cd bucketlist-api
 9220  ll
 9221  export DATABASE_URL=postgresql://react:react1234567890react@localhost/bucketlist && \\nexport TEST_DATABASE_URL=postgresql://react:react1234567890react@localhost/bucketlist_test && \\nexport APP_SECRET=iigMnxLgWdFJppmd3JgZRzOUYLgmjaXX && \\nexport REQUESTS_ORIGIN=*
 9222  printenv
 9223  docker ps -a
 9224  docker stop 91 34 0f
 9225  python run.py
 9226  lsvirtualenv
 9227  workon checkpoint2
 9228  python run.py
 9229  ll
 9230  pip install -r requirements.txt
 9231  python run.py
 9232  export DATABASE_URL=postgresql://postgres@localhost/bucketlist && \\nexport TEST_DATABASE_URL=postgresql://postgres@localhost/bucketlist_test && \\nexport APP_SECRET=iigMnxLgWdFJppmd3JgZRzOUYLgmjaXX && \\nexport REQUESTS_ORIGIN=*
 9233  python run.py
 9234  export DATABASE_URL=postgresql://postgres@localhost/reactdb && \\nexport TEST_DATABASE_URL=postgresql://postgres@localhost/reactdb && \\nexport APP_SECRET=iigMnxLgWdFJppmd3JgZRzOUYLgmjaXX && \\nexport REQUESTS_ORIGIN=*
 9235  python run.py
 9236  pwd
 9237  ll
 9238  npm start
 9239  workon reactapi
 9240  mkvirtualenv reactfrontend
 9241  npm install -g gulp-cli
 9242  gulp sass
 9243  npm start
 9244  python dbmigration.py db init
 9245  pwd
 9246  pip3 list
 9247  npm list
 9248  exit
 9249  brew install postgresql
 9250  brew upgrade postgresql
 9251  brew list
 9252  pwd
 9253  exit
 9254  cd PROJECTS
 9255  ll
 9256  cd react-app
 9257  ll
 9258  cd bucketlist-api
 9259  ll
 9260  git checkout develop
 9261  ll
 9262  cd mywebsite
 9263  ll
 9264  vim settings.py
 9265  mkdir working branch
 9266  cd working\ branch
 9267  cd working branch
 9268  cd working
 9269  ..
 9270  mkdir working-branch
 9271  cd working-branch
 9272  ll
 9273  git clone git@github.com:john555/bucketlist-api.git
 9274  git checkout challenge\ 3
 9275  git checkout --help
 9276  git branches
 9277  git-show-branch
 9278  git show-branch
 9279  git show-branch --list
 9280  git show-branch --all
 9281  exit
 9282  pwd
 9283  exit
 9284  git clone -b challenge3 git@github.com:john555/bucketlist-api.git
 9285  cd bucketlist-api
 9286  ll
 9287  git branch
 9288  export DATABASE_URL=postgresql://postgres@localhost/reactdb && \\nexport TEST_DATABASE_URL=postgresql://postgres@localhost/reactdb && \\nexport APP_SECRET=iigMnxLgWdFJppmd3JgZRzOUYLgmjaXX && \\nexport REQUESTS_ORIGIN=*
 9289  printenv
 9290  ll
 9291  python dbmigration.py db init
 9292  workon testapienv
 9293  python dbmigration.py db init
 9294  printenv
 9295  python run.py
 9296  python dbmigration.py db init
 9297  ll
 9298  vim dbmigration.py
 9299  cd bucketlist
 9300  ll
 9301  vim __init__.py
 9302  ..
 9303  vim dbmigration.py
 9304  ll
 9305  python run.py
 9306  python dbmigration.py db init
 9307  vim dbmigration.py
 9308  cd PROJECTS
 9309  ll
 9310  cd checkPointII
 9311  ll
 9312  vim migrations
 9313  cd migrations
 9314  ll
 9315  ..
 9316  vim manage.py
 9317  vim dbmigration.py
 9318  vim manage.py
 9319  python dbmigration.py db init
 9320  ll
 9321  python dbmigration.py db init\n$ python dbmigration.py db makemigrations && \python dbmigration.py db migrate
 9322  python dbmigration.py db makemigrations
 9323  python dbmigration.py db migrate
 9324  ll
 9325  vim README.md
 9326  python dbmigration.py db upgrade
 9327  python dbmigration.py db init
 9328  python dbmigration.py db migrate
 9329  python dbmigration.py db upgrade
 9330  python run.py
 9331  ..
 9332  ll
 9333  cd react-app
 9334  ll
 9335  src
 9336  ll
 9337  vim App.Config.js
 9338  npm start
 9339  workon reactfrontend
 9340  npm start
 9341  pwd
 9342  ll
 9343  pwd
 9344  ..
 9345  cd src
 9346  ll
 9347  vim App.Config.js
 9348  ..
 9349  ll
 9350  cd PROJECTS
 9351  ll
 9352  cd react-app
 9353  ll
 9354  cd bucketlist-api
 9355  ll
 9356  vim dbmigration.py
 9357  cd PROJECTS
 9358  ll
 9359  bucketlist-ios-
 9360  ..
 9361  bucketlist-api
 9362  ll
 9363  vim dbmigration.py
 9364  vim Dockerfile
 9365  docker images
 9366  docker mri -f 92 b0 122 08 c7
 9367  docker rmi -f 92 b0 122 08 c7
 9368  docker images
 9369  docker rmi -f c7
 9370  docker rmi -f c71
 9371  docker images
 9372  docker build -t mukiibi:api-image .
 9373  pwd
 9374  ..
 9375  ll
 9376  vim Dockerfile
 9377  docker images
 9378  docker build -t mukiibi:frontend-react .
 9379  docker images
 9380  docker rmi cb
 9381  docker ps 
 9382  docker ps -a
 9383  docker rm 911 34 0f
 9384  docker ps -a
 9385  docker rmi cb
 9386  docker images
 9387  docker build -t mukiibi:api-image .
 9388  docker images
 9389  ll
 9390  pwd
 9391  ..
 9392  cd PROJECTS
 9393  ll
 9394  cd react-app
 9395  ll
 9396  docker build -t mukiibi:frontend-react .
 9397  docker images
 9398  docker rmi -f d3
 9399  docker rmi -f d21
 9400  docker build -t mukiibi:frontend-react .
 9401  ll
 9402  pwd
 9403  cd PROJECTS
 9404  cd react-app
 9405  ll
 9406  docker build -t mukiibi:frontend-react .
 9407  docker images
 9408  vim docker-compose.yml
 9409  code .
 9410  docker rmi -f 115
 9411  docker build -t mukiibi:api-image .
 9412  docker build -t mukiibi:frontend-react .
 9413  workon reactfrontend
 9414  docker build -t mukiibi:frontend-react .
 9415  docker images
 9416  ll
 9417  docker build -t mukiibi:frontend-react .
 9418  exit
 9419  docker build -t mukiibi:frontend-react .wd
 9420  pwd
 9421  cd /Users/davidmukiibi/PROJECTS/react-app
 9422  ll
 9423  docker-compose up -d 
 9424  docker ps -a
 9425  docker logs 8a
 9426  docker ps
 9427  docker logs 33
 9428  docker ps -a
 9429  docker exec 33 python dbmigration.py db init
 9430  docker exec 33 python dbmigration.py db migrate
 9431  docker exec 33 python dbmigration.py db upgrade
 9432  docker logs 33
 9433  docker exec 33 python run.py
 9434  docker logs 33
 9435  docker ps -a
 9436  docker exec 55 ls
 9437  docker exec 552f ls
 9438  docker exec 552f cat /src/App.Config.js
 9439  docker exec 552f echo \ /src/App.Config.js
 9440  docker exec 552f cat /src/App.Config.js
 9441  docker exec 552f cat "export default class Config{\n    static API_BASE_URL = 'application-api:5000'\n} > "/src/App.Config.js
 9442  docker exec 552f cat "export default class Config{\n    static API_BASE_URL = 'application-api:5000'\n}" > /src/App.Config.js
 9443  docker exec 552f echo "export default class Config{\n    static API_BASE_URL = 'application-api:5000'\n}" > /src/App.Config.js
 9444  docker exec 552f ls
 9445  docker exec 552f cat /src/App.Config.js
 9446  docker ps -a
 9447  docker rm -f 552 33cc 8a
 9448  docker ps -a
 9449  docker rm -f 44b 303 8a 6e
 9450  docker ps -a
 9451  docker rm -f 44b2943ec624
 9452  docker images
 9453  docker rmi -f 44b 303 8ac
 9454  docker images
 9455  docker rmi -f 6e
 9456  docker images
 9457  docker rmi -f a6 94
 9458  docker images
 9459  docker rmi -f 94
 9460  docker rmi -f 943b
 9461  docker images
 9462  docker ps -a
 9463  docker build -t mukiibi:api-image .
 9464  docker build -t mukiibi:frontend-react .
 9465  exit
 9466  ll
 9467  docker-compose up -d
 9468  docker ps -a
 9469  docker logs 49
 9470  docker ps -a
 9471  docker logs 4b
 9472  docker logs 6b
 9473  docker logs 4b
 9474  docker ps -a
 9475  docker exec 495 psql -U postgres -h localhost -p 5432
 9476  docker exec 495 psql -U postgres -h localhost -P 5432
 9477  docker exec 495 psql -U postgres -h localhost -p 5432
 9478  docker logs 495
 9479  docker exec 495 psql -U postgres -h localhost && \c reactdb && \dt
 9480  docker exec 495 psql \c reactdb && \dt
 9481  docker exec 495 psql -U postgres \c reactdb && \dt
 9482  docker exec 495 psql -U postgres -d reactdb
 9483  docker exec 495 psql -U postgres -d reactdb && \c reactdb
 9484  docker exec 495 psql -U postgres -d reactdb -dt reactdb
 9485  docker exec 495 psql -U postgres -dt reactdb
 9486  docker exec 495 psql -U postgres -d reactdb -h localhost -p 5432
 9487  docker ps -a
 9488  docker exec 495 psql -U postgres -h localhost -p 5432 --password 
 9489  docker exec 495 psql -U postgres -h localhost -p 5432
 9490  docker ps -a
 9491  docker logs 4b
 9492  docker build -t mukiibi:api-image .
 9493  docker imges
 9494  docker images
 9495  docker rmi -f a1
 9496  docker ps -a
 9497  docker rm -f 6b 4b 49
 9498  docker images
 9499  docker rmi -f a1
 9500  docker images
 9501  docker rmi -f 29
 9502  docker build -t mukiibi:api-image .
 9503  docker build -t mukiibi:frontend-react .
 9504  ll
 9505  docker build -t mukiibi:frontend-react .
 9506  ll
 9507  docker images
 9508  docker rmi -f be
 9509  docker build -t mukiibi:frontend-react .
 9510  ll
 9511  git clone git@github.com:john555/bucketlist-react.git
 9512  ping google.com
 9513  pwd
 9514  git clone git@github.com:john555/bucketlist-react.git
 9515  ..
 9516  cd react-app
 9517  ll
 9518  docker ps -a
 9519  docker images
 9520  ll
 9521  cd bucketlist-react
 9522  ll
 9523  docker build -t mukiibi:frontend-react .
 9524  ping google.com
 9525  docker build -t mukiibi:frontend-react .
 9526  ping google.com
 9527  docker build -t mukiibi:frontend-react .
 9528  ll
 9529  vim /root/.npm/_logs/2018-03-22T11_17_19_572Z-debug.log
 9530  ll
 9531  ping google.com
 9532  ll
 9533  docker build -t mukiibi:frontend-react .
 9534  ping google.com
 9535  ll
 9536  cd PROJECTS
 9537  ll
 9538  cd react-app
 9539  ll
 9540  cd bucketlist-
 9541  cd bucketlist-react
 9542  ll
 9543  mkvirtualenv test
 9544  curl https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
 9545  curl -O https://registry.npmjs.org/wordwrap/-/wordwrap-0.0.2.tgz
 9546  ll
 9547  rm rf wordwrap-0.0.2.tgz
 9548  ll
 9549  npm install -g gulp-cli
 9550  npm uninstall -g gulp-cli
 9551  npm install -g gulp-cli
 9552  ping google.com
 9553  npm install -g gulp-cli
 9554  npm install
 9555  gulp sass
 9556  npm start
 9557  pwd
 9558  ll
 9559  docker build -t mukiibi:frontend-react .
 9560  npm install -g serve
 9561  npm start
 9562  ll
 9563  rm rf package-lock.json
 9564  ll
 9565  npm start
 9566  docker build -t mukiibi:frontend-react .
 9567  pwd
 9568  exit
 9569  pwd
 9570  exit
 9571  ll
 9572  history
 9573  pwd
 9574  ll
 9575  ..
 9576  cd ..
 9577  ll
 9578  ..
 9579  ll
 9580  cd PROJECTS
 9581  ll
 9582  cd react-app
 9583  ll
 9584  cd bucketlist-api
 9585  ll
 9586  ..
 9587  ll
 9588  ..
 9589  ll
 9590  cd react-app
 9591  l
 9592  git clone git@github.com:john555/bucketlist-react.git
 9593  ll
 9594  cd bucketlist-
 9595  cd bucketlist-react
 9596  ll
 9597  docker images
 9598  docker rmi -f e70
 9599  docker images
 9600  docker build -t mukiibi:frontend .
 9601  pwd
 9602  docker images
 9603  docker build -t mukiibi:frontend .
 9604  ping google.com
 9605  docker build -t mukiibi:frontend .
 9606  docker images
 9607  docker rmi -f a55 ee0
 9608  docker images
 9609  pwd
 9610  ll
 9611  docker build -t mukiibi:frontend .
 9612  exit
 9613  ping google.com
 9614  exit
 9615  cd PROJECTS
 9616  ll
 9617  react-app
 9618  ll
 9619  cd bucketlist-
 9620  cd bucketlist-react
 9621  ll
 9622  docker build -t mukiibi:frontend-react .
 9623  docker images
 9624  docker rmi -f 09
 9625  docker build -t mukiibi:frontend-react .
 9626  docker images
 9627  docker rmi -f eb 1b c6 95
 9628  docker images
 9629  docker rmi -f 24
 9630  docker images
 9631  docker build -t mukiibi:frontend-react .
 9632  docker images
 9633  cd PROJECTS
 9634  ll
 9635  cd react-app
 9636  ll
 9637  cd bucketlist-api
 9638  ll
 9639  docker build -t mukiibi:api-image .
 9640  docker ps -a 
 9641  docker images
 9642  cd PROJECTS
 9643  ll
 9644  cd react-app
 9645  ll
 9646  cd bucketlist-api
 9647  ll
 9648  cd database
 9649  ll
 9650  docker build -t mukiibi:database .
 9651  cd PROJECTS
 9652  ll
 9653  cd react-app
 9654  ll
 9655  docker-compose up -d
 9656  docker images
 9657  docker-compose up -d -v bucketlist-react:/react
 9658  docker-compose up -d
 9659  docker ps 0a
 9660  docker ps -a
 9661  docker rm 1b c6 24 95 09 3e
 9662  docker rm d9 db d5 b6 a0 6e
 9663  docker ps -a
 9664  docker rm 3e6
 9665  docker rm d7
 9666  docker ps -a
 9667  docker logs f9
 9668  docker logs a8
 9669  docker logs d4
 9670  docker ps -a
 9671  docker stop f9
 9672  docker rm f9
 9673  docker build -t mukiibi:frontend-react .
 9674  exit
 9675  pwd
 9676  ll
 9677  docker build up -d
 9678  docker-compose up -d
 9679  docker ps -a
 9680  docker logs 01
 9681  docker logs a8
 9682  docker ps -a
 9683  docker rm -f 01
 9684  dockerimages
 9685  docker images
 9686  docker rmi 3a
 9687  docker build -t mukiibi:frontend-react .
 9688  exit
 9689  doll
 9690  ll
 9691  docker-compose up -d
 9692  docker ps -a
 9693  docker logs b0
 9694  docker rm -f b0
 9695  docker images
 9696  docker rmi -f e9
 9697  docker images
 9698  docker build -t mukiibi:frontend-react .
 9699  docker-compose up -d
 9700  docker ps -a
 9701  docker logs 37
 9702  docker rm -f 37
 9703  docker images
 9704  docker rmi -f 87
 9705  exit
 9706  docker build -t mukiibi:frontend-react .
 9707  docker ps -a
 9708  docker-compose up -d
 9709  docker ps -a
 9710  docker logs f3
 9711  kubectl cluster-info
 9712  exit
 9713  kubectl version
 9714  docker images
 9715  ll
 9716  cd PROJECTS
 9717  ll
 9718  cd react-app
 9719  ll
 9720  kubectl create --help
 9721  ll
 9722  kubectl create -f api.yaml
 9723  cat ~/.docker/config.json
 9724  docker images
 9725  kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=mukiibi --docker-password=Sd9-aRP-tEQ-wCm --docker-email=david.mukiibiq@gmail.com
 9726  ll
 9727  kubectl create -f api.yaml
 9728  ping google.com
 9729  kubectl create -f api.yaml
 9730  ping google.com
 9731  kubectl create -f api.yaml
 9732  ping www.google.com
 9733  history
 9734  kubectl cluster-info
 9735  kubectl create -f api.yaml
 9736  kubectl --help
 9737  minikube --help
 9738  minikube stop
 9739  kubectl create -f api.yaml
 9740  kubectl cluster-info
 9741  minikube start
 9742  minikube delete
 9743  kubectl cluster-info
 9744  minikube start
 9745  minikube startminikube status
 9746  minikube status
 9747  kubectl status
 9748  kubectl --help
 9749  kubectl create -f api.yaml
 9750  kubectl cluster-info
 9751  kubectl describe deployment api-deployment
 9752  kubectl get rs
 9753  kubectl describe rs
 9754  ll
 9755  kubectl create -f backend-service.yaml
 9756  kubectl describe service api-backend-service
 9757  ll
 9758  kubectl create -f frontend.yaml
 9759  kubectl create -f frontend-service.yaml
 9760  kubectl describe service frontend
 9761  kubectl delete service frontend
 9762  kubectl describe service frontend
 9763  kubectl create -f frontend-service.yaml
 9764  kubectl describe service frontend
 9765  kubectl get service frontend
 9766  kubectl get ep
 9767  kubectl get service frontend
 9768  kubectl cluster-info
 9769  kubectl cluster-info dump
 9770  kubectl describe service frontend
 9771  ping www.google.comexit
 9772  exit
 9773  ll
 9774  kubectl get rc
 9775  kubectl get service
 9776  kubectl delete service frontend
 9777  kubectl delete service api-backend-service
 9778  kubectl get pods
 9779  kubectl get deployments
 9780  kubectl delete deployments api-deployment
 9781  kubectl delete deployments frontend-deployment
 9782  docker images
 9783  docker rmi -f de
 9784  docker ps -a
 9785  docker rm -f f3 a8 d4
 9786  pwd
 9787  /Users/davidmukiibi/PROJECTS/react-app
 9788  ll
 9789  cd bucketlist-react
 9790  ll
 9791  vim Dockerfile
 9792  docker build -t mukiibi:frontend .
 9793  ll
 9794  vim Dockerfile
 9795  docker build -t mukiibi:frontend .
 9796  ll
 9797  kubectl create -f api.yaml
 9798  kubectl descrbe service api-deployment
 9799  kubectl describe service api-deployment
 9800  kubectl describe deployment api-deployment
 9801  kubectl cluster-info dump > debug.txt
 9802  ll
 9803  code debug.txt
 9804  kubectl get pods api-deployment-5dcf8bfcc4-5zgz5
 9805  kubectl describe pods api-deployment-5dcf8bfcc4-5zgz5
 9806  kubectl delete deployments api-deployment
 9807  kubectl create -f api.yaml
 9808  kubectl cluster-info dump
 9809  kubectl get pods api-deployment-677b7cbf6c-2ghjq
 9810  kubectl describe pods api-deployment-677b7cbf6c-2ghjq
 9811  kubectl delete deployments api-deployment
 9812  kubectl create -f api.yaml
 9813  kubectl cluster-info dump
 9814  kubectl describe pods api-deployment-846c5df6b4-5sdcj
 9815  kubectl delete deployments api-deployment
 9816  kubectl get deployments
 9817  kubectl create -f api.yaml
 9818  kubectl get deployments
 9819  kubectl cluster-info dump
 9820  kubectl describe pods api-deployment-596d7bfc6f-46jww)
 9821  kubectl describe pods api-deployment-596d7bfc6f-46jww
 9822  docker login
 9823  vim $HOME/.docker/config.json
 9824  vim $HOME/.dockercfg
 9825  kubectl delete deployments api-deployment
 9826  kubectl create -f api.yaml
 9827  kubectl cluster-info dump
 9828  kubectl describe pods api-deployment-596d7bfc6f-8nzhp
 9829  docker images
 9830  docker tag mukiibi:api-image eu.gcr.io/kubernetes-practice/api-image
 9831  gcloud docker -- push eu.gcr.io/kubernetes-practice/api-image
 9832  gclooud
 9833  gcloud --help
 9834  gcloud config set project kubernetes-practice
 9835  gcloud components update
 9836  pwd
 9837  exit
 9838  /Users/davidmukiibi/PROJECTS/react-app
 9839  ll
 9840  gcloud config set project kubernetes-practice
 9841  docker tag mukiibi:api-image eu.gcr.io/kubernetes-practice/api-image
 9842  gcloud docker -- push eu.gcr.io/kubernetes-practice/api-image
 9843  docker tag mukiibi:api-image eu.gcr.io/kubernetes-practice-199508/api-image
 9844  gcloud docker -- push eu.gcr.io/kubernetes-practice-199508/api-image
 9845  docker images
 9846  kubectl get deployments
 9847  kubectl delete deployments api-deployment
 9848  kubectl create -f api.yaml
 9849  kubectl describe api-deployment
 9850  kubectl describe deployments api-deployment
 9851  kubectl cluster-info dump
 9852  kubectl describe pods api-deployment-5d4b97f495-8v6hz
 9853  gcloud components install docker-credential-gcr
 9854  docker-credential-gcr configure-docker
 9855  echo "https://eu.gcr.io" | docker-credential-gcr get
 9856  pwd
 9857  $SHELL
 9858  /Users/davidmukiibi/PROJECTS/react-app
 9859  ll
 9860  kubectl cluster-info dump
 9861  kubectl describe pods api-deployment-5d4b97f495-8v6hz
 9862  kubectl delete deployments api-deployment
 9863  kubectl describe pods api-deployment-5d4b97f495-8v6hz
 9864  kubectl cluster-info dump
 9865  kubectl create -f api.yaml
 9866  kubectl cluster-info dump
 9867  kubectl describe api-deployment-5d4b97f495-gqbnn
 9868  kubectl describe pods api-deployment-5d4b97f495-gqbnn
 9869  gcloud auth login
 9870  kubectl cluster-info dump
 9871  vim ~/.bashrc
 9872  vim ~/.zshrc
 9873  $SHELL
 9874  kub cluster-info dump
 9875  kub delete deployments api-deployment
 9876  kub create -f api.yaml
 9877  kub cluster-info
 9878  kub cluster-info dump
 9879  kub describe pods api-deployment-5d4b97f495-6f9zf
 9880  cd Documents
 9881  ll
 9882  pwd
 9883  docker login -u _json_key -p "$(cat /Users/davidmukiibi/Documents/kubernetes-practice-keys.json)" https://eu.gcr.io
 9884  kubectl describe deployments api-deployment
 9885  kubectl delete deployments api-deployment
 9886  kubectl create -f api.yaml
 9887  vim ~/.zshrc
 9888  $SHELL
 9889  k8 cluster-info
 9890  k8 cluster-info dump
 9891  k8 describe pods api-deployment-5d4b97f495-598hz
 9892  gcloud auth activate-service-account --key-file /Users/davidmukiibi/Documents/kubernetes-practice-keys.json
 9893  kubectl delete deployments api-deployment
 9894  kubectl create -f api.yaml
 9895  k8 cluster-info dump
 9896  k8 describe pods api-deployment-5d4b97f495-2hbxn
 9897  docker login -u _json_key -p "$(cat /Users/davidmukiibi/Documents/kubernetes-practice-keys.json)" https://eu.gcr.io
 9898  kubectl create -f api.yaml
 9899  kubectl delete deployments api-deployment
 9900  export PROJECT_ID="$(gcloud config get-value project -q)"
 9901  history
 9902  gcloud config set project kubernetes-practice-199508
 9903  export PROJECT_ID="$(gcloud config get-value project -q)"
 9904  gcloud config --help
 9905  gcloud config list
 9906  gcloud compute project-info describe
 9907  gcloud config configurations activate kubernetes-practice-199508
 9908  gcloud config configurations list
 9909  gcloud config configurations describe
 9910  gcloud config configurations vof-migration-test describe
 9911  gcloud config configurations describe vof-migration-test
 9912  gcloud config configurations delete vof-migration-test
 9913  gcloud config configurations activate default
 9914  gcloud config configurations delete vof-migration-test
 9915  gcloud config configurations create kubernetes-practice
 9916  gcloud config configurations list
 9917  gcloud config configurations activate kubernetes-practice
 9918  gcloud config configurations list
 9919  history
 9920  docker login -u _json_key -p "$(cat /Users/davidmukiibi/Documents/kubernetes-practice-keys.json)" https://eu.gcr.io
 9921  gcloud auth activate-service-account --key-file /Users/davidmukiibi/Documents/kubernetes-practice-keys.json
 9922  gcloud config configurations list
 9923  docker login -u _json_key -p "$(cat /Users/davidmukiibi/Documents/kubernetes-practice-keys.json)" https://eu.gcr.io
 9924  gcloud config set project kubernetes-practice-199508
 9925  gcloud config set compute/zone europe-west1-b
 9926  gcloud config set compute/region europe-west1
 9927  k8 delete deployments api-deployment
 9928  k8 get deployments
 9929  k8 create -f api.yaml
 9930  k8 cluster-info dump
 9931  k8 describe pods api-deployment-5d4b97f495-4m4kp
 9932  export PROJECT_ID="$(gcloud config get-value project -q)"
 9933  ll
 9934  cd bucketlist-react
 9935  docker build -t eu.gcr.io/${PROJECT_ID}/frontend:v1 .
 9936  gcloud docker -- push gcr.io/${PROJECT_ID}/frontend:v1
 9937  docker images
 9938  gcloud docker -- push eu.gcr.io/${PROJECT_ID}/frontend:v1
 9939  docker run --rm -p 3000:3000 eu.gcr.io/${PROJECT_ID}/frontend:v1
 9940  gcloud container clusters create frontend-cluster --num-nodes=3
 9941  gcloud compute instances list
 9942  gcloud container clusters get-credentials hello-cluster
 9943  gcloud container clusters get-credentials frontend-cluster
 9944  kubectl run react --image=eu.gcr.io/${PROJECT_ID}/frontend:v1 --port 3000
 9945  k8 get pods
 9946  k8 describe pods react-db4b57db4-ns9qb
 9947  k8 cluster-info
 9948  k8 cluster-info dump
 9949  history
 9950  kubectl expose deployment react-db4b57db4-ns9qb --type=LoadBalancer --port 3000 --target-port 3000
 9951  k8 get pods
 9952  kubectl expose deployment react --type=LoadBalancer --port 3000 --target-port 3000
 9953  docker ps -a
 9954  kubectl get service
 9955  kubectl get deployment react
 9956  kubectl scale deployment react --replicas=3
 9957  kubectl get deployment react
 9958  kubectl get pods
 9959  kubectl get deployment react
 9960  kubectl delete service react
 9961  gcloud compute forwarding-rules list
 9962  gcloud container clusters delete hello-cluster
 9963  gcloud container clusters delete frontend-cluster
 9964  docker images
 9965  pwd
 9966  ll
 9967  ..
 9968  cd bucketlist-api
 9969  ll
 9970  docker build -t eu.gcr.io/${PROJECT_ID}/api:v2 .
 9971  cd database
 9972  ll
 9973  docker build -t eu.gcr.io/${PROJECT_ID}/database:v2 .
 9974  gcloud docker -- push eu.gcr.io/${PROJECT_ID}/database:v2
 9975  gcloud docker -- push eu.gcr.io/${PROJECT_ID}/api:v2
 9976  ping google.com
 9977  pwd
 9978  ll
 9979  pwd
 9980  ping google.com
 9981  docker images
 9982  ll
 9983  pwd
 9984  history
 9985  gcloud components update
 9986  gcloud container clusters create dbcluster --num-nodes=1
 9987  gcloud container clusters create apicluster --num-nodes=3
 9988  gcloud compute instances list
 9989  gcloud container clusters create frontendcluster --num-nodes=3
 9990  kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/database
 9991  kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/database --port=3000
 9992  kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
 9993  kubectl run --help
 9994  kubectl config current-context
 9995  kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
 9996  kubectl get pods
 9997  ping google.com
 9998  kubectl get pods
 9999  pwd
10000  exit
10001  /Users/davidmukiibi/PROJECTS/react-app
10002* vim /Users/davidmukiibi/.zshrc
10003* which kubectl
10004* gcloud components install kubectl
10005* kubectl cluster-info
10006* kubectl cluster-info dump
10007* brew install bash-completion@2
10008  kubectl get pods
10009  kubectl cluster-info
10010  kubectl cluster-info dump
10011  kubectl config current-context
10012  kubectl run frontenddeployment --image=gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
10013  ping https://35.187.177.92
10014  ping 35.187.177.92
10015  kubectl run frontenddeployment --image=gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
10016  gcloud config list
10017  gcloud config configurations list
10018  gcloud config configurations describe
10019  kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
10020  history
10021  gcloud container clusters create dbcluster --num-nodes=1 && gcloud container clusters create apicluster --num-nodes=3
10022* kubectl run frontenddeployment --image=eu.gcr.io/kubernetes-practice-199508/frontend:v1 --port=3000
10023* docker images
10024* kubectl run frontenddeployment --image=mukiibi/frontend --port=3000
10025  history
10026* gcloud config set project kubernetes-practice-US
10027* gcloud config set project kubernetes-practice-us
10028* gcloud config set --help
10029* gcloud config set region asia-south1
10030* gcloud config set --region asia-south1
10031* gcloud config set compute/region asia-south1
10032* gcloud config set compute/zone asia-south1-a
10033* gcloud config configurations
10034* gcloud config list
10035* gcloud config configurations list
10036* gcloud config list
10037* gcloud config configurations activate kubernetes-practice-us
10038* docker login -u _json_key -p "$(cat /Users/davidmukiibi/Documents/kubernetes-practice-us.json)" https://gcr.io
10039* gcloud auth activate-service-account --key-file /Users/davidmukiibi/Documents/kubernetes-practice-us.json
10040* gcloud config list
10041* docker images
10042* docker tag mukiibi/frontend gcr.io/kubernetes-practice-us/frontend:v1
10043* docker tag mukiibi:frontend gcr.io/kubernetes-practice-us/frontend:v1
10044* docker images
10045* docker tag mukiibi:api-image gcr.io/kubernetes-practice-us/api-image:v1
10046* docker tag mukiibi:database gcr.io/kubernetes-practice-us/database:v1
10047* gcloud docker -- push gcr.io/kubernetes-practice-us/frontend:v1
10048* gcloud docker -- push gcr.io/kubernetes-practice-us/api-image:v1
10049* gcloud docker -- push gcr.io/kubernetes-practice-us/database:v1
10050  ll
10051  gcloud container clusters create dbcluster --num-nodes=1
10052  gcloud container clusters create dbcluster --num-nodes=1 && gcloud container clusters create apicluster --num-nodes=3 && gcloud container clusters create frontendcluster --num-nodes=3
10053* history
10054* kubectl config current-context
10055* kubectl run frontenddeployment --image=gcr.io/gcr.io/kubernetes-practice-us/frontend:v1 --port=3000
10056  ll
10057  vim frontend.yaml
10058  kubectl create -f frontend.yaml\n
10059* docker images
10060  kubectl run frontenddeployment --image=mukiibi:frontend --port=3000
10061  k8 run frontenddeployment --image=gcr.io/gcr.io/kubernetes-practice-us/frontend:v1 --port=3000
10062* vim ~/.zshrc
10063  gcloud config list
10064  ll
